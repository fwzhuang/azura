<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_complex_type" kind="class" language="C++" prot="public">
    <compoundname>ComplexType</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_complex_type_1a56d4b3885333f97a2b0c4fe8388b5fb6" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int ComplexType::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="8" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_complex_type_1a124ec42d1a09b1b559c91546489842b7" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_ctorCalls</definition>
        <argsstring></argsstring>
        <name>s_ctorCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="11" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_complex_type_1a409480197eb1d50bbb6a38dcb8dc3420" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_dtorCalls</definition>
        <argsstring></argsstring>
        <name>s_dtorCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="12" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_complex_type_1a39a0bf7ce15fdca400397b48efa0243a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_copyCtorCalls</definition>
        <argsstring></argsstring>
        <name>s_copyCtorCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="13" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_complex_type_1ac6e5b0dcaa5874c7d44142a11dbc47f2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_moveCtorCalls</definition>
        <argsstring></argsstring>
        <name>s_moveCtorCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="14" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_complex_type_1aaddf8217a962f84dd29d45af0df38a6c" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_copyAssignCalls</definition>
        <argsstring></argsstring>
        <name>s_copyAssignCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="15" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_complex_type_1a40c7761b605a2980bacbdee8f77bc2ba" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int ComplexType::s_moveAssignCalls</definition>
        <argsstring></argsstring>
        <name>s_moveAssignCalls</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="16" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ComplexType::ResetStats</definition>
        <argsstring>()</argsstring>
        <name>ResetStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="18" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ComplexType::ResetStats</definition>
        <argsstring>()</argsstring>
        <name>ResetStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="19" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ComplexType::ResetStats</definition>
        <argsstring>()</argsstring>
        <name>ResetStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="21" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="21" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1abc2f30cd1a7e125ea11c39c896bb2790" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ComplexType::PrintStats</definition>
        <argsstring>()</argsstring>
        <name>PrintStats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="33" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="33" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(int data)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="30" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::~ComplexType</definition>
        <argsstring>()</argsstring>
        <name>~ComplexType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="36" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="41" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>ComplexType</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="47" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="53" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="60" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ComplexType::Data</definition>
        <argsstring>() const</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="67" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(int data)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="31" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::~ComplexType</definition>
        <argsstring>()</argsstring>
        <name>~ComplexType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="37" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="42" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>ComplexType</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="48" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="54" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="61" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ComplexType::Data</definition>
        <argsstring>() const</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="68" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(int data)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="42" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::~ComplexType</definition>
        <argsstring>()</argsstring>
        <name>~ComplexType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="48" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>ComplexType</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="53" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ComplexType::ComplexType</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>ComplexType</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="59" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(const ComplexType &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="65" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;</type>
        <definition>ComplexType&amp; ComplexType::operator=</definition>
        <argsstring>(ComplexType &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_complex_type" kindref="compound">ComplexType</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="72" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ComplexType::Data</definition>
        <argsstring>() const</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="79" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Containers/Benchmark/StdVector_benchmark.cpp" line="7" column="1" bodyfile="Source/Containers/Benchmark/StdVector_benchmark.cpp" bodystart="7" bodyend="70"/>
    <listofallmembers>
      <member refid="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1af79a75d693fc608c27fbfd8d0e60e120" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a379b37381d4502380ed2558446317db4" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1a4698fcf5f6af8c15b80e13b57efd7003" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ComplexType</name></member>
      <member refid="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>Data</name></member>
      <member refid="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>Data</name></member>
      <member refid="class_complex_type_1ad0f3f9ce79e82f5e31e935eea82a24f7" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>Data</name></member>
      <member refid="class_complex_type_1a56d4b3885333f97a2b0c4fe8388b5fb6" prot="private" virt="non-virtual"><scope>ComplexType</scope><name>m_data</name></member>
      <member refid="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1adb5a9208819e9d60628c18a8fd2f2f30" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1a75122648d82c4002014ca11614b4b7a2" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>operator=</name></member>
      <member refid="class_complex_type_1abc2f30cd1a7e125ea11c39c896bb2790" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>PrintStats</name></member>
      <member refid="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ResetStats</name></member>
      <member refid="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ResetStats</name></member>
      <member refid="class_complex_type_1a3117c3acf8e63f830b1a9ba567bf041a" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>ResetStats</name></member>
      <member refid="class_complex_type_1aaddf8217a962f84dd29d45af0df38a6c" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_copyAssignCalls</name></member>
      <member refid="class_complex_type_1a39a0bf7ce15fdca400397b48efa0243a" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_copyCtorCalls</name></member>
      <member refid="class_complex_type_1a124ec42d1a09b1b559c91546489842b7" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_ctorCalls</name></member>
      <member refid="class_complex_type_1a409480197eb1d50bbb6a38dcb8dc3420" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_dtorCalls</name></member>
      <member refid="class_complex_type_1a40c7761b605a2980bacbdee8f77bc2ba" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_moveAssignCalls</name></member>
      <member refid="class_complex_type_1ac6e5b0dcaa5874c7d44142a11dbc47f2" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>s_moveCtorCalls</name></member>
      <member refid="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>~ComplexType</name></member>
      <member refid="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>~ComplexType</name></member>
      <member refid="class_complex_type_1ac7bc98621f4efb157cde6f760f483ae1" prot="public" virt="non-virtual"><scope>ComplexType</scope><name>~ComplexType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
