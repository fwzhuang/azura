<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_forward_compute_scene_8cpp" kind="file" language="C++">
    <compoundname>ForwardComputeScene.cpp</compoundname>
    <includes refid="_forward_compute_scene_8h" local="yes">Forward/ForwardComputeScene.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <incdepgraph>
      <node id="6925">
        <label>Camera/Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6889" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
      </node>
      <node id="6927">
        <label>D3D12/D3D12TextureManager.h</label>
        <link refid="_d3_d12_texture_manager_8h_source"/>
        <childnode refid="6921" relation="include">
        </childnode>
      </node>
      <node id="6889">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6890" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6896">
        <label>functional</label>
      </node>
      <node id="6893">
        <label>GLTFSDK/Document.h</label>
      </node>
      <node id="6885">
        <label>Source/Samples/2_DeferredRenderer/Src/ForwardComputeScene.cpp</label>
        <link refid="_forward_compute_scene_8cpp"/>
        <childnode refid="6886" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
      </node>
      <node id="6901">
        <label>iterator</label>
      </node>
      <node id="6886">
        <label>Forward/ForwardComputeScene.h</label>
        <link refid="_forward_compute_scene_8h_source"/>
        <childnode refid="6887" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6926" relation="include">
        </childnode>
      </node>
      <node id="6912">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6892">
        <label>AssetManager/GLTFLoader.h</label>
        <link refid="_g_l_t_f_loader_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6893" relation="include">
        </childnode>
        <childnode refid="6894" relation="include">
        </childnode>
      </node>
      <node id="6928">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6929" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6915">
        <label>Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
      </node>
      <node id="6907">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
      </node>
      <node id="6923">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6903">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6913">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6899">
        <label>cassert</label>
      </node>
      <node id="6910">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6897">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
      </node>
      <node id="6922">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6929">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6904">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6926">
        <label>App/LightTexture.h</label>
        <link refid="_light_texture_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6888" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
      </node>
      <node id="6914">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6905">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6911">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6888">
        <label>App/Common.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_common_8h_source"/>
        <childnode refid="6889" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6918">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6906">
        <label>tuple</label>
      </node>
      <node id="6902">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6924">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6920">
        <label>vector</label>
      </node>
      <node id="6898">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6902" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6919">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6920" relation="include">
        </childnode>
      </node>
      <node id="6916">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
      </node>
      <node id="6908">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6891">
        <label>Types.h</label>
      </node>
      <node id="6930">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6921" relation="include">
        </childnode>
      </node>
      <node id="6894">
        <label>GLTFSDK/GLTFResourceReader.h</label>
      </node>
      <node id="6890">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6895">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
      </node>
      <node id="6887">
        <label>App/Scene.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_scene_8h_source"/>
        <childnode refid="6888" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6921" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
      </node>
      <node id="6917">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6891" relation="include">
        </childnode>
      </node>
      <node id="6921">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
      </node>
      <node id="6900">
        <label>cstring</label>
      </node>
      <node id="6909">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Forward/ForwardComputeScene.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">ForwardComputeScene::ForwardComputeScene(Memory::Allocator&amp;<sp/>mainAllocator,<sp/>Memory::Allocator&amp;<sp/>drawAllocator)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>:<sp/>Scene(</highlight><highlight class="stringliteral">&quot;ForwardComputeScene&quot;</highlight><highlight class="normal">,<sp/>mainAllocator,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lightTexture(NUM_LIGHTS,<sp/>7,<sp/>mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForwardComputeScene::Initialize(Window&amp;<sp/>window,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Camera&amp;<sp/>camera,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshObject&amp;<sp/>sceneMesh,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UniformBufferData&amp;<sp/>uboData,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerDesc&amp;<sp/>lightSamplerDesc,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;PointLight&gt;&amp;<sp/>lights)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>0x40</highlight><highlight class="stringliteral">&apos;0000);</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/>UNUSED(camera);</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>&quot;ForwardComputeScene&quot;;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/>const<sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(6,<sp/>4,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/>m_pass.m_uboSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>1</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/>m_pass.m_sampSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::Sampler,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/>m_pass.m_lightSampSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::Sampler,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>2</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/>m_pass.m_texSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/>m_pass.m_normalSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0<sp/>for<sp/>Compute</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/>m_pass.m_computeUBO<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Compute</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_uboSlot</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_sampSlot,<sp/>m_pass.m_lightSampSlot</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_texSlot,<sp/>m_pass.m_normalSlot</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_computeUBO</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>VERTEX_SHADER_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ForwardCompute.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ForwardCompute.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;ForwardCompute.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(1,<sp/>2,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/>renderPassRequirements.m_maxPools<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_TARGET<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT,<sp/>NUM_LIGHTS,<sp/>2});</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/>m_pass.m_computePassId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{COMPUTE_SHADER_ID},<sp/><sp/><sp/><sp/>//<sp/>SHADERS</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>INPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{LIGHT_TARGET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{LIGHT_UBO_SET},<sp/>//<sp/>DESCRIPTORS</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/>m_pass.m_passId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>SHADERS</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{{LIGHT_TARGET,<sp/>ShaderStage::Pixel}},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>INPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>SAMPLER_SET,<sp/>TEXTURE_SET},<sp/>//<sp/>DESCRIPTORS</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.GetSwapChainRequirements(),<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawAllocator,</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window);</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/>//<sp/>Load<sp/>Assets</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/>m_lightTexture.Fill(lights);</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindRenderTarget(LIGHT_TARGET,<sp/>m_lightTexture.GetTextureDesc(),<sp/>m_lightTexture.GetBuffer());</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>computePoolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_computePasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{{m_pass.m_computePassId},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_launchDims<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ThreadGroupDimensions{TILES_X,<sp/>1,<sp/>1};</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computePool<sp/>=<sp/>m_renderer-&gt;CreateComputePool(computePoolInfo);</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/>m_computePool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;computePool;</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/>const<sp/>LightUBO<sp/>temp{};</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lightUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;temp);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/>computePool.BindUniformData(m_pass.m_computeUBO,<sp/>lightUBOStart,<sp/>sizeof(LightUBO));</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_renderPasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{{m_pass.m_passId},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_cullMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CullMode::None;</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>NORMAL_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMAL&quot;,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>UV_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({BufferUsageRate::PerVertex,<sp/>{{&quot;UV&quot;,<sp/>RawStorageFormat::R32G32_FLOAT}}});</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/>DrawablePool&amp;<sp/>pool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/>m_mainPool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pool;</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/>//<sp/>Pool<sp/>Binds</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/>pool.BindSampler(m_pass.m_sampSlot,<sp/>{});</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/>pool.BindSampler(m_pass.m_lightSampSlot,<sp/>lightSamplerDesc);</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/>//<sp/>Bind<sp/>Texture</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>colorTexture<sp/><sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/sponza/color.png&quot;);</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>normalTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/sponza/normal.png&quot;);</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>colorDesc<sp/><sp/>=<sp/>m_textureManager-&gt;GetInfo(colorTexture);</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>normalDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(normalTexture);</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_Scene,<sp/>colorDesc<sp/>!=<sp/>nullptr,<sp/>&quot;Color<sp/>Texture<sp/>Description<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_Scene,<sp/>normalDesc<sp/>!=<sp/>nullptr,<sp/>&quot;Normal<sp/>Texture<sp/>Description<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/>pool.BindTextureData(m_pass.m_texSlot,<sp/>*colorDesc,<sp/>m_textureManager-&gt;GetData(colorTexture));</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/>pool.BindTextureData(m_pass.m_normalSlot,<sp/>*normalDesc,<sp/>m_textureManager-&gt;GetData(normalTexture));</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/>//<sp/>Bind<sp/>Light<sp/>Texture</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>vertexStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_vertexData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>normalStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_normalData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uvStart<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_uvData.data());<sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>indexBufferStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_indexData.data());<sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/>//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sceneMesh.m_numVertices;</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sceneMesh.m_numIndices;</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/>//<sp/>Drawable<sp/>Binds</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/>m_sponzaId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>VERTEX_SLOT,<sp/>vertexStart,<sp/>sceneMesh.m_vertexDataSize);</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>NORMAL_SLOT,<sp/>normalStart,<sp/>sceneMesh.m_normalDataSize);</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>UV_SLOT,<sp/>uvStart,<sp/>sceneMesh.m_uvDataSize);</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/>pool.SetIndexData(m_sponzaId,<sp/>indexBufferStart,<sp/>sceneMesh.m_indexDataSize);</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/>pool.BindUniformData(m_sponzaId,<sp/>m_pass.m_uboSlot,<sp/>uboDataBuffer,<sp/>sizeof(UniformBufferData));</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral">void<sp/>ForwardComputeScene::Update(float<sp/>timeDelta,</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Camera&amp;<sp/>camera,</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>UniformBufferData&amp;<sp/>uboData,</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Containers::Vector&lt;PointLight&gt;&amp;<sp/>lights)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/>UNUSED(lights);</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/>UNUSED(camera);</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/>LightUBO<sp/>frameUBO<sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/>frameUBO.m_timeDelta<sp/>=<sp/>timeDelta;</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;uboData);<sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lightUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;frameUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;UpdateUniformData(m_pass.m_computeUBO,<sp/>lightUBOStart,<sp/>sizeof(LightUBO));</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_sponzaId,<sp/>m_pass.m_uboSlot,<sp/>uboDataBuffer,<sp/>sizeof(UniformBufferData));</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral">void<sp/>ForwardComputeScene::CleanUp()<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Azura</highlight></codeline>
    </programlisting>
    <location file="Source/Samples/2_DeferredRenderer/Src/ForwardComputeScene.cpp"/>
  </compounddef>
</doxygen>
