<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_cloth_common_8h" kind="file" language="C++">
    <compoundname>ClothCommon.h</compoundname>
    <includes refid="_core_8h" local="yes">Math/Core.h</includes>
    <includes refid="_geometry_8h" local="yes">Math/Geometry.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">boost/container_hash/hash.hpp</includes>
    <includedby refid="_samples_20___test_zone_2_inc_2_test_zone_2_cloth_mesh_8h" local="yes">Source/Samples/0_TestZone/Inc/TestZone/ClothMesh.h</includedby>
    <includedby refid="_imported_cloth_mesh_8h" local="yes">Source/Samples/0_TestZone/Inc/TestZone/ImportedClothMesh.h</includedby>
    <incdepgraph>
      <node id="5902">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="5903" relation="include">
        </childnode>
        <childnode refid="5904" relation="include">
        </childnode>
      </node>
      <node id="5906">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="5904" relation="include">
        </childnode>
        <childnode refid="5907" relation="include">
        </childnode>
        <childnode refid="5908" relation="include">
        </childnode>
        <childnode refid="5909" relation="include">
        </childnode>
        <childnode refid="5910" relation="include">
        </childnode>
        <childnode refid="5911" relation="include">
        </childnode>
      </node>
      <node id="5914">
        <label>boost/container_hash/hash.hpp</label>
      </node>
      <node id="5910">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="5911">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="5907">
        <label>tuple</label>
      </node>
      <node id="5912">
        <label>vector</label>
      </node>
      <node id="5905">
        <label>Math/Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="5904" relation="include">
        </childnode>
        <childnode refid="5906" relation="include">
        </childnode>
      </node>
      <node id="5901">
        <label>Source/Samples/0_TestZone/Inc/TestZone/ClothCommon.h</label>
        <link refid="_cloth_common_8h"/>
        <childnode refid="5902" relation="include">
        </childnode>
        <childnode refid="5905" relation="include">
        </childnode>
        <childnode refid="5912" relation="include">
        </childnode>
        <childnode refid="5913" relation="include">
        </childnode>
        <childnode refid="5914" relation="include">
        </childnode>
      </node>
      <node id="5908">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="5913">
        <label>unordered_map</label>
      </node>
      <node id="5904">
        <label>Types.h</label>
      </node>
      <node id="5903">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="5909">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5918">
        <label>Source/Samples/0_TestZone/Inc/TestZone/ImportedClothMesh.h</label>
        <link refid="_imported_cloth_mesh_8h_source"/>
        <childnode refid="5917" relation="include">
        </childnode>
      </node>
      <node id="5916">
        <label>Source/Samples/0_TestZone/Inc/TestZone/ClothMesh.h</label>
        <link refid="_samples_20___test_zone_2_inc_2_test_zone_2_cloth_mesh_8h_source"/>
        <childnode refid="5917" relation="include">
        </childnode>
      </node>
      <node id="5917">
        <label>Source/Samples/0_TestZone/Inc/TestZone/AppRenderer.h</label>
        <link refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h_source"/>
      </node>
      <node id="5915">
        <label>Source/Samples/0_TestZone/Inc/TestZone/ClothCommon.h</label>
        <link refid="_cloth_common_8h"/>
        <childnode refid="5916" relation="include">
        </childnode>
        <childnode refid="5918" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_azura_1_1_edge" prot="public">Azura::Edge</innerclass>
    <innerclass refid="struct_azura_1_1_edge_map_hash" prot="public">Azura::EdgeMapHash</innerclass>
    <innerclass refid="struct_azura_1_1_distance_constraint" prot="public">Azura::DistanceConstraint</innerclass>
    <innerclass refid="struct_azura_1_1_bending_constraint" prot="public">Azura::BendingConstraint</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Core.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Geometry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/container_hash/hash.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="12" refid="struct_azura_1_1_edge" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_azura_1_1_physics_1_1_edge" kindref="compound">Edge</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexA;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexB;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_physics_1_1_edge" kindref="compound">Edge</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="18"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((m_indexA<sp/>==<sp/>rhs.m_indexA)<sp/>&amp;&amp;<sp/>(m_indexB<sp/>==<sp/>rhs.m_indexB))<sp/>||<sp/>((m_indexA<sp/>==<sp/>rhs.m_indexB)<sp/>&amp;&amp;<sp/>(m_indexB<sp/>==<sp/>rhs.m_indexA));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="struct_azura_1_1_edge_map_hash" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_azura_1_1_physics_1_1_edge_map_hash" kindref="compound">EdgeMapHash</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>operator<sp/>()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_physics_1_1_edge" kindref="compound">Edge</ref>&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::hash_value(std::make_pair(e.m_indexA,<sp/>e.m_indexB))<sp/>+<sp/>boost::hash_value(std::make_pair(e.m_indexB,<sp/>e.m_indexA));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="struct_azura_1_1_distance_constraint" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_physics_1_1_p_b_d_1_1_distance_constraint" kindref="compound">DistanceConstraint</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexA;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexB;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_restLength;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass1{1.0f};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass2{1.0f};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_physics_1_1_p_b_d_1_1_distance_constraint" kindref="compound">DistanceConstraint</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="37"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(m_indexA,<sp/>m_indexB)<sp/>&lt;<sp/>std::tie(rhs.m_indexA,<sp/>rhs.m_indexB);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_physics_1_1_p_b_d_1_1_distance_constraint" kindref="compound">DistanceConstraint</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="42"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((m_indexA<sp/>==<sp/>rhs.m_indexA)<sp/>&amp;&amp;<sp/>(m_indexB<sp/>==<sp/>rhs.m_indexB))<sp/>||<sp/>((m_indexA<sp/>==<sp/>rhs.m_indexB)<sp/>&amp;&amp;<sp/>(m_indexB<sp/>==<sp/>rhs.m_indexA));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector4f<sp/>ComputeDeltaX1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vector4f&gt;&amp;<sp/>currentPositions,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="47"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor<sp/>=<sp/>m_invMass1<sp/>/<sp/>(m_invMass1<sp/>+<sp/>m_invMass2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector4f<sp/>x12<sp/>=<sp/>currentPositions[m_indexA]<sp/>-<sp/>currentPositions[m_indexB];</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(k<sp/>*<sp/>-1.0f<sp/>*<sp/>invMassFactor<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector4f<sp/>ComputeDeltaX2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vector4f&gt;&amp;<sp/>currentPositions,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>k)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="54"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor<sp/>=<sp/>m_invMass2<sp/>/<sp/>(m_invMass1<sp/>+<sp/>m_invMass2);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector4f<sp/>x12<sp/>=<sp/>currentPositions[m_indexA]<sp/>-<sp/>currentPositions[m_indexB];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(k<sp/>*<sp/>invMassFactor<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="struct_azura_1_1_bending_constraint" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_physics_1_1_p_b_d_1_1_bending_constraint" kindref="compound">BendingConstraint</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexX0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexX1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexX2;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>m_indexX3;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass0{1.0f};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass1{1.0f};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass2{1.0f};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_invMass3{1.0f};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4f<sp/>m_Q;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;Vector4f,<sp/>4&gt;<sp/>Compute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vector4f&gt;&amp;<sp/>currentPositions,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stiffness)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;U32,<sp/>4&gt;<sp/>indices<sp/>=<sp/>{m_indexX0,<sp/>m_indexX1,<sp/>m_indexX2,<sp/>m_indexX3};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;float,<sp/>4&gt;<sp/>invMasses<sp/>=<sp/>{m_invMass0,<sp/>m_invMass1,<sp/>m_invMass2,<sp/>m_invMass3};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cX<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>0;<sp/>idy<sp/>&lt;<sp/>4;<sp/>++idy)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cX<sp/>+=<sp/>m_Q(idx,<sp/>idy)<sp/>*<sp/>Vector3f::DotProduct(currentPositions[indices[idx]].xyz(),<sp/>currentPositions[indices[idy]].xyz());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cX<sp/>=<sp/>cX<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;Vector3f,<sp/>4&gt;<sp/>partialDeltas<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;Vector4f,<sp/>4&gt;<sp/>finalDeltas<sp/>=<sp/>{<sp/>Vector4f(0.0f),<sp/>Vector4f(0.0f),<sp/>Vector4f(0.0f),<sp/>Vector4f(0.0f)<sp/>};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partialDeltas[idx]<sp/>=<sp/>ComputeBendingGradient(currentPositions,<sp/>m_Q,<sp/>indices,<sp/>idx);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(invMasses[idx]<sp/>*<sp/>Vector3f::DotProduct(partialDeltas[idx],<sp/>partialDeltas[idx]));<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(sum)<sp/>&gt;<sp/>EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalDeltas[idx]<sp/>=<sp/>Vector4f((stiffness<sp/>*<sp/>-1.0f<sp/>*<sp/>cX<sp/>*<sp/>invMasses[idx]<sp/>*<sp/>partialDeltas[idx])<sp/>/<sp/>sum,<sp/>0.0f);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalDeltas;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3f<sp/>ComputeBendingGradient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Vector4f&gt;&amp;<sp/>currentPositions,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f&amp;<sp/>Q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;U32,<sp/>4&gt;&amp;<sp/>indices,<sp/>U32<sp/>rowI)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="109"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f<sp/>sum<sp/>=<sp/>Vector3f(0.0f);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idj<sp/>=<sp/>0;<sp/>idj<sp/>&lt;<sp/>4;<sp/>++idj)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>Q(rowI,<sp/>idj)<sp/>*<sp/>currentPositions[indices[idj]].xyz();<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Samples/0_TestZone/Inc/TestZone/ClothCommon.h"/>
  </compounddef>
</doxygen>
