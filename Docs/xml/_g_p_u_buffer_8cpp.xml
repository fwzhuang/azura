<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_g_p_u_buffer_8cpp" kind="file" language="C++">
    <compoundname>GPUBuffer.cpp</compoundname>
    <includes refid="_g_p_u_buffer_8h" local="yes">Generic/GPUBuffer.h</includes>
    <incdepgraph>
      <node id="2718">
        <label>functional</label>
      </node>
      <node id="2719">
        <label>iterator</label>
      </node>
      <node id="2730">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2713" relation="include">
        </childnode>
      </node>
      <node id="2725">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2724" relation="include">
        </childnode>
        <childnode refid="2726" relation="include">
        </childnode>
        <childnode refid="2727" relation="include">
        </childnode>
        <childnode refid="2728" relation="include">
        </childnode>
        <childnode refid="2729" relation="include">
        </childnode>
      </node>
      <node id="2721">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
      </node>
      <node id="2731">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2716">
        <label>cassert</label>
      </node>
      <node id="2728">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2714">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2715" relation="include">
        </childnode>
        <childnode refid="2723" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2725" relation="include">
        </childnode>
        <childnode refid="2730" relation="include">
        </childnode>
        <childnode refid="2731" relation="include">
        </childnode>
        <childnode refid="2732" relation="include">
        </childnode>
        <childnode refid="2729" relation="include">
        </childnode>
      </node>
      <node id="2722">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2732">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2723">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2724" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
      </node>
      <node id="2729">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2724">
        <label>tuple</label>
      </node>
      <node id="2720">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
      </node>
      <node id="2715">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2716" relation="include">
        </childnode>
        <childnode refid="2717" relation="include">
        </childnode>
        <childnode refid="2718" relation="include">
        </childnode>
        <childnode refid="2719" relation="include">
        </childnode>
        <childnode refid="2720" relation="include">
        </childnode>
        <childnode refid="2721" relation="include">
        </childnode>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2722" relation="include">
        </childnode>
      </node>
      <node id="2712">
        <label>Generic/GPUBuffer.h</label>
        <link refid="_g_p_u_buffer_8h_source"/>
        <childnode refid="2713" relation="include">
        </childnode>
        <childnode refid="2714" relation="include">
        </childnode>
      </node>
      <node id="2726">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2713">
        <label>Types.h</label>
      </node>
      <node id="2711">
        <label>Source/Azura/RenderSystem/Src/Generic/GPUBuffer.cpp</label>
        <link refid="_g_p_u_buffer_8cpp"/>
        <childnode refid="2712" relation="include">
        </childnode>
      </node>
      <node id="2717">
        <label>cstring</label>
      </node>
      <node id="2727">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Generic/GPUBuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal">SizeType<sp/>Align(SizeType<sp/>uLocation,<sp/>SizeType<sp/>uAlign)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0<sp/>==<sp/>uAlign)<sp/>||<sp/>(uAlign<sp/>&amp;<sp/>(uAlign<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Non<sp/>Power<sp/>of<sp/>2<sp/>alignment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uLocation<sp/>+<sp/>(uAlign<sp/>-<sp/>1))<sp/>&amp;<sp/>~(uAlign<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">BufferEntry::BufferEntry(U32<sp/>offset,<sp/>U32<sp/>size,<sp/>U32<sp/>maxSize,<sp/>DescriptorType<sp/>type)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>:<sp/>m_offset(offset),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size(size),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxSize(maxSize),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_type(type)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">GPUBuffer::GPUBuffer(U32<sp/>size)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>:<sp/>m_byteSize(size)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">MappedGPUBuffer::MappedGPUBuffer(U8*<sp/>beginPtr,<sp/>U32<sp/>maxEntries,<sp/>U32<sp/>size,<sp/>Memory::Allocator&amp;<sp/>allocator)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>:<sp/>GPUBuffer(size),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dataCur(beginPtr),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dataBeg(beginPtr),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dataEnd(beginPtr<sp/>+<sp/>size),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_entries(maxEntries,<sp/>allocator)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>assert(p_dataBeg<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>assert(p_dataCur<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>assert(size<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>assert(maxEntries<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MappedGPUBuffer::SubAllocate(U32<sp/>size,<sp/>U32<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>assert(size<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>assert(alignment<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>p_dataCur<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Align(reinterpret_cast&lt;SizeType&gt;(p_dataCur),<sp/>SizeType(alignment)));<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_dataCur<sp/>+<sp/>size<sp/>&gt;<sp/>p_dataEnd)<sp/>?<sp/>false<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Generic/GPUBuffer.cpp"/>
  </compounddef>
</doxygen>
