<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespace_azura_1_1_vulkan_1_1_vk_core" kind="namespace" language="C++">
    <compoundname>Azura::Vulkan::VkCore</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vk_core_8h_1a4e4a7977c3b052fabe89473802d8229c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkInstance</type>
        <definition>VkInstance Azura::Vulkan::VkCore::CreateInstance</definition>
        <argsstring>(const ApplicationInfo &amp;applicationData, const Containers::Vector&lt; const char *&gt; &amp;vkExtensions, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateInstance</name>
        <param>
          <type>const <ref refid="struct_azura_1_1_application_info" kindref="compound">ApplicationInfo</ref> &amp;</type>
          <declname>applicationData</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; const char *&gt; &amp;</type>
          <declname>vkExtensions</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="33" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="279" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a8ce595c5642f0ed5b06b930833415424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_azura_1_1_vulkan_1_1_swap_chain_device_support" kindref="compound">SwapChainDeviceSupport</ref></type>
        <definition>SwapChainDeviceSupport Azura::Vulkan::VkCore::QuerySwapChainSupport</definition>
        <argsstring>(VkPhysicalDevice device, VkSurfaceKHR surface, Memory::Allocator &amp;allocator)</argsstring>
        <name>QuerySwapChainSupport</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="38" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="371" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ae9f81cdbc8dfbcb20f6c9c02b72dfd7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkPhysicalDevice</type>
        <definition>VkPhysicalDevice Azura::Vulkan::VkCore::SelectPhysicalDevice</definition>
        <argsstring>(VkInstance instance, VkSurfaceKHR surface, const DeviceRequirements &amp;requirements, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>SelectPhysicalDevice</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref> &amp;</type>
          <declname>requirements</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="42" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="396" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a3025fc97a1354ce68b52412f10829bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDevice</type>
        <definition>VkDevice Azura::Vulkan::VkCore::CreateLogicalDevice</definition>
        <argsstring>(VkPhysicalDevice physicalDevice, const VkQueueIndices &amp;queueIndices, const DeviceRequirements &amp;requirements, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateLogicalDevice</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_vulkan_1_1_vk_queue_indices" kindref="compound">VkQueueIndices</ref> &amp;</type>
          <declname>queueIndices</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref> &amp;</type>
          <declname>requirements</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="46" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="453" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ac863b4409b062393cfd62d2b65218a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_azura_1_1_vulkan_1_1_vk_queue_indices" kindref="compound">VkQueueIndices</ref></type>
        <definition>VkQueueIndices Azura::Vulkan::VkCore::FindQueueFamiliesInDevice</definition>
        <argsstring>(VkPhysicalDevice device, VkSurfaceKHR surface, const DeviceRequirements &amp;requirements, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>FindQueueFamiliesInDevice</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref> &amp;</type>
          <declname>requirements</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="51" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="326" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ac60d199e280b072c0f35948a297f2937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkQueue</type>
        <definition>VkQueue Azura::Vulkan::VkCore::GetQueueFromDevice</definition>
        <argsstring>(VkDevice device, int queueIndex)</argsstring>
        <name>GetQueueFromDevice</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>queueIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="56" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="521" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ac7974b7742655df35b7b51ef47785c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImage</type>
        <definition>VkImage Azura::Vulkan::VkCore::CreateImage</definition>
        <argsstring>(VkDevice device, RawStorageFormat format, ImageType imageType, const Bounds2D &amp;bounds, U32 depth, U32 layers, U32 mips, VkImageTiling tiling, VkImageUsageFlags imageUsage, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateImage</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>RawStorageFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>ImageType</type>
          <declname>imageType</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds2_d" kindref="compound">Bounds2D</ref> &amp;</type>
          <declname>bounds</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>depth</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>mips</declname>
        </param>
        <param>
          <type>VkImageTiling</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>VkImageUsageFlags</type>
          <declname>imageUsage</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="58" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="527" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a9257b70c28f286ba7a2bba15c09dca62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageView</type>
        <definition>VkImageView Azura::Vulkan::VkCore::CreateImageView</definition>
        <argsstring>(VkDevice device, VkImage sourceImage, VkImageViewType viewType, VkFormat viewFormat, VkImageAspectFlags aspectMask, const Log &amp;log_VulkanRenderSystem, U32 baseMip=0, U32 levelCount=1, U32 baseArrayLayer=0, U32 layerCount=1)</argsstring>
        <name>CreateImageView</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>sourceImage</declname>
        </param>
        <param>
          <type>VkImageViewType</type>
          <declname>viewType</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>viewFormat</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>aspectMask</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>baseMip</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>U32</type>
          <declname>levelCount</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>U32</type>
          <declname>baseArrayLayer</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>U32</type>
          <declname>layerCount</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="69" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="573" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a7f70eab13721c8a601e30dffa11930e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkRenderPass</type>
        <definition>VkRenderPass Azura::Vulkan::VkCore::CreateRenderPass</definition>
        <argsstring>(VkDevice device, const VkScopedSwapChain &amp;swapChain, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateRenderPass</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_vulkan_1_1_vk_scoped_swap_chain" kindref="compound">VkScopedSwapChain</ref> &amp;</type>
          <declname>swapChain</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="80" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="610" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ad82468d0d94e737754e4134b3257f307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateUniformBufferBinding</definition>
        <argsstring>(Containers::Vector&lt; VkDescriptorSetLayoutBinding &gt; &amp;bindings, U32 binding, U32 count, VkShaderStageFlags stageFlag)</argsstring>
        <name>CreateUniformBufferBinding</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>bindings</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>stageFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="82" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="677" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a7fca0f00cf22aa797a5c72a7c2a80ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateSamplerBinding</definition>
        <argsstring>(Containers::Vector&lt; VkDescriptorSetLayoutBinding &gt; &amp;bindings, U32 binding, U32 count, VkShaderStageFlags stageFlag)</argsstring>
        <name>CreateSamplerBinding</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>bindings</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>stageFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="87" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="691" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ab6da51e7a6333e9777531b46e868be39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateSampledImageBinding</definition>
        <argsstring>(Containers::Vector&lt; VkDescriptorSetLayoutBinding &gt; &amp;bindings, U32 binding, U32 count, VkShaderStageFlags stageFlag)</argsstring>
        <name>CreateSampledImageBinding</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>bindings</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>stageFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="89" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="705" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ae24ffc526e53559e5315f20a69c512cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateCombinedImageSamplerBinding</definition>
        <argsstring>(Containers::Vector&lt; VkDescriptorSetLayoutBinding &gt; &amp;bindings, U32 binding, U32 count, VkShaderStageFlags stageFlag)</argsstring>
        <name>CreateCombinedImageSamplerBinding</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>bindings</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkShaderStageFlags</type>
          <declname>stageFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="91" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="719" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a34215d6948cab0546f7b5e83f448e40d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDescriptorSetLayout</type>
        <definition>VkDescriptorSetLayout Azura::Vulkan::VkCore::CreateDescriptorSetLayout</definition>
        <argsstring>(VkDevice device, const Containers::Vector&lt; VkDescriptorSetLayoutBinding &gt; &amp;bindings, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateDescriptorSetLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayoutBinding &gt; &amp;</type>
          <declname>bindings</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="93" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="734" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a0ae5bcdb3f52374ec2b7ed5ae1bcaf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkPipelineLayout</type>
        <definition>VkPipelineLayout Azura::Vulkan::VkCore::CreatePipelineLayout</definition>
        <argsstring>(VkDevice device, const Containers::Vector&lt; VkDescriptorSetLayout &gt; &amp;descriptorSets, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreatePipelineLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayout &gt; &amp;</type>
          <declname>descriptorSets</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="96" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="749" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1af26f6173bf1a0dc082a296e737ed10f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderModule</type>
        <definition>VkShaderModule Azura::Vulkan::VkCore::CreateShaderModule</definition>
        <argsstring>(VkDevice device, const Containers::Vector&lt; U8 &gt; &amp;code, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateShaderModule</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; U8 &gt; &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="100" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="765" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a0d34232378b5917f10fb741c78228df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkFramebuffer &gt;</type>
        <definition>Containers::Vector&lt; VkFramebuffer &gt; Azura::Vulkan::VkCore::CreateFrameBuffers</definition>
        <argsstring>(VkDevice device, VkRenderPass renderPass, const VkScopedSwapChain &amp;scopedSwapChain, Memory::Allocator &amp;allocator, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateFrameBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>renderPass</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_vulkan_1_1_vk_scoped_swap_chain" kindref="compound">VkScopedSwapChain</ref> &amp;</type>
          <declname>scopedSwapChain</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="104" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="780" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ac9e2a4bb5fb5952fdf67f511a7f3bbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateFrameBuffers</definition>
        <argsstring>(VkDevice device, VkRenderPass renderPass, const VkScopedSwapChain &amp;scopedSwapChain, Containers::Vector&lt; VkFramebuffer &gt; &amp;frameBuffers, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateFrameBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>renderPass</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_vulkan_1_1_vk_scoped_swap_chain" kindref="compound">VkScopedSwapChain</ref> &amp;</type>
          <declname>scopedSwapChain</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkFramebuffer &gt; &amp;</type>
          <declname>frameBuffers</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="110" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="810" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a2d695863b8e88713845669e54f658a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandPool</type>
        <definition>VkCommandPool Azura::Vulkan::VkCore::CreateCommandPool</definition>
        <argsstring>(VkDevice device, int queueIndex, VkCommandPoolCreateFlags flags, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateCommandPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>queueIndex</declname>
        </param>
        <param>
          <type>VkCommandPoolCreateFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="116" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="841" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a00abd78d1cb84c167799fb6ef43a5e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>U32</type>
        <definition>U32 Azura::Vulkan::VkCore::FindMemoryType</definition>
        <argsstring>(U32 typeFilter, VkMemoryPropertyFlags properties, const VkPhysicalDeviceMemoryProperties &amp;physicalDeviceMemoryProperties)</argsstring>
        <name>FindMemoryType</name>
        <param>
          <type>U32</type>
          <declname>typeFilter</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const VkPhysicalDeviceMemoryProperties &amp;</type>
          <declname>physicalDeviceMemoryProperties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="121" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="856" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ad75faea38e864f734bc38ca4b25a88ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDescriptorPoolSize</type>
        <definition>VkDescriptorPoolSize Azura::Vulkan::VkCore::CreateDescriptorPoolSize</definition>
        <argsstring>(VkDescriptorType type, U32 descriptorCount)</argsstring>
        <name>CreateDescriptorPoolSize</name>
        <param>
          <type>VkDescriptorType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>descriptorCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="125" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="871" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ae92d54623eb6c8d6b2323fa0682464ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDescriptorPool</type>
        <definition>VkDescriptorPool Azura::Vulkan::VkCore::CreateDescriptorPool</definition>
        <argsstring>(VkDevice device, const Containers::Vector&lt; VkDescriptorPoolSize &gt; &amp;pools, U32 maxSets, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateDescriptorPool</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorPoolSize &gt; &amp;</type>
          <declname>pools</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>maxSets</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="127" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="878" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a98a3fbafd7272737b9caa100e8ce418e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkDescriptorSet</type>
        <definition>VkDescriptorSet Azura::Vulkan::VkCore::CreateDescriptorSet</definition>
        <argsstring>(VkDevice device, VkDescriptorPool descriptorPool, const Containers::Vector&lt; VkDescriptorSetLayout &gt; &amp;descriptorSets, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateDescriptorSet</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkDescriptorPool</type>
          <declname>descriptorPool</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorSetLayout &gt; &amp;</type>
          <declname>descriptorSets</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="132" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="894" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a7b16712e1b22a45f0aef652dfd4bc1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkWriteDescriptorSet</type>
        <definition>VkWriteDescriptorSet Azura::Vulkan::VkCore::CreateWriteDescriptorForUniformBuffer</definition>
        <argsstring>(VkDescriptorSet set, U32 layoutIndex, U32 binding, const Containers::Vector&lt; VkDescriptorBufferInfo &gt; &amp;bufferInfos)</argsstring>
        <name>CreateWriteDescriptorForUniformBuffer</name>
        <param>
          <type>VkDescriptorSet</type>
          <declname>set</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>layoutIndex</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>binding</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkDescriptorBufferInfo &gt; &amp;</type>
          <declname>bufferInfos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="137" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="910" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a00ac2b930eda3de20c6e69b9cb92cc59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::UpdateDescriptorSets</definition>
        <argsstring>(VkDevice device, const Containers::Vector&lt; VkWriteDescriptorSet &gt; &amp;descriptorWrites)</argsstring>
        <name>UpdateDescriptorSets</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkWriteDescriptorSet &gt; &amp;</type>
          <declname>descriptorWrites</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="143" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="931" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a362fad8b57bf2947e052ba6f24c2ac62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkCommandBuffer</type>
        <definition>VkCommandBuffer Azura::Vulkan::VkCore::CreateCommandBuffer</definition>
        <argsstring>(VkDevice device, VkCommandPool commandPool, VkCommandBufferLevel level, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateCommandBuffer</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>VkCommandBufferLevel</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="145" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="935" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a1835941d1d5059823faca908854c9cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkCommandBuffer &gt;</type>
        <definition>Containers::Vector&lt; VkCommandBuffer &gt; Azura::Vulkan::VkCore::CreateCommandBuffers</definition>
        <argsstring>(VkDevice device, U32 count, VkCommandPool commandPool, VkCommandBufferLevel level, Memory::Allocator &amp;allocator, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateCommandBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>VkCommandBufferLevel</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="150" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="953" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ae702b390f0ebf0c96c65de4b5f6892eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateCommandBuffers</definition>
        <argsstring>(VkDevice device, VkCommandPool commandPool, VkCommandBufferLevel level, Containers::Vector&lt; VkCommandBuffer &gt; &amp;commandBuffers, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateCommandBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandPool</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>VkCommandBufferLevel</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkCommandBuffer &gt; &amp;</type>
          <declname>commandBuffers</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="158" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="965" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a43934b670304c2f9bfe2215a5cdda369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::BeginCommandBuffer</definition>
        <argsstring>(VkCommandBuffer buffer, VkCommandBufferUsageFlags flags, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>BeginCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkCommandBufferUsageFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="164" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="980" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a192d33867980c7aa515d8dbf460749d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::BeginCommandBuffer</definition>
        <argsstring>(VkCommandBuffer buffer, VkCommandBufferUsageFlags flags, const VkCommandBufferInheritanceInfo &amp;inheritanceInfo, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>BeginCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkCommandBufferUsageFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const VkCommandBufferInheritanceInfo &amp;</type>
          <declname>inheritanceInfo</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="165" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="992" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1ad2d49996f433a20b5c648f337927a503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::EndCommandBuffer</definition>
        <argsstring>(VkCommandBuffer buffer, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>EndCommandBuffer</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="170" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1005" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1afd600df4cb906841d6d07e2cd3b7f8e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkSemaphore</type>
        <definition>VkSemaphore Azura::Vulkan::VkCore::CreateSemaphore</definition>
        <argsstring>(VkDevice device, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateSemaphore</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="172" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1009" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a7a434d3d6d29e4b850bad8709d7d0462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateSemaphores</definition>
        <argsstring>(VkDevice device, U32 count, Containers::Vector&lt; VkSemaphore &gt; &amp;semaphores, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkSemaphore &gt; &amp;</type>
          <declname>semaphores</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="174" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1018" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a6aade5642f9987fbe999a8d14718d4c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkSemaphore &gt;</type>
        <definition>Containers::Vector&lt; VkSemaphore &gt; Azura::Vulkan::VkCore::CreateSemaphores</definition>
        <argsstring>(VkDevice device, U32 count, Memory::Allocator &amp;allocator, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="179" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1031" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1abd77ad56c4a78b01c4cb5938d7b881b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkFence</type>
        <definition>VkFence Azura::Vulkan::VkCore::CreateFence</definition>
        <argsstring>(VkDevice device, VkFenceCreateFlags flags, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateFence</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkFenceCreateFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="184" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1040" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a8568286acb69a8c7280f89556f37f734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CreateFences</definition>
        <argsstring>(VkDevice device, U32 count, VkFenceCreateFlags flags, Containers::Vector&lt; VkFence &gt; &amp;fences, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkFenceCreateFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkFence &gt; &amp;</type>
          <declname>fences</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="186" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1050" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1aa219c63788f055a98d342e5743dbf726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkFence &gt;</type>
        <definition>Containers::Vector&lt; VkFence &gt; Azura::Vulkan::VkCore::CreateFences</definition>
        <argsstring>(VkDevice device, U32 count, VkFenceCreateFlags flags, Memory::Allocator &amp;allocator, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>CreateFences</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkFenceCreateFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="192" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1065" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a3d91f69c6e2a22d2357cdd5a2c564419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::CopyBuffer</definition>
        <argsstring>(VkDevice device, VkQueue queue, const VkScopedBuffer &amp;srcBuffer, const VkScopedBuffer &amp;dstBuffer, const VkDeviceSize size, const VkCommandPool commandPool)</argsstring>
        <name>CopyBuffer</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkQueue</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_vulkan_1_1_vk_scoped_buffer" kindref="compound">VkScopedBuffer</ref> &amp;</type>
          <declname>srcBuffer</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_vulkan_1_1_vk_scoped_buffer" kindref="compound">VkScopedBuffer</ref> &amp;</type>
          <declname>dstBuffer</declname>
        </param>
        <param>
          <type>const VkDeviceSize</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const VkCommandPool</type>
          <declname>commandPool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="198" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1075" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a348c182d60ba20138aaecf301ab04a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::TransitionImageLayout</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage image, VkAccessFlags srcAccessMask, VkAccessFlags dstAccessMask, VkImageLayout oldImageLayout, VkImageLayout newImageLayout, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkImageSubresourceRange imageSubresourceRange)</argsstring>
        <name>TransitionImageLayout</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>srcAccessMask</declname>
        </param>
        <param>
          <type>VkAccessFlags</type>
          <declname>dstAccessMask</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>oldImageLayout</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>newImageLayout</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>srcStageMask</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>dstStageMask</declname>
        </param>
        <param>
          <type>VkImageSubresourceRange</type>
          <declname>imageSubresourceRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="205" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1113" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a2981c19c708453994b7c5a36c272fa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::ImageBlit</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage srcImage, VkImage dstImage, VkImageAspectFlagBits srcAspect, VkImageAspectFlagBits dstAspect, const Bounds3D &amp;blitRegion, const LayerSubresource &amp;srcLayerResource, const LayerSubresource &amp;dstLayerResource, U32 srcMipLevel, U32 dstMipLevel, VkFilter blitFilter)</argsstring>
        <name>ImageBlit</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dstImage</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>srcAspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>dstAspect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds3_d" kindref="compound">Bounds3D</ref> &amp;</type>
          <declname>blitRegion</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_layer_subresource" kindref="compound">LayerSubresource</ref> &amp;</type>
          <declname>srcLayerResource</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_layer_subresource" kindref="compound">LayerSubresource</ref> &amp;</type>
          <declname>dstLayerResource</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>srcMipLevel</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>dstMipLevel</declname>
        </param>
        <param>
          <type>VkFilter</type>
          <declname>blitFilter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="215" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1147" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a98068b2973992fa9e6ff41837afac8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::ImageBlit</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage srcImage, VkImage dstImage, VkImageAspectFlagBits srcAspect, VkImageAspectFlagBits dstAspect, const Bounds3D &amp;blitRegion)</argsstring>
        <name>ImageBlit</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dstImage</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>srcAspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>dstAspect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds3_d" kindref="compound">Bounds3D</ref> &amp;</type>
          <declname>blitRegion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="227" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1186" bodyend="1195"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1af8d79f1edf4dd72141174565fb8dba0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::ImageCopy</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage srcImage, VkImage dstImage, const Containers::Vector&lt; VkImageCopy &gt; &amp;copyRegions)</argsstring>
        <name>ImageCopy</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dstImage</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Containers::Vector</ref>&lt; VkImageCopy &gt; &amp;</type>
          <declname>copyRegions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="234" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1197" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a3616ecdb9af5ba541c16a4a918d6ae53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkImageCopy</type>
        <definition>VkImageCopy Azura::Vulkan::VkCore::GetImageCopyRegion</definition>
        <argsstring>(VkImageAspectFlagBits srcAspect, VkImageAspectFlagBits dstAspect, const Bounds3D &amp;copyRegion, const TextureSubresource &amp;srcSubresource, const TextureSubresource &amp;dstSubresource)</argsstring>
        <name>GetImageCopyRegion</name>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>srcAspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>dstAspect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds3_d" kindref="compound">Bounds3D</ref> &amp;</type>
          <declname>copyRegion</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_texture_subresource" kindref="compound">TextureSubresource</ref> &amp;</type>
          <declname>srcSubresource</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_texture_subresource" kindref="compound">TextureSubresource</ref> &amp;</type>
          <declname>dstSubresource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="239" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1211" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a75e685ba5e425453cc70dbfe5f822505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::ImageCopy</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage srcImage, VkImage dstImage, VkImageAspectFlagBits srcAspect, VkImageAspectFlagBits dstAspect, const Bounds3D &amp;copyRegion, const TextureSubresource &amp;srcSubresource, const TextureSubresource &amp;dstSubresource)</argsstring>
        <name>ImageCopy</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dstImage</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>srcAspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>dstAspect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds3_d" kindref="compound">Bounds3D</ref> &amp;</type>
          <declname>copyRegion</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_texture_subresource" kindref="compound">TextureSubresource</ref> &amp;</type>
          <declname>srcSubresource</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_texture_subresource" kindref="compound">TextureSubresource</ref> &amp;</type>
          <declname>dstSubresource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="245" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1235" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a210eb248305cd38a325236e89a26d885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::ImageCopy</definition>
        <argsstring>(VkCommandBuffer cmdBuffer, VkImage srcImage, VkImage dstImage, VkImageAspectFlagBits srcAspect, VkImageAspectFlagBits dstAspect, const Bounds3D &amp;copyRegion)</argsstring>
        <name>ImageCopy</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>srcImage</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>dstImage</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>srcAspect</declname>
        </param>
        <param>
          <type>VkImageAspectFlagBits</type>
          <declname>dstAspect</declname>
        </param>
        <param>
          <type>const <ref refid="struct_azura_1_1_bounds3_d" kindref="compound">Bounds3D</ref> &amp;</type>
          <declname>copyRegion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="254" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1252" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a4b7d1ce8b5378beb92ebff6d453cc20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Vulkan::VkCore::FlushCommandBuffer</definition>
        <argsstring>(VkDevice device, VkCommandBuffer cmdBuffer, VkQueue queue, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>FlushCommandBuffer</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>VkCommandBuffer</type>
          <declname>cmdBuffer</declname>
        </param>
        <param>
          <type>VkQueue</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="261" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1267" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1a165562f89beaa498c1db8b188bf82cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Azura::Vulkan::VkCore::QueryFormatFeatureSupport</definition>
        <argsstring>(VkPhysicalDevice physicalDevice, VkFormat format, std::function&lt; bool(const VkFormatProperties &amp;)&gt; queryFunction)</argsstring>
        <name>QueryFormatFeatureSupport</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physicalDevice</declname>
        </param>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::function&lt; bool(const VkFormatProperties &amp;)&gt;</type>
          <declname>queryFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="263" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1292" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="_vk_core_8h_1acd5ec39956e6e589cbf2bf39397ff512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkFormat</type>
        <definition>VkFormat Azura::Vulkan::VkCore::GetVkFormat</definition>
        <argsstring>(RawStorageFormat rawFormat, const Log &amp;log_VulkanRenderSystem)</argsstring>
        <name>GetVkFormat</name>
        <param>
          <type>RawStorageFormat</type>
          <declname>rawFormat</declname>
        </param>
        <param>
          <type>const <ref refid="class_azura_1_1_log" kindref="compound">Log</ref> &amp;</type>
          <declname>log_VulkanRenderSystem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="266" column="1" bodyfile="Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp" bodystart="1301" bodyend="1305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h" line="20" column="1"/>
  </compounddef>
</doxygen>
