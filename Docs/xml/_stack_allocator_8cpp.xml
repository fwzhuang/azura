<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_stack_allocator_8cpp" kind="file" language="C++">
    <compoundname>StackAllocator.cpp</compoundname>
    <includes refid="_stack_allocator_8h" local="yes">Memory/StackAllocator.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="4334">
        <label>stdlib.h</label>
      </node>
      <node id="4331">
        <label>Source/Common/Src/Memory/StackAllocator.cpp</label>
        <link refid="_stack_allocator_8cpp"/>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
      </node>
      <node id="4332">
        <label>Memory/StackAllocator.h</label>
        <link refid="_stack_allocator_8h_source"/>
        <childnode refid="4333" relation="include">
        </childnode>
      </node>
      <node id="4333">
        <label>Types.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_a_z">AZ</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Memory/StackAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_a_z" kindref="compound">AZ</ref><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal">StackAllocator::StackAllocator(U32<sp/>stackSizeInBytes)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>mCurrentMarker<sp/>=<sp/>(Marker)malloc(stackSizeInBytes);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>mBaseMarker<sp/><sp/><sp/><sp/>=<sp/>mCurrentMarker;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>mSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stackSizeInBytes;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">StackAllocator::~StackAllocator()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>free((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)mBaseMarker);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>StackAllocator::Allocate(U32<sp/>bytesToAllocate)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>Marker<sp/>addrStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesToAllocate<sp/>&lt;=<sp/>mSize)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>availableBytes<sp/>=<sp/>mSize<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">U32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mCurrentMarker<sp/>-<sp/>mBaseMarker);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytesToAllocate<sp/>&lt;=<sp/>availableBytes)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addrStart<sp/>=<sp/>mCurrentMarker;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCurrentMarker<sp/>+=<sp/>bytesToAllocate;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addrStart);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackAllocator::FreeToMarker(Marker<sp/>marker)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>mCurrentMarker<sp/>=<sp/>marker;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">StackAllocator::Marker<sp/>StackAllocator::GetMarker()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mCurrentMarker;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackAllocator::Clear()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>mCurrentMarker<sp/>=<sp/>mBaseMarker;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>AZ</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Src/Memory/StackAllocator.cpp"/>
  </compounddef>
</doxygen>
