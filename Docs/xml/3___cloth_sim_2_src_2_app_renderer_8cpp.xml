<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="3___cloth_sim_2_src_2_app_renderer_8cpp" kind="file" language="C++">
    <compoundname>AppRenderer.cpp</compoundname>
    <includes refid="3___cloth_sim_2_inc_2_cloth_sim_2_app_renderer_8h" local="yes">ClothSim/AppRenderer.h</includes>
    <includes refid="_raw_storage_format_8h" local="yes">Core/RawStorageFormat.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <includes refid="_icosphere_8h" local="yes">Math/Icosphere.h</includes>
    <includes refid="_plane_8h" local="yes">Math/Plane.h</includes>
    <incdepgraph>
      <node id="6243">
        <label>Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6232" relation="include">
        </childnode>
      </node>
      <node id="6238">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6239" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6215">
        <label>functional</label>
      </node>
      <node id="6260">
        <label>GLTFSDK/Document.h</label>
      </node>
      <node id="6216">
        <label>iterator</label>
      </node>
      <node id="6227">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6259">
        <label>AssetManager/GLTFLoader.h</label>
        <link refid="_g_l_t_f_loader_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6260" relation="include">
        </childnode>
        <childnode refid="6261" relation="include">
        </childnode>
      </node>
      <node id="6264">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6265" relation="include">
        </childnode>
        <childnode refid="6236" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6208">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6209" relation="include">
        </childnode>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6220" relation="include">
        </childnode>
        <childnode refid="6221" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
        <childnode refid="6230" relation="include">
        </childnode>
      </node>
      <node id="6222">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6210" relation="include">
        </childnode>
        <childnode refid="6223" relation="include">
        </childnode>
        <childnode refid="6224" relation="include">
        </childnode>
        <childnode refid="6225" relation="include">
        </childnode>
        <childnode refid="6226" relation="include">
        </childnode>
      </node>
      <node id="6235">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="6218" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
      </node>
      <node id="6246">
        <label>boost/container_hash/hash.hpp</label>
      </node>
      <node id="6248">
        <label>Physics/PBD/Common/SolvingView.h</label>
        <link refid="_solving_view_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6249" relation="include">
        </childnode>
      </node>
      <node id="6237">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6244">
        <label>Physics/Geometry/ClothPlane.h</label>
        <link refid="_cloth_plane_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
        <childnode refid="6245" relation="include">
        </childnode>
        <childnode refid="6247" relation="include">
        </childnode>
        <childnode refid="6252" relation="include">
        </childnode>
        <childnode refid="6253" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
        <childnode refid="6256" relation="include">
        </childnode>
      </node>
      <node id="6218">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6215" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6219" relation="include">
        </childnode>
      </node>
      <node id="6228">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6213">
        <label>cassert</label>
      </node>
      <node id="6225">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6221">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6209" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
        <childnode refid="6227" relation="include">
        </childnode>
        <childnode refid="6228" relation="include">
        </childnode>
        <childnode refid="6229" relation="include">
        </childnode>
        <childnode refid="6226" relation="include">
        </childnode>
      </node>
      <node id="6236">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6237" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6265">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6213" relation="include">
        </childnode>
        <childnode refid="6237" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6219" relation="include">
        </childnode>
      </node>
      <node id="6219">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6229">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6257">
        <label>Math/TransformComponent.h</label>
        <link refid="_transform_component_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6232" relation="include">
        </childnode>
      </node>
      <node id="6209">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6210" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6226">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6206">
        <label>ClothSim/AppRenderer.h</label>
        <link refid="3___cloth_sim_2_inc_2_cloth_sim_2_app_renderer_8h_source"/>
        <childnode refid="6207" relation="include">
        </childnode>
        <childnode refid="6208" relation="include">
        </childnode>
        <childnode refid="6231" relation="include">
        </childnode>
        <childnode refid="6235" relation="include">
        </childnode>
        <childnode refid="6236" relation="include">
        </childnode>
        <childnode refid="6233" relation="include">
        </childnode>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6240" relation="include">
        </childnode>
        <childnode refid="6242" relation="include">
        </childnode>
        <childnode refid="6244" relation="include">
        </childnode>
        <childnode refid="6257" relation="include">
        </childnode>
        <childnode refid="6258" relation="include">
        </childnode>
      </node>
      <node id="6232">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6254">
        <label>Physics/Geometry/IPhysicsGeometry.h</label>
        <link refid="_i_physics_geometry_8h_source"/>
        <childnode refid="6255" relation="include">
        </childnode>
      </node>
      <node id="6210">
        <label>tuple</label>
      </node>
      <node id="6217">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6213" relation="include">
        </childnode>
        <childnode refid="6214" relation="include">
        </childnode>
        <childnode refid="6218" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6241">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6218" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6234">
        <label>vector</label>
      </node>
      <node id="6212">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6213" relation="include">
        </childnode>
        <childnode refid="6214" relation="include">
        </childnode>
        <childnode refid="6215" relation="include">
        </childnode>
        <childnode refid="6216" relation="include">
        </childnode>
        <childnode refid="6217" relation="include">
        </childnode>
        <childnode refid="6218" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6219" relation="include">
        </childnode>
      </node>
      <node id="6233">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
      </node>
      <node id="6251">
        <label>array</label>
      </node>
      <node id="6245">
        <label>Physics/Geometry/Edge.h</label>
        <link refid="_edge_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6246" relation="include">
        </childnode>
      </node>
      <node id="6255">
        <label>Math/Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
      </node>
      <node id="6253">
        <label>Physics/Geometry/IClothPhysicsGeometry.h</label>
        <link refid="_i_cloth_physics_geometry_8h_source"/>
        <childnode refid="6254" relation="include">
        </childnode>
      </node>
      <node id="6252">
        <label>Physics/Geometry/GenericTypes.h</label>
        <link refid="_physics_2_inc_2_physics_2_geometry_2_generic_types_8h_source"/>
      </node>
      <node id="6220">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6221" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
      </node>
      <node id="6247">
        <label>Physics/PBD/Cloth/ClothSolvingView.h</label>
        <link refid="_cloth_solving_view_8h_source"/>
        <childnode refid="6248" relation="include">
        </childnode>
        <childnode refid="6250" relation="include">
        </childnode>
      </node>
      <node id="6266">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
      </node>
      <node id="6223">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6256">
        <label>unordered_map</label>
      </node>
      <node id="6211">
        <label>Types.h</label>
      </node>
      <node id="6262">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6218" relation="include">
        </childnode>
        <childnode refid="6208" relation="include">
        </childnode>
        <childnode refid="6240" relation="include">
        </childnode>
      </node>
      <node id="6261">
        <label>GLTFSDK/GLTFResourceReader.h</label>
      </node>
      <node id="6239">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6205">
        <label>Source/Samples/3_ClothSim/Src/AppRenderer.cpp</label>
        <link refid="3___cloth_sim_2_src_2_app_renderer_8cpp"/>
        <childnode refid="6206" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
        <childnode refid="6262" relation="include">
        </childnode>
        <childnode refid="6263" relation="include">
        </childnode>
        <childnode refid="6264" relation="include">
        </childnode>
        <childnode refid="6241" relation="include">
        </childnode>
        <childnode refid="6266" relation="include">
        </childnode>
        <childnode refid="6267" relation="include">
        </childnode>
        <childnode refid="6268" relation="include">
        </childnode>
      </node>
      <node id="6231">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6215" relation="include">
        </childnode>
        <childnode refid="6221" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6208" relation="include">
        </childnode>
        <childnode refid="6232" relation="include">
        </childnode>
        <childnode refid="6233" relation="include">
        </childnode>
      </node>
      <node id="6267">
        <label>Math/Icosphere.h</label>
        <link refid="_icosphere_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6255" relation="include">
        </childnode>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
      </node>
      <node id="6242">
        <label>Camera/PolarCamera.h</label>
        <link refid="_polar_camera_8h_source"/>
        <childnode refid="6243" relation="include">
        </childnode>
      </node>
      <node id="6249">
        <label>type_traits</label>
      </node>
      <node id="6268">
        <label>Math/Plane.h</label>
        <link refid="_plane_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6255" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
      </node>
      <node id="6230">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6221" relation="include">
        </childnode>
        <childnode refid="6211" relation="include">
        </childnode>
      </node>
      <node id="6240">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6236" relation="include">
        </childnode>
        <childnode refid="6241" relation="include">
        </childnode>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6221" relation="include">
        </childnode>
        <childnode refid="6233" relation="include">
        </childnode>
      </node>
      <node id="6214">
        <label>cstring</label>
      </node>
      <node id="6250">
        <label>Physics/PBD/Cloth/Constraints.h</label>
        <link refid="_constraints_8h_source"/>
        <childnode refid="6211" relation="include">
        </childnode>
        <childnode refid="6212" relation="include">
        </childnode>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6251" relation="include">
        </childnode>
      </node>
      <node id="6207">
        <label>memory</label>
      </node>
      <node id="6263">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="6221" relation="include">
        </childnode>
      </node>
      <node id="6224">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="6258">
        <label>Physics/Geometry/ClothMesh.h</label>
        <link refid="_physics_2_inc_2_physics_2_geometry_2_cloth_mesh_8h_source"/>
        <childnode refid="6238" relation="include">
        </childnode>
        <childnode refid="6222" relation="include">
        </childnode>
        <childnode refid="6245" relation="include">
        </childnode>
        <childnode refid="6247" relation="include">
        </childnode>
        <childnode refid="6253" relation="include">
        </childnode>
        <childnode refid="6234" relation="include">
        </childnode>
        <childnode refid="6256" relation="include">
        </childnode>
        <childnode refid="6259" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="3___cloth_sim_2_src_2_app_renderer_8cpp_1ab0e812335faf45458fb0aeaa849b3556" prot="public" static="no" mutable="no">
        <type>Vector4f</type>
        <definition>Vector4f m_lightPos</definition>
        <argsstring></argsstring>
        <name>m_lightPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Samples/3_ClothSim/Src/AppRenderer.cpp" line="18" column="1" bodyfile="Source/Samples/3_ClothSim/Src/AppRenderer.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ClothSim/AppRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Core/RawStorageFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Icosphere.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Plane.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Containers;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Math;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Physics;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Physics::PBD;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LightData<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>Vector4f<sp/>m_lightPos;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">constexpr<sp/>U32<sp/>DEFAULT_BLOCK_SIZE_X<sp/>=<sp/>512;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">constexpr<sp/>U32<sp/>SOLVER_ITERATIONS<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>DISTANCE_STIFFNESS<sp/>=<sp/>0.8f;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BENDING_STIFFNESS<sp/>=<sp/>0.7f;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>LONG_RANGE_STIFFNESS<sp/>=<sp/>0.3f;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>TEST_SPHERE_CENTER<sp/>=<sp/>Vector3f(0,<sp/>-5,<sp/>0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>TEST_PLANE_CENTER<sp/>=<sp/>Vector3f(0,<sp/>-8.01f,<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TEST_SPHERE_RADIUS<sp/>=<sp/>2.9f;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CLOTH_SPAN_X<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CLOTH_SPAN_Y<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>CLOTH_WORLD_HEIGHT<sp/>=<sp/>5.0f;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">constexpr<sp/>U32<sp/>CLOTH_DIV_X<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">constexpr<sp/>U32<sp/>CLOTH_DIV_Y<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">constexpr<sp/>U32<sp/>TEXTURE_MEMORY<sp/>=<sp/>0x4000000;<sp/></highlight><highlight class="comment">//<sp/>64<sp/>MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">constexpr<sp/>U32<sp/>ANCHOR_IDX_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">constexpr<sp/>U32<sp/>ANCHOR_IDX_2<sp/>=<sp/>(CLOTH_DIV_Y<sp/>*<sp/>(CLOTH_DIV_X<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="40"><highlight class="normal">constexpr<sp/>U32<sp/>ANCHOR_IDX_3<sp/>=<sp/>CLOTH_DIV_Y;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">constexpr<sp/>U32<sp/>ANCHOR_IDX_4<sp/>=<sp/>ANCHOR_IDX_2<sp/>+<sp/>CLOTH_DIV_Y;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">constexpr<sp/>U32<sp/>CLOTH_UV_SCALE_X<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">constexpr<sp/>U32<sp/>CLOTH_UV_SCALE_Y<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_GRID_RESOLUTION_X<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_GRID_RESOLUTION_Y<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_GRID_RESOLUTION_Z<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_VERTICES_PER_BIN<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_SELF_POINT_TRIANGLE_COLLISIONS<sp/>=<sp/>2048;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">constexpr<sp/>U32<sp/>MAX_ANCHOR_POINTS<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">constexpr<sp/>U32<sp/>CURTAIN_ANCHORS<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>BASE_CURTAIN_STEP_SIZE<sp/>=<sp/>5.0f;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RENDER_FLOOR_PLANE<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RENDER_SPHERE<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>USE_MESH<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>USE_CURTAIN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SHEHZAN<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SCENE_ANGULAR_VELOCITY<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>ANGULAR_VELOCITY<sp/>=<sp/>Vector3f(0,<sp/>4.5f<sp/>*<sp/>Math::PI,<sp/>0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>CLOTH_ORIGIN<sp/>=<sp/>Vector3f(0,<sp/>CLOTH_WORLD_HEIGHT,<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SCENE_TWIST<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">AppRenderer::AppRenderer()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>:<sp/>log_AppRenderer(Log(</highlight><highlight class="stringliteral">&quot;AppRenderer&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainBuffer(0xC00</highlight><highlight class="stringliteral">&apos;0000),</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_mainAllocator(m_mainBuffer,<sp/>0x400&apos;</highlight><highlight class="normal">0000),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_localAllocator(m_mainBuffer,<sp/>0x400</highlight><highlight class="stringliteral">&apos;0000),</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_drawableAllocator(m_mainBuffer,<sp/>0x400&apos;</highlight><highlight class="normal">0000),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>m_camera(1280,<sp/>720),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>m_curtainTransforms(<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref>{CURTAIN_ANCHORS},<sp/>m_mainAllocator),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothPlane(ClothTriangulation::Regular,<sp/>Vector2f(-CLOTH_SPAN_X,<sp/>-CLOTH_SPAN_Y),<sp/>Vector2f(CLOTH_SPAN_X,<sp/>CLOTH_SPAN_Y),<sp/>CLOTH_WORLD_HEIGHT,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector2u(CLOTH_DIV_X,<sp/>CLOTH_DIV_Y),<sp/>Vector2u(CLOTH_UV_SCALE_X,<sp/>CLOTH_UV_SCALE_Y),<sp/>m_localAllocator),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothMesh(</highlight><highlight class="stringliteral">&quot;CustomCloth2&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Meshes,<sp/>m_localAllocator,<sp/>log_AppRenderer)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Init<sp/>of<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_MESH)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>p_activeMesh<sp/>=<sp/>&amp;m_clothMesh;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>p_activeMesh<sp/>=<sp/>&amp;m_clothPlane;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>m_clothTransform.SetForwardKey(KeyboardKey::Up);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>m_clothTransform.SetBackwardKey(KeyboardKey::Down);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>m_clothTransform.SetLeftKey(KeyboardKey::Left);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>m_clothTransform.SetRightKey(KeyboardKey::Right);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>m_clothTransform.SetStepSize(8.0f);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USE_CURTAIN)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>CURTAIN_ANCHORS;<sp/>idx++)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].SetForwardKey(KeyboardKey::Up);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].SetBackwardKey(KeyboardKey::Down);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].SetLeftKey(KeyboardKey::Left);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].SetRightKey(KeyboardKey::Right);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].SetStepSize((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(idx)<sp/>/<sp/>(CURTAIN_ANCHORS<sp/>-<sp/>1))<sp/>*<sp/>BASE_CURTAIN_STEP_SIZE);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>0x400</highlight><highlight class="stringliteral">&apos;0000);</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/>m_window<sp/>=<sp/>RenderSystem::CreateApplicationWindow(&quot;PBD<sp/>Cloth<sp/>Simulation&quot;,<sp/>1280,<sp/>720);</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;SetUpdateRate(UpdateRate::Rate120);</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;SetUpdateCallback([this](float<sp/>deltaTime)</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>WindowUpdate(deltaTime);</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;SetKeyEventCallback([this](KeyEvent<sp/>evt)</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_camera.OnKeyEvent(evt);</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_clothTransform.OnKeyEvent(evt);</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(evt.m_internalType<sp/>==<sp/>KeyEventType::KeyPress<sp/>&amp;&amp;<sp/>evt.m_key<sp/>==<sp/>KeyboardKey::U)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotateFactor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(evt.m_internalType<sp/>==<sp/>KeyEventType::KeyPress<sp/>&amp;&amp;<sp/>evt.m_key<sp/>==<sp/>KeyboardKey::I)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotateFactor<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(evt.m_internalType<sp/>==<sp/>KeyEventType::KeyRelease<sp/>&amp;&amp;<sp/>evt.m_key<sp/>==<sp/>KeyboardKey::U)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotateFactor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(evt.m_internalType<sp/>==<sp/>KeyEventType::KeyRelease<sp/>&amp;&amp;<sp/>evt.m_key<sp/>==<sp/>KeyboardKey::I)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_rotateFactor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(USE_CURTAIN)</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>CURTAIN_ANCHORS;<sp/>idx++)</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].OnKeyEvent(evt);</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;SetMouseEventCallback([this](MouseEvent<sp/>evt)</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>UNUSED(evt);</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>as<sp/>it<sp/>has<sp/>bugs</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>m_camera.OnMouseEvent(e);</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/>m_camera.SetZoom(35);</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/>m_camera.RotateAboutRight(10);</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/>m_camera.SetStepSize(30.0f);</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>m_window-&gt;Initialize(),<sp/>&quot;Cannot<sp/>Initialize<sp/>Window&quot;);</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/>appInfo.m_name<sp/>=<sp/>&quot;PBD<sp/>Cloth<sp/>Simulation&quot;;</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/>requirements.m_discreteGPU<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/>requirements.m_float64<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/>requirements.m_int64<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/>m_camera.Recompute();</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/>m_clothUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_model<sp/>=<sp/>m_clothTransform.GetTransform();</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_modelInvTranspose<sp/>=<sp/>m_clothUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_model<sp/>=<sp/>Matrix4f::FromTranslationVector(TEST_SPHERE_CENTER)<sp/>*<sp/>Matrix4f::FromScaleVector(Vector3f(TEST_SPHERE_RADIUS,<sp/>TEST_SPHERE_RADIUS,<sp/>TEST_SPHERE_RADIUS));</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_modelInvTranspose<sp/>=<sp/>m_sphereUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/>m_planeUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_model<sp/>=<sp/>Matrix4f::FromTranslationVector(TEST_PLANE_CENTER);</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_modelInvTranspose<sp/>=<sp/>m_planeUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_model<sp/>=<sp/>Matrix4f::FromTranslationVector(Vector3f(0,<sp/>3,<sp/>-8))<sp/>*<sp/>Matrix4f::FromRotationMatrix(Matrix4f::RotationX(-Math::PI_OVER2));</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_modelInvTranspose<sp/>=<sp/>m_planeUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/>LightData<sp/>lightData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/>lightData.m_lightPos<sp/>=<sp/>Vector4f(0.0f,<sp/>15.0f,<sp/>20.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/>//<sp/>TODO(vasumahesh1):[Q]:Allocator?</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/>const<sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_maxCount<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_poolSize<sp/>=<sp/>TEXTURE_MEMORY;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(10,<sp/>6,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SAMPLER_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::Sampler,<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>TEXTURE_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>NORMALS_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>ROUGHNESS_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>AO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0<sp/>Compute</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_computeUBOSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Compute</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0<sp/>Normal<sp/>Compute</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/>m_normalsPass.m_uboSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Compute</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>LIGHT_SLOT<sp/>});</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SAMPLER_SLOT<sp/>});</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>TEXTURE_SLOT,<sp/>NORMALS_SLOT,<sp/>ROUGHNESS_SLOT,<sp/>AO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>m_computePass.m_computeUBOSlot<sp/>});</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_NORMALS_UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>m_normalsPass.m_uboSlot<sp/>});</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(15,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>MAIN_COMPUTE_SHADER_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/>//<sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/>//<sp/>});</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_1_PBD<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_ComputeProjectedPositions.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_SELF_COLLSIONS<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_GenerateSelfCollisions.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_2_BINNING_INIT<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_BinningInit.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_2_BINNING<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_Binning.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_2_PBD<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_ApplyConstraints.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_3_PBD<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_ApplyDelta.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_4_PBD<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;SolvingPass_Cloth_ComputePositions.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ShadingPass_Cloth.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ShadingPass_Cloth.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SPHERE_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ShadingPass_Sphere.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SPHERE_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ShadingPass_Sphere.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>PLANE_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ShadingPass_Plane.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>PLANE_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ShadingPass_Plane.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SHEHZAN_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ShadingPass_Shehzan.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/>//<sp/>NOLINTNEXTLINE</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SHEHZAN_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ShadingPass_Shehzan.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_NORMALS_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;NormalsPass_Normalize.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/>std::vector&lt;int&gt;<sp/>vertexModelMatrixIdBuffer<sp/>=<sp/>std::vector&lt;int&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>-1);</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/>if<sp/>(USE_MESH)</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>aliases<sp/>=<sp/>static_cast&lt;ClothMesh*&gt;(p_activeMesh)-&gt;GetVertexAliases();<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>4095;<sp/>idx<sp/>&lt;<sp/>4159u;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(idx);</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>correctId<sp/>=<sp/>aliases[idx]<sp/>!=<sp/>-1<sp/>?<sp/>aliases[idx]<sp/>:<sp/>idx;</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[correctId]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>p_activeMesh-&gt;SetAnchorOnIndex(263);</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/>else</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(USE_CURTAIN)</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>stepSize<sp/>=<sp/>U32((CLOTH_DIV_X<sp/>+<sp/>1)<sp/>/<sp/>(CURTAIN_ANCHORS<sp/>-<sp/>1))<sp/>*<sp/>(CLOTH_DIV_Y<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>CURTAIN_ANCHORS;<sp/>idx++)</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>anchorIdx<sp/>=<sp/>idx<sp/>*<sp/>stepSize;</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(anchorIdx);</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[anchorIdx]<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!SCENE_ANGULAR_VELOCITY<sp/>&amp;&amp;<sp/>!SCENE_TWIST)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_1);</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_2);</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(SCENE_TWIST)</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_1);</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_2);</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_3);</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_activeMesh-&gt;SetAnchorOnIndex(ANCHOR_IDX_4);</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexModelMatrixIdBuffer[ANCHOR_IDX_4]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>solvingView<sp/>=<sp/>p_activeMesh-&gt;GetPBDSolvingView(m_localAllocator);</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto&amp;<sp/>clothDistanceConstraints<sp/>=<sp/>solvingView.GetDistanceConstraints();</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto&amp;<sp/>clothLongRangeConstraints<sp/>=<sp/>solvingView.GetLongRangeConstraints();</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto&amp;<sp/>clothBendingConstraints<sp/>=<sp/>solvingView.GetBendingConstraints();</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto&amp;<sp/>clothDataSet<sp/>=<sp/>solvingView.GetDataSet();</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/>m_normalUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/>m_normalUBO.m_numTriangles<sp/>=<sp/>p_activeMesh-&gt;GetIndexCount()<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/>m_normalUBO.m_numVertices<sp/>=<sp/>p_activeMesh-&gt;GetVertexCount();</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(0,<sp/>15<sp/>+<sp/>(SOLVER_ITERATIONS<sp/>*<sp/>2),<sp/>30,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/>renderPassRequirements.m_maxPools<sp/>=<sp/>15<sp/>+<sp/>(SOLVER_ITERATIONS<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(Vector3f))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(Vector3f))</highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_PROJECTION_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(Vector3f))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(Vector3f))</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_VELOCITY<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(Vector3f))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(Vector3f))</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_INV_MASS<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(float))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(float))</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_DELTAX<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_DELTAY<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_DELTAZ<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>DISTANCE_CONSTRAINTS_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(DistanceConstraint))<sp/>*<sp/>U32(clothDistanceConstraints.GetSize()),<sp/>U32(sizeof(DistanceConstraint))</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LONG_RANGE_CONSTRAINTS_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(LongRangeConstraint))<sp/>*<sp/>U32(clothLongRangeConstraints.GetSize()),<sp/>U32(sizeof(LongRangeConstraint))</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>BEND_CONSTRAINTS_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(BendingConstraint))<sp/>*<sp/>U32(clothBendingConstraints.GetSize()),<sp/>U32(sizeof(BendingConstraint))</highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_INDEX_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetIndexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_TANX<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_TANY<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_TANZ<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_ALIAS_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(int))<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount()),<sp/>U32(sizeof(int))</highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_CLOTH_PROPERTIES<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(ClothComputeProperties)),<sp/>U32(sizeof(ClothComputeProperties))</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_GRID_COUNT<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32)<sp/>*<sp/>MAX_GRID_RESOLUTION_X<sp/>*<sp/>MAX_GRID_RESOLUTION_Y<sp/>*<sp/>MAX_GRID_RESOLUTION_Z),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_GRID_VERTICES<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(U32)<sp/>*<sp/>MAX_VERTICES_PER_BIN<sp/>*<sp/>MAX_GRID_RESOLUTION_X<sp/>*<sp/>MAX_GRID_RESOLUTION_Y<sp/>*<sp/>MAX_GRID_RESOLUTION_Z),<sp/>U32(sizeof(U32))</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(SelfCollisionConstraint)<sp/>*<sp/>MAX_SELF_POINT_TRIANGLE_COLLISIONS),<sp/>U32(sizeof(SelfCollisionConstraint))</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_VERTEX_MODEL_MATRICES<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>U32(sizeof(int)<sp/>*<sp/>U32(p_activeMesh-&gt;GetVertexCount())),<sp/>U32(sizeof(int))</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_pass1<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_passInitialize<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="495"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="496"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="499"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="502"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_passBinning<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="507"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="508"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="517"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_passSelfCollisions<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_passItr1.reserve(SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_passItr2.reserve(SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"><sp/><sp/>m_iterativePools.reserve(SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>SOLVER_ITERATIONS;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_computePass.m_passItr1.push_back(renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_computePass.m_passItr2.push_back(renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/>m_computePass.m_pass4<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{DISTANCE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{BEND_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_INV_MASS,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_MODEL_MATRICES,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_CLOTH_PROPERTIES,<sp/>COMPUTE_GRID_COUNT,<sp/>COMPUTE_GRID_VERTICES,<sp/>COMPUTE_POINT_TRI_SELF_COLLISIONS_CONSTRAINT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>COMPUTE_PROJECTION_BUFFER,<sp/>COMPUTE_VERTEX_VELOCITY,<sp/>COMPUTE_VERTEX_CONSTRAINT_COUNT,</highlight></codeline>
<codeline lineno="589"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ,<sp/>COMPUTE_VERTEX_TANX,<sp/>COMPUTE_VERTEX_TANY,<sp/>COMPUTE_VERTEX_TANZ</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="594"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="595"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="596"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="597"><highlight class="stringliteral"><sp/><sp/>m_normalsPass.m_passId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="598"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{COMPUTE_NORMALS_SHADER_ID},</highlight></codeline>
<codeline lineno="599"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="600"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{</highlight></codeline>
<codeline lineno="601"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{COMPUTE_INDEX_BUFFER,<sp/>ShaderStage::Compute},<sp/>{COMPUTE_VERTEX_BUFFER,<sp/>ShaderStage::Compute}</highlight></codeline>
<codeline lineno="602"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="603"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="604"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{</highlight></codeline>
<codeline lineno="605"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>COMPUTE_VERTEX_DELTAX,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>COMPUTE_VERTEX_DELTAZ,<sp/>COMPUTE_VERTEX_TANX,<sp/>COMPUTE_VERTEX_TANY,<sp/>COMPUTE_VERTEX_TANZ</highlight></codeline>
<codeline lineno="606"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="607"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_NORMALS_UBO_SET},</highlight></codeline>
<codeline lineno="608"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>RENDER_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/>//<sp/>SHADERS</highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>INPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>INPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>OUTPUT<sp/>TARGETS</highlight></codeline>
<codeline lineno="619"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>LIGHT_SET,<sp/>SAMPLER_SET,<sp/>TEXTURE_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DESCRIPTORS</highlight></codeline>
<codeline lineno="620"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.1f,<sp/>0.1f,<sp/>0.1f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="621"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="622"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="623"><highlight class="stringliteral"><sp/><sp/>std::vector&lt;Vector3f&gt;<sp/>zeroBufferData<sp/>=<sp/>std::vector&lt;Vector3f&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>Vector3f(0.0f));</highlight></codeline>
<codeline lineno="624"><highlight class="stringliteral"><sp/><sp/>std::vector&lt;Vector3i&gt;<sp/>zeroIntVecData<sp/>=<sp/>std::vector&lt;Vector3i&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>Vector3i(0));</highlight></codeline>
<codeline lineno="625"><highlight class="stringliteral"><sp/><sp/>std::vector&lt;U32&gt;<sp/>zeroIntBuffer<sp/>=<sp/>std::vector&lt;U32&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>0);</highlight></codeline>
<codeline lineno="626"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="627"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>totalConstraints<sp/>=<sp/>U32(clothDistanceConstraints.GetSize()<sp/>+<sp/>clothBendingConstraints.GetSize()<sp/>+<sp/>clothLongRangeConstraints.GetSize());</highlight></codeline>
<codeline lineno="628"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="629"><highlight class="stringliteral"><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="630"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_window-&gt;GetSwapChainRequirements(),<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="631"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,</highlight></codeline>
<codeline lineno="632"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_drawableAllocator,</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*m_window);</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="635"><highlight class="stringliteral"><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="636"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="637"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>albedoTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Fabric10_col.jpg&quot;);</highlight></codeline>
<codeline lineno="638"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>albedoTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/CustomCloth2/ClothCustom2_col.jpg&quot;);</highlight></codeline>
<codeline lineno="639"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>albedoTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/Plane/Color<sp/>plane<sp/>map.png&quot;);</highlight></codeline>
<codeline lineno="640"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>albedoDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(albedoTexture);</highlight></codeline>
<codeline lineno="641"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>albedoDesc<sp/>!=<sp/>nullptr,<sp/>&quot;albedoDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="642"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="643"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>normalTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Fabric10_nrm.jpg&quot;);</highlight></codeline>
<codeline lineno="644"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>normalTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/CustomCloth2/ClothCustom2_nrm.jpg&quot;);</highlight></codeline>
<codeline lineno="645"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>normalDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(normalTexture);</highlight></codeline>
<codeline lineno="646"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>normalDesc<sp/>!=<sp/>nullptr,<sp/>&quot;normalDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="647"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="648"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>roughnessTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Fabric10_rgh.jpg&quot;);</highlight></codeline>
<codeline lineno="649"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>roughnessTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/CustomCloth2/ClothCustom2_rgh.jpg&quot;);</highlight></codeline>
<codeline lineno="650"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>roughnessDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(roughnessTexture);</highlight></codeline>
<codeline lineno="651"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>roughnessDesc<sp/>!=<sp/>nullptr,<sp/>&quot;roughnessDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="652"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="653"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>aoTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Fabric10_AO.jpg&quot;);</highlight></codeline>
<codeline lineno="654"><highlight class="stringliteral"><sp/><sp/>//<sp/>const<sp/>U32<sp/>aoTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/CustomCloth2/ClothCustom2_AO.jpg&quot;);</highlight></codeline>
<codeline lineno="655"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>aoDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(aoTexture);</highlight></codeline>
<codeline lineno="656"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>aoDesc<sp/>!=<sp/>nullptr,<sp/>&quot;aoDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="657"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>floorAlbedo<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Concrete10_col.jpg&quot;);</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>floorAlbedoDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(floorAlbedo);</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>floorAlbedoDesc<sp/>!=<sp/>nullptr,<sp/>&quot;floorAlbedoDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="662"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>floorNormal<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Concrete10_nrm.jpg&quot;);</highlight></codeline>
<codeline lineno="663"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>floorNormalDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(floorNormal);</highlight></codeline>
<codeline lineno="664"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>floorNormalDesc<sp/>!=<sp/>nullptr,<sp/>&quot;floorNormalDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="666"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>floorAO<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Concrete10_AO.jpg&quot;);</highlight></codeline>
<codeline lineno="667"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>floorAODesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(floorAO);</highlight></codeline>
<codeline lineno="668"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>floorAODesc<sp/>!=<sp/>nullptr,<sp/>&quot;floorAODesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="669"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="670"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>floorRoughness<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/Concrete10_rgh.jpg&quot;);</highlight></codeline>
<codeline lineno="671"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>floorRoughnessDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(floorRoughness);</highlight></codeline>
<codeline lineno="672"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>floorRoughnessDesc<sp/>!=<sp/>nullptr,<sp/>&quot;floorRoughnessDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="673"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="674"><highlight class="stringliteral"><sp/><sp/>U32<sp/>shehzanId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="675"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>shehzanDesc<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline lineno="676"><highlight class="stringliteral"><sp/><sp/>if<sp/>(SHEHZAN<sp/>&amp;&amp;<sp/>USE_CURTAIN)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>shehzanId<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Textures/shehzan.jpg&quot;);</highlight></codeline>
<codeline lineno="678"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>shehzanDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(shehzanId);</highlight></codeline>
<codeline lineno="679"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>shehzanDesc<sp/>!=<sp/>nullptr,<sp/>&quot;shehzanDesc<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="680"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="682"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>clothParticleMass<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(p_activeMesh-&gt;GetVertexInverseMass().Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="683"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_INV_MASS,<sp/>clothParticleMass);</highlight></codeline>
<codeline lineno="684"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="685"><highlight class="stringliteral"><sp/><sp/>if<sp/>(USE_MESH)</highlight></codeline>
<codeline lineno="686"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>vertexAliases<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(m_clothMesh.GetVertexAliases().Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="688"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>vertexAliases);</highlight></codeline>
<codeline lineno="689"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="stringliteral"><sp/><sp/>else</highlight></codeline>
<codeline lineno="691"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>noAliasBuffer<sp/>=<sp/>std::vector&lt;int&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>-1);</highlight></codeline>
<codeline lineno="693"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>vertexAliases<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(noAliasBuffer.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="694"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_ALIAS_BUFFER,<sp/>vertexAliases);</highlight></codeline>
<codeline lineno="695"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="697"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>clothDataStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(p_activeMesh-&gt;VertexData());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="698"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_BUFFER,<sp/>clothDataStart);</highlight></codeline>
<codeline lineno="699"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="700"><highlight class="stringliteral"><sp/><sp/>auto<sp/>clothProperties<sp/>=<sp/>ClothComputeProperties();</highlight></codeline>
<codeline lineno="701"><highlight class="stringliteral"><sp/><sp/>clothProperties.m_minBounding<sp/>=<sp/>Vector3i(10000,<sp/>10000,<sp/>10000);</highlight></codeline>
<codeline lineno="702"><highlight class="stringliteral"><sp/><sp/>clothProperties.m_maxBounding<sp/>=<sp/>Vector3i(-10000,<sp/>-10000,<sp/>-10000);</highlight></codeline>
<codeline lineno="703"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>clothStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;clothProperties);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="704"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_CLOTH_PROPERTIES,<sp/>clothStart);</highlight></codeline>
<codeline lineno="705"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="706"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>binCountVector<sp/>=<sp/>std::vector&lt;U32&gt;(MAX_GRID_RESOLUTION_X<sp/>*<sp/>MAX_GRID_RESOLUTION_Y<sp/>*<sp/>MAX_GRID_RESOLUTION_Z);</highlight></codeline>
<codeline lineno="707"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>binVerticesVector<sp/>=<sp/>std::vector&lt;U32&gt;(MAX_VERTICES_PER_BIN<sp/>*<sp/>MAX_GRID_RESOLUTION_X<sp/>*<sp/>MAX_GRID_RESOLUTION_Y<sp/>*<sp/>MAX_GRID_RESOLUTION_Z);</highlight></codeline>
<codeline lineno="708"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>binStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(binCountVector.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="709"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>binVerticesStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(binVerticesVector.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="710"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_GRID_COUNT,<sp/>binStart);</highlight></codeline>
<codeline lineno="711"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_GRID_VERTICES,<sp/>binVerticesStart);</highlight></codeline>
<codeline lineno="712"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="713"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>projectionStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(zeroBufferData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="714"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_PROJECTION_BUFFER,<sp/>projectionStart);</highlight></codeline>
<codeline lineno="715"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="716"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>distanceConstraintStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(clothDistanceConstraints.Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="717"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lrConstraintStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(clothLongRangeConstraints.Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="718"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>bendConstraintStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(clothBendingConstraints.Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="719"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(DISTANCE_CONSTRAINTS_BUFFER,<sp/>distanceConstraintStart);</highlight></codeline>
<codeline lineno="720"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(LONG_RANGE_CONSTRAINTS_BUFFER,<sp/>lrConstraintStart);</highlight></codeline>
<codeline lineno="721"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(BEND_CONSTRAINTS_BUFFER,<sp/>bendConstraintStart);</highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/>if<sp/>(!SCENE_ANGULAR_VELOCITY)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>velocityStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(zeroBufferData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_VELOCITY,<sp/>velocityStart);</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"><sp/><sp/>else</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::vector&lt;Vector3f&gt;<sp/>radialVelocityBuffer<sp/>=<sp/>std::vector&lt;Vector3f&gt;(p_activeMesh-&gt;GetVertexCount(),<sp/>Vector3f(0.0f));</highlight></codeline>
<codeline lineno="730"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="731"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>p_activeMesh-&gt;GetVertexCount();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f<sp/>radius<sp/>=<sp/>clothDataSet[idx]<sp/>-<sp/>CLOTH_ORIGIN;</highlight></codeline>
<codeline lineno="733"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>radialVelocityBuffer[idx]<sp/>=<sp/>Vector3f::CrossProduct(ANGULAR_VELOCITY,<sp/>radius);</highlight></codeline>
<codeline lineno="734"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="736"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>velocityStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(radialVelocityBuffer.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_VELOCITY,<sp/>velocityStart);</highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>bufferLock<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(zeroIntBuffer.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_CONSTRAINT_COUNT,<sp/>bufferLock);</highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>deltaStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(zeroIntBuffer.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="744"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_DELTAX,<sp/>deltaStart);</highlight></codeline>
<codeline lineno="745"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_DELTAY,<sp/>deltaStart);</highlight></codeline>
<codeline lineno="746"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_DELTAZ,<sp/>deltaStart);</highlight></codeline>
<codeline lineno="747"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="748"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>vertexModelMatrixBufferStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(vertexModelMatrixIdBuffer.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="749"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_VERTEX_MODEL_MATRICES,<sp/>vertexModelMatrixBufferStart);</highlight></codeline>
<codeline lineno="750"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="751"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(COMPUTE_INDEX_BUFFER,<sp/>p_activeMesh-&gt;IndexData());</highlight></codeline>
<codeline lineno="752"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="753"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="754"><highlight class="stringliteral"><sp/><sp/>//<sp/>CREATE<sp/>COMPUTE<sp/>POOL<sp/>-<sp/>PBD</highlight></codeline>
<codeline lineno="755"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>numConstraintBlocks<sp/>=<sp/>(totalConstraints<sp/>+<sp/>DEFAULT_BLOCK_SIZE_X<sp/>-<sp/>1)<sp/>/<sp/>DEFAULT_BLOCK_SIZE_X;</highlight></codeline>
<codeline lineno="756"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>numVerticesBlocks<sp/>=<sp/>(p_activeMesh-&gt;GetVertexCount()<sp/>+<sp/>DEFAULT_BLOCK_SIZE_X<sp/>-<sp/>1)<sp/>/<sp/>DEFAULT_BLOCK_SIZE_X;</highlight></codeline>
<codeline lineno="757"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>numGridBlocks<sp/>=<sp/>((MAX_GRID_RESOLUTION_X<sp/>*<sp/>MAX_GRID_RESOLUTION_Y<sp/>*<sp/>MAX_GRID_RESOLUTION_Z)<sp/>+<sp/>DEFAULT_BLOCK_SIZE_X<sp/>-<sp/>1)<sp/>/<sp/>DEFAULT_BLOCK_SIZE_X;</highlight></codeline>
<codeline lineno="758"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>numTriangleBlocks<sp/>=<sp/>((p_activeMesh-&gt;GetIndexCount()<sp/>/<sp/>3)<sp/>+<sp/>DEFAULT_BLOCK_SIZE_X<sp/>-<sp/>1)<sp/>/<sp/>DEFAULT_BLOCK_SIZE_X;</highlight></codeline>
<codeline lineno="759"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="760"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="761"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>pass1<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="762"><highlight class="stringliteral"><sp/><sp/>pass1.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="763"><highlight class="stringliteral"><sp/><sp/>pass1.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_pass1},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="764"><highlight class="stringliteral"><sp/><sp/>pass1.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numVerticesBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="765"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="766"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>passBin<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="767"><highlight class="stringliteral"><sp/><sp/>passBin.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="768"><highlight class="stringliteral"><sp/><sp/>passBin.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_passBinning},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="769"><highlight class="stringliteral"><sp/><sp/>passBin.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numVerticesBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="770"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="771"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>passSelfCollisions<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="772"><highlight class="stringliteral"><sp/><sp/>passSelfCollisions.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="773"><highlight class="stringliteral"><sp/><sp/>passSelfCollisions.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_passSelfCollisions},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="774"><highlight class="stringliteral"><sp/><sp/>passSelfCollisions.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numTriangleBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="775"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="776"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>passBinInit<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="777"><highlight class="stringliteral"><sp/><sp/>passBinInit.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="778"><highlight class="stringliteral"><sp/><sp/>passBinInit.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_passInitialize},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="779"><highlight class="stringliteral"><sp/><sp/>passBinInit.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numGridBlocks<sp/>,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="780"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="781"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>pass3<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="782"><highlight class="stringliteral"><sp/><sp/>pass3.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="783"><highlight class="stringliteral"><sp/><sp/>pass3.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_pass4},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="784"><highlight class="stringliteral"><sp/><sp/>pass3.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numVerticesBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="785"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="786"><highlight class="stringliteral"><sp/><sp/>const<sp/>float<sp/>distanceStiffnessPrime<sp/>=<sp/>1.0f<sp/>-<sp/>std::pow(1.0f<sp/>-<sp/>DISTANCE_STIFFNESS,<sp/>1.0f<sp/>/<sp/>SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="787"><highlight class="stringliteral"><sp/><sp/>const<sp/>float<sp/>lrStiffnessPrime<sp/>=<sp/>1.0f<sp/>-<sp/>std::pow(1.0f<sp/>-<sp/>LONG_RANGE_STIFFNESS,<sp/>1.0f<sp/>/<sp/>SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="788"><highlight class="stringliteral"><sp/><sp/>const<sp/>float<sp/>bendingStiffnessPrime<sp/>=<sp/>1.0f<sp/>-<sp/>std::pow(1.0f<sp/>-<sp/>BENDING_STIFFNESS,<sp/>1.0f<sp/>/<sp/>SOLVER_ITERATIONS);</highlight></codeline>
<codeline lineno="789"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="790"><highlight class="stringliteral"><sp/><sp/>m_computeUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="791"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_numVertices<sp/>=<sp/>p_activeMesh-&gt;GetVertexCount();</highlight></codeline>
<codeline lineno="792"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_numTriangles<sp/>=<sp/>p_activeMesh-&gt;GetIndexCount()<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="793"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_stretchStiffness<sp/>=<sp/>distanceStiffnessPrime;</highlight></codeline>
<codeline lineno="794"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_bendStiffness<sp/>=<sp/>bendingStiffnessPrime;</highlight></codeline>
<codeline lineno="795"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_longRangeStiffness<sp/>=<sp/>lrStiffnessPrime;</highlight></codeline>
<codeline lineno="796"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_timeDelta<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="797"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_numLongRangeConstraints<sp/>=<sp/>U32(clothLongRangeConstraints.GetSize());</highlight></codeline>
<codeline lineno="798"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_numStretchConstraints<sp/>=<sp/>U32(clothDistanceConstraints.GetSize());</highlight></codeline>
<codeline lineno="799"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_numBendConstraints<sp/>=<sp/>U32(clothBendingConstraints.GetSize());</highlight></codeline>
<codeline lineno="800"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="801"><highlight class="stringliteral"><sp/><sp/>if<sp/>(USE_CURTAIN)</highlight></codeline>
<codeline lineno="802"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>CURTAIN_ANCHORS;<sp/>idx++)</highlight></codeline>
<codeline lineno="804"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[idx]<sp/>=<sp/>m_curtainTransforms[idx].GetTransform();</highlight></codeline>
<codeline lineno="806"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="stringliteral"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[0]<sp/>=<sp/>m_clothTransform.GetTransform().Transpose();</highlight></codeline>
<codeline lineno="810"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[1]<sp/>=<sp/>m_clothTransform.GetTransform().Transpose();</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="813"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>computeUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;m_computeUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="814"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="815"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computeProjectedPositions<sp/>=<sp/>m_renderer-&gt;CreateComputePool(pass1);</highlight></codeline>
<codeline lineno="816"><highlight class="stringliteral"><sp/><sp/>computeProjectedPositions.AddShader(COMPUTE_1_PBD);</highlight></codeline>
<codeline lineno="817"><highlight class="stringliteral"><sp/><sp/>computeProjectedPositions.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="818"><highlight class="stringliteral"><sp/><sp/>m_computePools[0]<sp/>=<sp/>&amp;computeProjectedPositions;</highlight></codeline>
<codeline lineno="819"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="820"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computeBinning<sp/>=<sp/>m_renderer-&gt;CreateComputePool(passBin);</highlight></codeline>
<codeline lineno="821"><highlight class="stringliteral"><sp/><sp/>computeBinning.AddShader(COMPUTE_2_BINNING);</highlight></codeline>
<codeline lineno="822"><highlight class="stringliteral"><sp/><sp/>computeBinning.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="823"><highlight class="stringliteral"><sp/><sp/>m_computePools[1]<sp/>=<sp/>&amp;computeBinning;</highlight></codeline>
<codeline lineno="824"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="825"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computeGenSelfCol<sp/>=<sp/>m_renderer-&gt;CreateComputePool(passSelfCollisions);</highlight></codeline>
<codeline lineno="826"><highlight class="stringliteral"><sp/><sp/>computeGenSelfCol.AddShader(COMPUTE_SELF_COLLSIONS);</highlight></codeline>
<codeline lineno="827"><highlight class="stringliteral"><sp/><sp/>computeGenSelfCol.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="828"><highlight class="stringliteral"><sp/><sp/>m_computePools[2]<sp/>=<sp/>&amp;computeGenSelfCol;</highlight></codeline>
<codeline lineno="829"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="830"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computeBinningInit<sp/>=<sp/>m_renderer-&gt;CreateComputePool(passBinInit);</highlight></codeline>
<codeline lineno="831"><highlight class="stringliteral"><sp/><sp/>computeBinningInit.AddShader(COMPUTE_2_BINNING_INIT);</highlight></codeline>
<codeline lineno="832"><highlight class="stringliteral"><sp/><sp/>computeBinningInit.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="833"><highlight class="stringliteral"><sp/><sp/>m_computePools[3]<sp/>=<sp/>&amp;computeBinningInit;</highlight></codeline>
<codeline lineno="834"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="835"><highlight class="stringliteral"><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>SOLVER_ITERATIONS;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ComputePoolCreateInfo<sp/>poolInfoConstraints<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="837"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>poolInfoConstraints.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="838"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>poolInfoConstraints.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_passItr1[idx]},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="839"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>poolInfoConstraints.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numConstraintBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="840"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="841"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ComputePool&amp;<sp/>computeApplyConstraints<sp/>=<sp/>m_renderer-&gt;CreateComputePool(poolInfoConstraints);</highlight></codeline>
<codeline lineno="842"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computeApplyConstraints.AddShader(COMPUTE_2_PBD);</highlight></codeline>
<codeline lineno="843"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computeApplyConstraints.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="844"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_iterativePools.push_back(&amp;computeApplyConstraints);</highlight></codeline>
<codeline lineno="845"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="846"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ComputePoolCreateInfo<sp/>pass2<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="847"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pass2.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="848"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pass2.m_computePasses<sp/>=<sp/>{<sp/>{m_computePass.m_passItr2[idx]},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="849"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pass2.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numVerticesBlocks,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="850"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="851"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ComputePool&amp;<sp/>computeApplyDelta<sp/>=<sp/>m_renderer-&gt;CreateComputePool(pass2);</highlight></codeline>
<codeline lineno="852"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computeApplyDelta.AddShader(COMPUTE_3_PBD);</highlight></codeline>
<codeline lineno="853"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computeApplyDelta.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="854"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_iterativePools.push_back(&amp;computeApplyDelta);</highlight></codeline>
<codeline lineno="855"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="857"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computeComputePositions<sp/>=<sp/>m_renderer-&gt;CreateComputePool(pass3);</highlight></codeline>
<codeline lineno="858"><highlight class="stringliteral"><sp/><sp/>computeComputePositions.AddShader(COMPUTE_4_PBD);</highlight></codeline>
<codeline lineno="859"><highlight class="stringliteral"><sp/><sp/>computeComputePositions.BindUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="860"><highlight class="stringliteral"><sp/><sp/>m_computePools[4]<sp/>=<sp/>&amp;computeComputePositions;</highlight></codeline>
<codeline lineno="861"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="862"><highlight class="stringliteral"><sp/><sp/>//<sp/>CREATE<sp/>COMPUTE<sp/>POOL<sp/>-<sp/>NORMALS</highlight></codeline>
<codeline lineno="863"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>numBlocksForNormalize<sp/>=<sp/>(m_normalUBO.m_numTriangles<sp/>+<sp/>DEFAULT_BLOCK_SIZE_X<sp/>-<sp/>1)<sp/>/<sp/>DEFAULT_BLOCK_SIZE_X;</highlight></codeline>
<codeline lineno="864"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="865"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>normComputePoolInfo<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="866"><highlight class="stringliteral"><sp/><sp/>normComputePoolInfo.m_byteSize<sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="867"><highlight class="stringliteral"><sp/><sp/>normComputePoolInfo.m_computePasses<sp/>=<sp/>{<sp/>{m_normalsPass.m_passId},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="868"><highlight class="stringliteral"><sp/><sp/>normComputePoolInfo.m_launchDims<sp/>=<sp/>ThreadGroupDimensions{<sp/>numBlocksForNormalize,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="869"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="870"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>normComputePool<sp/>=<sp/>m_renderer-&gt;CreateComputePool(normComputePoolInfo);</highlight></codeline>
<codeline lineno="871"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>normUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;m_normalUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="872"><highlight class="stringliteral"><sp/><sp/>normComputePool.BindUniformData(m_normalsPass.m_uboSlot,<sp/>normUBOStart,<sp/>sizeof(NormalUBO));</highlight></codeline>
<codeline lineno="873"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="874"><highlight class="stringliteral"><sp/><sp/>IcoSphere<sp/>sphere(4);</highlight></codeline>
<codeline lineno="875"><highlight class="stringliteral"><sp/><sp/>Plane<sp/>plane(Vector2f(-150,<sp/>-150),<sp/>Vector2f(150,<sp/>150),<sp/>Vector2u(10,<sp/>10),<sp/>Vector2u(10,<sp/>10));</highlight></codeline>
<codeline lineno="876"><highlight class="stringliteral"><sp/><sp/>Plane<sp/>shehzanPlane(Vector2f(-5,<sp/>-5),<sp/>Vector2f(5,<sp/>5),<sp/>Vector2u(2,<sp/>2),<sp/>Vector2u(1,<sp/>1));</highlight></codeline>
<codeline lineno="877"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="878"><highlight class="stringliteral"><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="879"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_byteSize<sp/>=<sp/>sphere.TotalDataSize()<sp/>+<sp/>p_activeMesh-&gt;TotalDataSize()<sp/>+<sp/>TEXTURE_MEMORY<sp/>+<sp/>0x400000;</highlight></codeline>
<codeline lineno="880"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_numDrawables<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="881"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{<sp/>{RENDER_PASS},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="882"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_drawType<sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="883"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="884"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="885"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>p_activeMesh-&gt;GetVertexFormat()}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="886"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="887"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="888"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>UV_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="889"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;UV&quot;,<sp/>p_activeMesh-&gt;GetUVFormat()}}</highlight></codeline>
<codeline lineno="890"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="891"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>NORMAL_SLOT_X<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMALX&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="894"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="895"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="896"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>NORMAL_SLOT_Y<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="897"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMALY&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="898"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="899"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="900"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>NORMAL_SLOT_Z<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="901"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMALZ&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="902"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="903"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="904"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>TANGENT_SLOT_X<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="905"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;TANGENTX&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="906"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="907"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="908"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>TANGENT_SLOT_Y<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="909"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;TANGENTY&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="910"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="911"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="912"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>TANGENT_SLOT_Z<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="913"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;TANGENTZ&quot;,<sp/>RawStorageFormat::R32_UINT}},<sp/>0,<sp/>BufferSource::StructuredBuffer</highlight></codeline>
<codeline lineno="914"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="915"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/>DrawablePool&amp;<sp/>clothPool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="917"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_clothUBO);<sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="919"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>sphereUBO<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_sphereUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="920"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>planeUBO<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_planeUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="921"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>shehzanUBO<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_shehzanUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="922"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lightDataBuffer<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;lightData);<sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="923"><highlight class="stringliteral"><sp/><sp/>//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight></codeline>
<codeline lineno="924"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="925"><highlight class="stringliteral"><sp/><sp/>createInfo.m_vertexCount<sp/>=<sp/>p_activeMesh-&gt;GetVertexCount();</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexCount<sp/>=<sp/>p_activeMesh-&gt;GetIndexCount();</highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/>createInfo.m_instanceCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexType<sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/>SamplerDesc<sp/>desc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="931"><highlight class="stringliteral"><sp/><sp/>desc.m_filter<sp/>=<sp/>TextureFilter::MinMagMipLinear;</highlight></codeline>
<codeline lineno="932"><highlight class="stringliteral"><sp/><sp/>desc.m_addressModeU<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="933"><highlight class="stringliteral"><sp/><sp/>desc.m_addressModeV<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="934"><highlight class="stringliteral"><sp/><sp/>desc.m_addressModeW<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="935"><highlight class="stringliteral"><sp/><sp/>clothPool.BindSampler(SAMPLER_SLOT,<sp/>desc);</highlight></codeline>
<codeline lineno="936"><highlight class="stringliteral"><sp/><sp/>clothPool.BindTextureData(TEXTURE_SLOT,<sp/>*albedoDesc,<sp/>m_textureManager-&gt;GetData(albedoTexture));</highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"><sp/><sp/>clothPool.BindTextureData(NORMALS_SLOT,<sp/>*normalDesc,<sp/>m_textureManager-&gt;GetData(normalTexture));</highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"><sp/><sp/>clothPool.BindTextureData(ROUGHNESS_SLOT,<sp/>*roughnessDesc,<sp/>m_textureManager-&gt;GetData(roughnessTexture));</highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"><sp/><sp/>clothPool.BindTextureData(AO_SLOT,<sp/>*aoDesc,<sp/>m_textureManager-&gt;GetData(aoTexture));</highlight></codeline>
<codeline lineno="940"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="941"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>clothId<sp/>=<sp/>clothPool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="942"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>VERTEX_SLOT,<sp/>COMPUTE_VERTEX_BUFFER,<sp/>0,<sp/>p_activeMesh-&gt;VertexDataSize());</highlight></codeline>
<codeline lineno="943"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>UV_SLOT,<sp/>p_activeMesh-&gt;UVData(),<sp/>p_activeMesh-&gt;UVDataSize());</highlight></codeline>
<codeline lineno="944"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>NORMAL_SLOT_X,<sp/>COMPUTE_VERTEX_DELTAX,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="945"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>NORMAL_SLOT_Y,<sp/>COMPUTE_VERTEX_DELTAY,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="946"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>NORMAL_SLOT_Z,<sp/>COMPUTE_VERTEX_DELTAZ,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="947"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>TANGENT_SLOT_X,<sp/>COMPUTE_VERTEX_TANX,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="948"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>TANGENT_SLOT_Y,<sp/>COMPUTE_VERTEX_TANY,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="949"><highlight class="stringliteral"><sp/><sp/>clothPool.BindVertexData(clothId,<sp/>TANGENT_SLOT_Z,<sp/>COMPUTE_VERTEX_TANZ,<sp/>0,<sp/>p_activeMesh-&gt;GetVertexCount()<sp/>*<sp/>U32(sizeof(float)));</highlight></codeline>
<codeline lineno="950"><highlight class="stringliteral"><sp/><sp/>clothPool.SetIndexData(clothId,<sp/>p_activeMesh-&gt;IndexData(),<sp/>p_activeMesh-&gt;IndexDataSize());</highlight></codeline>
<codeline lineno="951"><highlight class="stringliteral"><sp/><sp/>clothPool.BindUniformData(clothId,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="952"><highlight class="stringliteral"><sp/><sp/>clothPool.BindUniformData(clothId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/>sizeof(LightData));</highlight></codeline>
<codeline lineno="953"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="954"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>sphereDrawableInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="955"><highlight class="stringliteral"><sp/><sp/>sphereDrawableInfo.m_vertexCount<sp/>=<sp/>sphere.GetVertexCount();</highlight></codeline>
<codeline lineno="956"><highlight class="stringliteral"><sp/><sp/>sphereDrawableInfo.m_indexCount<sp/>=<sp/>sphere.GetIndexCount();</highlight></codeline>
<codeline lineno="957"><highlight class="stringliteral"><sp/><sp/>sphereDrawableInfo.m_instanceCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="958"><highlight class="stringliteral"><sp/><sp/>sphereDrawableInfo.m_indexType<sp/>=<sp/>sphere.GetIndexFormat();</highlight></codeline>
<codeline lineno="959"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="960"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>planeDrawableInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="961"><highlight class="stringliteral"><sp/><sp/>planeDrawableInfo.m_vertexCount<sp/>=<sp/>plane.GetVertexCount();</highlight></codeline>
<codeline lineno="962"><highlight class="stringliteral"><sp/><sp/>planeDrawableInfo.m_indexCount<sp/>=<sp/>plane.GetIndexCount();</highlight></codeline>
<codeline lineno="963"><highlight class="stringliteral"><sp/><sp/>planeDrawableInfo.m_instanceCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="964"><highlight class="stringliteral"><sp/><sp/>planeDrawableInfo.m_indexType<sp/>=<sp/>plane.GetIndexFormat();</highlight></codeline>
<codeline lineno="965"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="966"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>shehzanPlaneDrawableInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="967"><highlight class="stringliteral"><sp/><sp/>shehzanPlaneDrawableInfo.m_vertexCount<sp/>=<sp/>shehzanPlane.GetVertexCount();</highlight></codeline>
<codeline lineno="968"><highlight class="stringliteral"><sp/><sp/>shehzanPlaneDrawableInfo.m_indexCount<sp/>=<sp/>shehzanPlane.GetIndexCount();</highlight></codeline>
<codeline lineno="969"><highlight class="stringliteral"><sp/><sp/>shehzanPlaneDrawableInfo.m_instanceCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="970"><highlight class="stringliteral"><sp/><sp/>shehzanPlaneDrawableInfo.m_indexType<sp/>=<sp/>shehzanPlane.GetIndexFormat();</highlight></codeline>
<codeline lineno="971"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/>if<sp/>(RENDER_SPHERE)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DrawablePoolCreateInfo<sp/>spherePoolInfo<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePoolInfo.m_byteSize<sp/>=<sp/>sphere.TotalDataSize()<sp/>+<sp/>0x400000;</highlight></codeline>
<codeline lineno="975"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePoolInfo.m_numDrawables<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="976"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePoolInfo.m_renderPasses<sp/>=<sp/>{<sp/>{RENDER_PASS},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="977"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePoolInfo.m_drawType<sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="978"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="979"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>SPHERE_VERTEX_SLOT<sp/>=<sp/>spherePoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="980"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>RawStorageFormat::R32G32B32A32_FLOAT}}</highlight></codeline>
<codeline lineno="981"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="982"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="983"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>SPHERE_NORMAL_SLOT<sp/>=<sp/>spherePoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="984"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMAL&quot;,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="985"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="986"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="987"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DrawablePool&amp;<sp/>spherePool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(spherePoolInfo);</highlight></codeline>
<codeline lineno="988"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.AddShader(SPHERE_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="989"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.AddShader(SPHERE_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="990"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="991"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>sphereId<sp/>=<sp/>spherePool.CreateDrawable(sphereDrawableInfo);</highlight></codeline>
<codeline lineno="992"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.BindVertexData(sphereId,<sp/>SPHERE_VERTEX_SLOT,<sp/>sphere.VertexData(),<sp/>sphere.VertexDataSize());</highlight></codeline>
<codeline lineno="993"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.BindVertexData(sphereId,<sp/>SPHERE_NORMAL_SLOT,<sp/>sphere.NormalData(),<sp/>sphere.NormalDataSize());</highlight></codeline>
<codeline lineno="994"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.SetIndexData(sphereId,<sp/>sphere.IndexData(),<sp/>sphere.IndexDataSize());</highlight></codeline>
<codeline lineno="995"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.BindUniformData(sphereId,<sp/>UBO_SLOT,<sp/>sphereUBO,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="996"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>spherePool.BindUniformData(sphereId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/>sizeof(LightData));</highlight></codeline>
<codeline lineno="997"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="998"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderPass.m_sphereId<sp/><sp/><sp/><sp/><sp/>=<sp/>sphereId;</highlight></codeline>
<codeline lineno="999"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_spherePool<sp/>=<sp/>&amp;spherePool;</highlight></codeline>
<codeline lineno="1000"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1002"><highlight class="stringliteral"><sp/><sp/>SamplerDesc<sp/>floorSampler<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1003"><highlight class="stringliteral"><sp/><sp/>floorSampler.m_filter<sp/>=<sp/>TextureFilter::MinMagMipLinear;</highlight></codeline>
<codeline lineno="1004"><highlight class="stringliteral"><sp/><sp/>floorSampler.m_addressModeU<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="1005"><highlight class="stringliteral"><sp/><sp/>floorSampler.m_addressModeV<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="1006"><highlight class="stringliteral"><sp/><sp/>floorSampler.m_addressModeW<sp/>=<sp/>TextureAddressMode::Wrap;</highlight></codeline>
<codeline lineno="1007"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1008"><highlight class="stringliteral"><sp/><sp/>if<sp/>(RENDER_FLOOR_PLANE)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DrawablePoolCreateInfo<sp/>planePoolInfo<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="1010"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePoolInfo.m_byteSize<sp/>=<sp/>plane.TotalDataSize()<sp/>+<sp/>0x800000;</highlight></codeline>
<codeline lineno="1011"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePoolInfo.m_numDrawables<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1012"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePoolInfo.m_renderPasses<sp/>=<sp/>{<sp/>{RENDER_PASS},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="1013"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePoolInfo.m_drawType<sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="1014"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1015"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>PLANE_VERTEX_SLOT<sp/>=<sp/>planePoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1016"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>plane.GetVertexFormat()}}</highlight></codeline>
<codeline lineno="1017"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1018"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1019"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>PLANE_NORMAL_SLOT<sp/>=<sp/>planePoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1020"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMAL&quot;,<sp/>plane.GetNormalFormat()}}</highlight></codeline>
<codeline lineno="1021"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1022"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1023"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>PLANE_UV_SLOT<sp/>=<sp/>planePoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1024"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;UV&quot;,<sp/>plane.GetUVFormat()}}</highlight></codeline>
<codeline lineno="1025"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1026"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1027"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DrawablePool&amp;<sp/>planePool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(planePoolInfo);</highlight></codeline>
<codeline lineno="1028"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.AddShader(PLANE_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="1029"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.AddShader(PLANE_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="1030"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1031"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindSampler(SAMPLER_SLOT,<sp/>floorSampler);</highlight></codeline>
<codeline lineno="1032"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindTextureData(TEXTURE_SLOT,<sp/>*floorAlbedoDesc,<sp/>m_textureManager-&gt;GetData(floorAlbedo));</highlight></codeline>
<codeline lineno="1033"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindTextureData(NORMALS_SLOT,<sp/>*floorNormalDesc,<sp/>m_textureManager-&gt;GetData(floorNormal));</highlight></codeline>
<codeline lineno="1034"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindTextureData(ROUGHNESS_SLOT,<sp/>*floorRoughnessDesc,<sp/>m_textureManager-&gt;GetData(floorRoughness));</highlight></codeline>
<codeline lineno="1035"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindTextureData(AO_SLOT,<sp/>*floorAODesc,<sp/>m_textureManager-&gt;GetData(floorAO));</highlight></codeline>
<codeline lineno="1036"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1037"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>planeId<sp/>=<sp/>planePool.CreateDrawable(planeDrawableInfo);</highlight></codeline>
<codeline lineno="1038"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindVertexData(planeId,<sp/>PLANE_VERTEX_SLOT,<sp/>plane.VertexData(),<sp/>plane.VertexDataSize());</highlight></codeline>
<codeline lineno="1039"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindVertexData(planeId,<sp/>PLANE_NORMAL_SLOT,<sp/>plane.NormalData(),<sp/>plane.NormalDataSize());</highlight></codeline>
<codeline lineno="1040"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindVertexData(planeId,<sp/>PLANE_UV_SLOT,<sp/>plane.UVData(),<sp/>plane.UVDataSize());</highlight></codeline>
<codeline lineno="1041"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.SetIndexData(planeId,<sp/>plane.IndexData(),<sp/>plane.IndexDataSize());</highlight></codeline>
<codeline lineno="1042"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindUniformData(planeId,<sp/>UBO_SLOT,<sp/>planeUBO,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1043"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>planePool.BindUniformData(planeId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/>sizeof(LightData));</highlight></codeline>
<codeline lineno="1044"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1045"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_renderPass.m_planeId<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>planeId;</highlight></codeline>
<codeline lineno="1046"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_planePool<sp/>=<sp/>&amp;planePool;</highlight></codeline>
<codeline lineno="1047"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1049"><highlight class="stringliteral"><sp/><sp/><sp/>if<sp/>(SHEHZAN<sp/>&amp;&amp;<sp/>USE_CURTAIN)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>DrawablePoolCreateInfo<sp/>shehzanPoolInfo<sp/>=<sp/>{<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="1051"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPoolInfo.m_byteSize<sp/>=<sp/>shehzanPlane.TotalDataSize()<sp/>+<sp/>0x800000;</highlight></codeline>
<codeline lineno="1052"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPoolInfo.m_numDrawables<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1053"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPoolInfo.m_renderPasses<sp/>=<sp/>{<sp/>{RENDER_PASS},<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="1054"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPoolInfo.m_drawType<sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="1055"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1056"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>SHEHZAN_VERTEX_SLOT<sp/>=<sp/>shehzanPoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1057"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>shehzanPlane.GetVertexFormat()}}</highlight></codeline>
<codeline lineno="1058"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1059"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1060"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>SHEHZAN_NORMAL_SLOT<sp/>=<sp/>shehzanPoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1061"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMAL&quot;,<sp/>shehzanPlane.GetNormalFormat()}}</highlight></codeline>
<codeline lineno="1062"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1063"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1064"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>SHEHZAN_UV_SLOT<sp/>=<sp/>shehzanPoolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="1065"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;UV&quot;,<sp/>shehzanPlane.GetUVFormat()}}</highlight></codeline>
<codeline lineno="1066"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1067"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1068"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>DrawablePool&amp;<sp/>shehzanPool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(shehzanPoolInfo);</highlight></codeline>
<codeline lineno="1069"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.AddShader(SHEHZAN_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="1070"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.AddShader(SHEHZAN_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="1071"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1072"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindSampler(SAMPLER_SLOT,<sp/>floorSampler);</highlight></codeline>
<codeline lineno="1073"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindTextureData(TEXTURE_SLOT,<sp/>*shehzanDesc,<sp/>m_textureManager-&gt;GetData(shehzanId));</highlight></codeline>
<codeline lineno="1074"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1075"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>shehzanPlaneId<sp/>=<sp/>shehzanPool.CreateDrawable(shehzanPlaneDrawableInfo);</highlight></codeline>
<codeline lineno="1076"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindVertexData(shehzanPlaneId,<sp/>SHEHZAN_VERTEX_SLOT,<sp/>shehzanPlane.VertexData(),<sp/>shehzanPlane.VertexDataSize());</highlight></codeline>
<codeline lineno="1077"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindVertexData(shehzanPlaneId,<sp/>SHEHZAN_NORMAL_SLOT,<sp/>shehzanPlane.NormalData(),<sp/>shehzanPlane.NormalDataSize());</highlight></codeline>
<codeline lineno="1078"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindVertexData(shehzanPlaneId,<sp/>SHEHZAN_UV_SLOT,<sp/>shehzanPlane.UVData(),<sp/>shehzanPlane.UVDataSize());</highlight></codeline>
<codeline lineno="1079"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.SetIndexData(shehzanPlaneId,<sp/>shehzanPlane.IndexData(),<sp/>shehzanPlane.IndexDataSize());</highlight></codeline>
<codeline lineno="1080"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindUniformData(shehzanPlaneId,<sp/>UBO_SLOT,<sp/>shehzanUBO,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1081"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>shehzanPool.BindUniformData(shehzanPlaneId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/>sizeof(LightData));</highlight></codeline>
<codeline lineno="1082"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1083"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_shehzanPool<sp/>=<sp/>&amp;shehzanPool;</highlight></codeline>
<codeline lineno="1084"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_renderPass.m_shehzanId<sp/>=<sp/>shehzanPlaneId;</highlight></codeline>
<codeline lineno="1085"><highlight class="stringliteral"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1087"><highlight class="stringliteral"><sp/><sp/>m_renderPass.m_vertexSlot<sp/><sp/><sp/>=<sp/>VERTEX_SLOT;</highlight></codeline>
<codeline lineno="1088"><highlight class="stringliteral"><sp/><sp/>m_renderPass.m_sceneUBOSlot<sp/>=<sp/>UBO_SLOT;</highlight></codeline>
<codeline lineno="1089"><highlight class="stringliteral"><sp/><sp/>m_renderPass.m_clothId<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>clothId;</highlight></codeline>
<codeline lineno="1090"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1091"><highlight class="stringliteral"><sp/><sp/>m_mainPool<sp/><sp/><sp/>=<sp/>&amp;clothPool;</highlight></codeline>
<codeline lineno="1092"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1093"><highlight class="stringliteral"><sp/><sp/>//<sp/>All<sp/>Drawables<sp/>Done</highlight></codeline>
<codeline lineno="1094"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="1095"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1096"><highlight class="stringliteral"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/>&quot;Initialized<sp/>AppRenderer&quot;);</highlight></codeline>
<codeline lineno="1097"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1098"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1099"><highlight class="stringliteral">void<sp/>AppRenderer::WindowUpdate(float<sp/>timeDelta)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="stringliteral"><sp/><sp/>if<sp/>(timeDelta<sp/>&lt;<sp/>EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="1102"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1104"><highlight class="stringliteral"><sp/><sp/>m_camera.Update(timeDelta);</highlight></codeline>
<codeline lineno="1105"><highlight class="stringliteral"><sp/><sp/>m_clothTransform.Update(timeDelta);</highlight></codeline>
<codeline lineno="1106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1107"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="1108"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="1109"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="1110"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="1111"><highlight class="stringliteral"><sp/><sp/>m_clothUBO.m_modelInvTranspose<sp/>=<sp/>m_clothUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="1112"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1113"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="1114"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="1115"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="1116"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="1117"><highlight class="stringliteral"><sp/><sp/>m_sphereUBO.m_modelInvTranspose<sp/>=<sp/>m_sphereUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="1118"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1119"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="1120"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="1121"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="1122"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="1123"><highlight class="stringliteral"><sp/><sp/>m_planeUBO.m_modelInvTranspose<sp/>=<sp/>m_planeUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="1124"><highlight class="stringliteral"><sp/><sp/></highlight></codeline>
<codeline lineno="1125"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="1126"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="1127"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="1128"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_invProj<sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="1129"><highlight class="stringliteral"><sp/><sp/>m_shehzanUBO.m_modelInvTranspose<sp/>=<sp/>m_shehzanUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="1130"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1131"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_timeDelta<sp/>=<sp/>timeDelta;</highlight></codeline>
<codeline lineno="1132"><highlight class="stringliteral"><sp/><sp/>m_computeUBO.m_frameCount++;</highlight></codeline>
<codeline lineno="1133"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1134"><highlight class="stringliteral"><sp/><sp/>if<sp/>(USE_CURTAIN)</highlight></codeline>
<codeline lineno="1135"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>CURTAIN_ANCHORS;<sp/>idx++)</highlight></codeline>
<codeline lineno="1137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_curtainTransforms[idx].Update(timeDelta);</highlight></codeline>
<codeline lineno="1139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[idx]<sp/>=<sp/>m_curtainTransforms[idx].GetTransform();</highlight></codeline>
<codeline lineno="1140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="stringliteral"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(SCENE_TWIST)</highlight></codeline>
<codeline lineno="1144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4f<sp/>rotationDelta0<sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="1146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4f<sp/>rotationDelta1<sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="1147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(m_rotateFactor<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>float<sp/>rotateAmount<sp/>=<sp/>m_rotateFactor<sp/>*<sp/>m_rotateStepSize<sp/>*<sp/>timeDelta;</highlight></codeline>
<codeline lineno="1149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationDelta0<sp/>=<sp/>Matrix4f::FromRotationMatrix(Matrix3f::RotationX(rotateAmount));</highlight></codeline>
<codeline lineno="1151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationDelta1<sp/>=<sp/>Matrix4f::FromRotationMatrix(Matrix3f::RotationX(-rotateAmount));</highlight></codeline>
<codeline lineno="1152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[0]<sp/>=<sp/>rotationDelta0<sp/>*<sp/>m_clothTransform.GetTransform();</highlight></codeline>
<codeline lineno="1155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[1]<sp/>=<sp/>rotationDelta1<sp/>*<sp/>m_clothTransform.GetTransform();</highlight></codeline>
<codeline lineno="1156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[0]<sp/>=<sp/>m_clothTransform.GetTransform();</highlight></codeline>
<codeline lineno="1159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_computeUBO.m_clothModelMatrix[1]<sp/>=<sp/>m_clothTransform.GetTransform();</highlight></codeline>
<codeline lineno="1160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1163"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_clothUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="1164"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>sphereDataBuffer<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_sphereUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="1165"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>planeDataBuffer<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_planeUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="1166"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>shehzanUBOStart<sp/>=<sp/>reinterpret_cast&lt;U8*&gt;(&amp;m_shehzanUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="1167"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>computeUBOStart<sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;m_computeUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="1168"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1169"><highlight class="stringliteral"><sp/><sp/>for<sp/>(auto&amp;<sp/>computePool<sp/>:<sp/>m_computePools)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;UpdateUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="1172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1173"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1175"><highlight class="stringliteral"><sp/><sp/>for<sp/>(auto&amp;<sp/>computePool<sp/>:<sp/>m_iterativePools)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;UpdateUniformData(m_computePass.m_computeUBOSlot,<sp/>computeUBOStart,<sp/>sizeof(ComputeUBO));</highlight></codeline>
<codeline lineno="1178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>computePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1179"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1181"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1182"><highlight class="stringliteral"><sp/><sp/>//<sp/>Update<sp/>Cloth</highlight></codeline>
<codeline lineno="1183"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_renderPass.m_clothId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>uboDataBuffer,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1184"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1185"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1186"><highlight class="stringliteral"><sp/><sp/>if<sp/>(RENDER_SPHERE)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_spherePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_spherePool-&gt;UpdateUniformData(m_renderPass.m_sphereId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>sphereDataBuffer,</highlight></codeline>
<codeline lineno="1189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_spherePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1191"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1193"><highlight class="stringliteral"><sp/><sp/><sp/>if<sp/>(RENDER_FLOOR_PLANE)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_planePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_planePool-&gt;UpdateUniformData(m_renderPass.m_planeId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>planeDataBuffer,</highlight></codeline>
<codeline lineno="1196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_planePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1198"><highlight class="stringliteral"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1200"><highlight class="stringliteral"><sp/><sp/><sp/>if<sp/>(SHEHZAN<sp/>&amp;&amp;<sp/>USE_CURTAIN)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_shehzanPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="1202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_shehzanPool-&gt;UpdateUniformData(m_renderPass.m_shehzanId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>shehzanUBOStart,<sp/>sizeof(SceneUBO));</highlight></codeline>
<codeline lineno="1203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>m_shehzanPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="1204"><highlight class="stringliteral"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1206"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="1207"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1208"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1209"><highlight class="stringliteral">void<sp/>AppRenderer::Run()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="stringliteral"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/>&quot;Running<sp/>AppRenderer&quot;);</highlight></codeline>
<codeline lineno="1211"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;StartListening();</highlight></codeline>
<codeline lineno="1212"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1213"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1214"><highlight class="stringliteral">void<sp/>AppRenderer::Destroy()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="stringliteral"><sp/><sp/>m_window-&gt;Destroy();</highlight></codeline>
<codeline lineno="1216"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="1217"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Azura</highlight></codeline>
    </programlisting>
    <location file="Source/Samples/3_ClothSim/Src/AppRenderer.cpp"/>
  </compounddef>
</doxygen>
