<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespace_azura_1_1_memory" kind="namespace" language="C++">
    <compoundname>Azura::Memory</compoundname>
    <innerclass refid="class_azura_1_1_memory_1_1_allocator" prot="public">Azura::Memory::Allocator</innerclass>
    <innerclass refid="class_azura_1_1_memory_1_1_heap_memory_buffer" prot="public">Azura::Memory::HeapMemoryBuffer</innerclass>
    <innerclass refid="class_azura_1_1_memory_1_1_memory_buffer" prot="public">Azura::Memory::MemoryBuffer</innerclass>
    <innerclass refid="struct_azura_1_1_memory_1_1_memory_range" prot="public">Azura::Memory::MemoryRange</innerclass>
    <innerclass refid="class_azura_1_1_memory_1_1_monotonic_allocator" prot="public">Azura::Memory::MonotonicAllocator</innerclass>
    <innerclass refid="class_azura_1_1_memory_1_1_range_allocator" prot="public">Azura::Memory::RangeAllocator</innerclass>
    <innerclass refid="class_azura_1_1_memory_1_1_stack_memory_buffer" prot="public">Azura::Memory::StackMemoryBuffer</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_allocator_8h_1a71688256967374caeb84ef35e224396e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T, std::function&lt; void(T *)&gt; &gt;</type>
        <definition>using Azura::Memory::UniquePtr = typedef std::unique_ptr&lt;T, std::function&lt;void(T*)&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UniquePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/Allocator.h" line="10" column="1" bodyfile="Source/Common/Inc/Memory/Allocator.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_allocator_8h_1a1e413ab35af59bb701b98ca6a22cf4fe" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T[], std::function&lt; void(T *)&gt; &gt;</type>
        <definition>using Azura::Memory::UniqueArrayPtr = typedef std::unique_ptr&lt;T[], std::function&lt;void(T*)&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UniqueArrayPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/Allocator.h" line="13" column="1" bodyfile="Source/Common/Inc/Memory/Allocator.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedComputePass.h" line="13" column="1"/>
  </compounddef>
</doxygen>
