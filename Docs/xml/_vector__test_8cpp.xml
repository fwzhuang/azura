<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vector__test_8cpp" kind="file" language="C++">
    <compoundname>Vector_test.cpp</compoundname>
    <includes refid="_vector__test_8h" local="yes">Vector_test.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <incdepgraph>
      <node id="4656">
        <label>functional</label>
      </node>
      <node id="4657">
        <label>iterator</label>
      </node>
      <node id="4663">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4660" relation="include">
        </childnode>
      </node>
      <node id="4659">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4656" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4661" relation="include">
        </childnode>
      </node>
      <node id="4654">
        <label>cassert</label>
      </node>
      <node id="4662">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
      </node>
      <node id="4652">
        <label>Vector_test.h</label>
        <link refid="_vector__test_8h_source"/>
        <childnode refid="4653" relation="include">
        </childnode>
        <childnode refid="4662" relation="include">
        </childnode>
        <childnode refid="4664" relation="include">
        </childnode>
        <childnode refid="4665" relation="include">
        </childnode>
      </node>
      <node id="4661">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4658">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="4654" relation="include">
        </childnode>
        <childnode refid="4655" relation="include">
        </childnode>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
      </node>
      <node id="4664">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
      </node>
      <node id="4668">
        <label>vector</label>
      </node>
      <node id="4653">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="4654" relation="include">
        </childnode>
        <childnode refid="4655" relation="include">
        </childnode>
        <childnode refid="4656" relation="include">
        </childnode>
        <childnode refid="4657" relation="include">
        </childnode>
        <childnode refid="4658" relation="include">
        </childnode>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4661" relation="include">
        </childnode>
      </node>
      <node id="4665">
        <label>gtest/gtest.h</label>
      </node>
      <node id="4651">
        <label>Source/Containers/Test/Vector_test.cpp</label>
        <link refid="_vector__test_8cpp"/>
        <childnode refid="4652" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4668" relation="include">
        </childnode>
        <childnode refid="4661" relation="include">
        </childnode>
      </node>
      <node id="4667">
        <label>iostream</label>
      </node>
      <node id="4660">
        <label>Types.h</label>
      </node>
      <node id="4666">
        <label>algorithm</label>
      </node>
      <node id="4655">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_complex_type" prot="public">ComplexType</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vector__test_8cpp_1a9637a617f79d9faa89a839e5269841ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; GetTrivialVector</definition>
        <argsstring>(Memory::Allocator &amp;alloc)</argsstring>
        <name>GetTrivialVector</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="91" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="91" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1ab58e6a529ebc87d9ca7d119e1af64d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&lt; <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &gt;</type>
        <definition>Vector&lt;ComplexType&gt; GetComplexVector</definition>
        <argsstring>(Memory::Allocator &amp;alloc)</argsstring>
        <name>GetComplexVector</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="102" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="102" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1ac3926a9720aa08de179ad081930ad579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_complex_type" kindref="compound">ComplexType</ref> &gt;</type>
        <definition>std::vector&lt;ComplexType&gt; GetComplexStdVector</definition>
        <argsstring>()</argsstring>
        <name>GetComplexStdVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="113" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="113" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1ac94730a9bf9d5ffbdb33e23f8a2bc9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, Constructs)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>Constructs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="125" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1af4a781b49ca7c4d7e3e8ab1dfacf6335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, InitializerConstruct)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>InitializerConstruct</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="130" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="130" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a839afb52a8a307c041a5d85e3f355a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, NormalPush)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>NormalPush</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="142" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="142" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a632c999abf56409dbb47088df5fe2100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, GrowPush)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>GrowPush</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="156" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="156" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a52b28b1796f7846d8ef8d2b9d754c3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, GrowPushDirect)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>GrowPushDirect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="171" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a4ac40aff8e1184fb8c886e280f208590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, NormalPop)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>NormalPop</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="186" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="186" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a63769a03246d627157b19416c8db4f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, NormalRemove)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>NormalRemove</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="199" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="199" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a7145e6c9cd089b6446d61395b733642f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, NormalFind)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>NormalFind</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="224" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="224" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a9046a79e22810d3bb17dc469bddb1860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, Empty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>Empty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="238" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="238" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a5c13c950e4599f1336bc7d01796cfcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, IteratorLoop)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>IteratorLoop</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="254" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="254" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a2ad905e33b6c5548413a0ed3ed43f2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, IteratorCount)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>IteratorCount</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="271" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="271" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1aecd7e7aded1d850d6721541c60f5858e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, IteratorSort)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>IteratorSort</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="287" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="287" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a365263a1064786805ae441b3a7f79981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, ComplexTypeInitializerCtor)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>ComplexTypeInitializerCtor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="304" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="304" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1ab6ee0465791487b15571b0e642b4c6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, PushBackComplexTypesCopy)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>PushBackComplexTypesCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="348" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="348" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a16206387f4dd37f047205378f6871faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, PushBackComplexTypesMove)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>PushBackComplexTypesMove</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="410" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="410" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a56c49ac4cec448183df6bde019b6d9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, PushBackComplexTypesMoveWithGrow)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>PushBackComplexTypesMoveWithGrow</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="463" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="463" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a9e66b7b16453e01b65653a8cd8e2f776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, EmplaceBackComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>EmplaceBackComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="499" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="499" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a027654fd4e94e321e256818d9e646680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, PopComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>PopComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="552" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="552" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a85d5c577be35de263b08a3ba7548d873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, CopyCtorTrivialTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>CopyCtorTrivialTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="608" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="608" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a586408b493411c087cce5601a511da7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, CopyCtorComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>CopyCtorComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="625" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="625" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1acdd10de9a05444ff6a08464294a0702d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, MoveCtorTrivialTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>MoveCtorTrivialTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="684" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="684" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a3b57a58af4ed3615410cf5245b34b1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, MoveCtorComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>MoveCtorComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="695" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="695" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a3c5094dcc309e269a4314f46d30e509e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, CopyAssignTrivialTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>CopyAssignTrivialTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="739" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="739" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a1ee59730717d0102889b1575a8830ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, CopyAssignComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>CopyAssignComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="756" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="756" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a63c1b1e192af126ee88790733f573b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, MoveAssignTrivialTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>MoveAssignTrivialTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="815" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="815" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a436933b55b65f695c7338b54c8704dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, MoveAssignComplexTypes)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>MoveAssignComplexTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="826" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="826" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1ac65d38c73b39242cbd60a95168ccdfd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, ContructWithArguments)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>ContructWithArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="870" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="870" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="_vector__test_8cpp_1a64800e64a873187e02674e45967dd125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(VectorTest, VectorOfVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_vector_test" kindref="compound">VectorTest</ref></type>
        </param>
        <param>
          <type>VectorOfVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Test/Vector_test.cpp" line="898" column="1" bodyfile="Source/Containers/Test/Vector_test.cpp" bodystart="898" bodyend="924"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vector_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_complex_type" kindref="compound">ComplexType</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_data;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_ctorCalls;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_dtorCalls;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_copyCtorCalls;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_moveCtorCalls;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_copyAssignCalls;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_moveAssignCalls;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResetStats()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>s_ctorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>s_dtorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>s_copyCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>s_moveCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>s_copyAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>s_moveAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Test<sp/>Logs<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Reset&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintStats()<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_ctorCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_ctorCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_dtorCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_dtorCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_copyCtorCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_copyCtorCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_moveCtorCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_moveCtorCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_copyAssignCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_copyAssignCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;s_moveAssignCalls:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_moveAssignCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(data)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_ctorCalls;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>~<ref refid="class_complex_type" kindref="compound">ComplexType</ref>()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Dtor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_dtorCalls;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(other.m_data)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Copy<sp/>Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_copyCtorCalls;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(std::move(other.m_data))<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Move<sp/>Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_moveCtorCalls;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Copy<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data<sp/>=<sp/>other.m_data;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_copyAssignCalls;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>operator=(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Move<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data<sp/>=<sp/>std::move(other.m_data);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_moveAssignCalls;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Data()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_ctorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_dtorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_copyCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_moveCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_copyAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_moveAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>GetTrivialVector(<ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>v.PushBack(40);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>GetComplexVector(<ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>v.EmplaceBack(10);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>v.EmplaceBack(20);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>v.EmplaceBack(30);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>v.EmplaceBack(40);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">std::vector&lt;ComplexType&gt;<sp/>GetComplexStdVector()<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>v.reserve(16);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>v.emplace_back(10);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>v.emplace_back(20);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>v.emplace_back(30);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>v.emplace_back(40);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>Constructs)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>0u);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>InitializerConstruct)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{{10,<sp/>20,<sp/>30,<sp/>40,<sp/>50},<sp/>alloc};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>5u);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>20);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>30);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[3],<sp/>40);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[4],<sp/>50);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>NormalPush)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>3u);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>20);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>30);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>GrowPush)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{2,<sp/>alloc};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>3u);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetMaxSize(),<sp/>4u);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>20);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>30);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>GrowPushDirect)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{alloc};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>3u);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetMaxSize(),<sp/>4u);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>20);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>30);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>NormalPop)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>3u);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>v.PopBack();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>2u);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>NormalRemove)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>v.PushBack(40);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>4u);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>v.Remove(20);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>3u);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>30);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>40);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>v.Remove(30);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.GetSize(),<sp/>2u);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>40);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>NormalFind)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.FindFirst(10),<sp/>0);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.FindFirst(20),<sp/>1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.FindFirst(30),<sp/>2);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.FindFirst(99),<sp/>-1);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>Empty)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.IsEmpty(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.IsEmpty(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v.IsEmpty(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>IteratorLoop)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>v.PushBack(40);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>v.Begin();<sp/>i<sp/>!=<sp/>v.End();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(v[c],<sp/>*i);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>c++;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>IteratorCount)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>v.PushBack(40);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>countResult<sp/>=<sp/>std::count(v.Begin(),<sp/>v.End(),<sp/>count);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>ASSERT_EQ(countResult,<sp/>2);</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>IteratorSort)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>v.PushBack(40);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>v.PushBack(10);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>v.PushBack(30);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>v.PushBack(20);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>std::sort(v.Begin(),<sp/>v.End());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[0],<sp/>10);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[1],<sp/>20);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[2],<sp/>30);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>ASSERT_EQ(v[3],<sp/>40);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>ComplexTypeInitializerCtor)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v1<sp/>{{{10},<sp/>{20},<sp/>{30},<sp/>{40}},<sp/>alloc};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v1[0].Data());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v1[1].Data());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v1[2].Data());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v1[3].Data());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v1.GetSize());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v1.GetMaxSize());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v2{{{10},<sp/>{20},<sp/>{30},<sp/>{40}}};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>PushBackComplexTypesCopy)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{10};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{20};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d3<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{30};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d4<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{40};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>v.PushBack(d1);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>v.PushBack(d2);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>v.PushBack(d3);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>v.PushBack(d4);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v[3].Data());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o1<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{10};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o2<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{20};</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o3<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{30};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o4<sp/>=<sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>{40};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>vOriginal;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>vOriginal.reserve(16);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>vOriginal.push_back(o1);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>vOriginal.push_back(o2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>vOriginal.push_back(o3);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>vOriginal.push_back(o4);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>PushBackComplexTypesMove)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{10});</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{20});</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{30});</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{40});</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v[3].Data());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>vOriginal;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>vOriginal.reserve(16);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>vOriginal.push_back(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{10});</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>vOriginal.push_back(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{20});</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>vOriginal.push_back(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{30});</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>vOriginal.push_back(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{40});</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>PushBackComplexTypesMoveWithGrow)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{2,<sp/>alloc};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{10});</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{20});</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{30});</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>v.PushBack(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>{40});</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v[3].Data());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>test<sp/>doesn&apos;t<sp/>compare<sp/>with<sp/>std::vector<sp/>because<sp/>the<sp/>growth<sp/>is<sp/>highly<sp/>implementation<sp/>dependent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>doubles<sp/>the<sp/>capacity<sp/>but<sp/>MSVC<sp/>does<sp/>a<sp/>1.5<sp/>*<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>EmplaceBackComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>v.EmplaceBack(10);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>v.EmplaceBack(20);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>v.EmplaceBack(30);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>v.EmplaceBack(40);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v[3].Data());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>vOriginal;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>vOriginal.reserve(16);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(10);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(20);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(30);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(40);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>PopComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>v.EmplaceBack(10);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>v.EmplaceBack(20);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>v.EmplaceBack(30);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>v.EmplaceBack(40);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>v.PopBack();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>vOriginal;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>vOriginal.reserve(16);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(10);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(20);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(30);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>vOriginal.emplace_back(40);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>vOriginal.pop_back();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>CopyCtorTrivialTypes)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v1{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>v1.PushBack(10);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>v1.PushBack(20);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>v1.PushBack(30);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>v1.PushBack(40);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v2(v1);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0]);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1]);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2]);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3]);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>CopyCtorComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v1{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(10);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(20);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(30);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(40);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v2(v1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0].Data());</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1].Data());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2].Data());</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3].Data());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v2.GetSize());</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>ASSERT_EQ(16U,<sp/>v2.GetMaxSize());</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v1Original;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>v1Original.reserve(16);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(10);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(20);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(30);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(40);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v2Original(v1Original);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>MoveCtorTrivialTypes)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v2<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref>(GetTrivialVector(alloc));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0]);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1]);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2]);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>MoveCtorComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v2(GetComplexVector(alloc));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0].Data());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1].Data());</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2].Data());</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3].Data());</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v2.GetSize());</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>ASSERT_EQ(16U,<sp/>v2.GetMaxSize());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v2Original(GetComplexStdVector());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>CopyAssignTrivialTypes)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v1{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>v1.PushBack(10);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>v1.PushBack(20);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>v1.PushBack(30);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>v1.PushBack(40);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0]);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1]);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2]);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3]);</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>CopyAssignComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v1{16,<sp/>alloc};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(10);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(20);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(30);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>v1.EmplaceBack(40);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0].Data());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1].Data());</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2].Data());</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3].Data());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v2.GetSize());</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>ASSERT_EQ(16U,<sp/>v2.GetMaxSize());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v1Original;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>v1Original.reserve(16);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(10);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(20);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(30);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>v1Original.emplace_back(40);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v2Original<sp/>=<sp/>v1Original;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>MoveAssignTrivialTypes)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v2<sp/>=<sp/>GetTrivialVector(alloc);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0]);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1]);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2]);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3]);</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>MoveAssignComplexTypes)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v2<sp/>=<sp/>GetComplexVector(alloc);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>ASSERT_EQ(10,<sp/>v2[0].Data());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>ASSERT_EQ(20,<sp/>v2[1].Data());</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>ASSERT_EQ(30,<sp/>v2[2].Data());</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>ASSERT_EQ(40,<sp/>v2[3].Data());</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>ASSERT_EQ(4U,<sp/>v2.GetSize());</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>ASSERT_EQ(16U,<sp/>v2.GetMaxSize());</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>with<sp/>Ground<sp/>Truth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>std::vector&lt;ComplexType&gt;<sp/>v2Original<sp/>=<sp/>GetComplexStdVector();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>ContructWithArguments)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v{<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref>{4},<sp/>alloc,<sp/>5};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[0].Data());</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[1].Data());</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[2].Data());</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[3].Data());</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">TEST_F(<ref refid="class_vector_test" kindref="compound">VectorTest</ref>,<sp/>VectorOfVector)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>ComplexType::ResetStats();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedDtors<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedCopyAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveCtor<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expectedMoveAssign<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vector&lt;ComplexType&gt;</ref>&gt;<sp/>v{<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref>{2},<sp/>alloc,<sp/><ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref>{2},<sp/>alloc,<sp/>5};</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_ctorCalls,<sp/>expectedCtors);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_dtorCalls,<sp/>expectedDtors);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyCtorCalls,<sp/>expectedCopyCtor);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_copyAssignCalls,<sp/>expectedCopyAssign);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveCtorCalls,<sp/>expectedMoveCtor);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ComplexType::s_moveAssignCalls,<sp/>expectedMoveAssign);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[0][0].Data());</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[0][1].Data());</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[1][0].Data());</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>ASSERT_EQ(5,<sp/>v[1][1].Data());</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Containers/Test/Vector_test.cpp"/>
  </compounddef>
</doxygen>
