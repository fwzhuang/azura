<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_g_l_t_f_loader_8cpp" kind="file" language="C++">
    <compoundname>GLTFLoader.cpp</compoundname>
    <includes refid="_g_l_t_f_loader_8h" local="yes">AssetManager/GLTFLoader.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">sstream</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">GLTFSDK/IStreamReader.h</includes>
    <includes local="no">GLTFSDK/GLTFResourceReader.h</includes>
    <includes local="no">GLTFSDK/Deserialize.h</includes>
    <includes refid="_log_8h" local="yes">Log/Log.h</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <includes refid="_allocator_8h" local="yes">Memory/Allocator.h</includes>
    <incdepgraph>
      <node id="30">
        <label>Source/AssetManager/Src/GLTFLoader.cpp</label>
        <link refid="_g_l_t_f_loader_8cpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>functional</label>
      </node>
      <node id="33">
        <label>GLTFSDK/Document.h</label>
      </node>
      <node id="31">
        <label>AssetManager/GLTFLoader.h</label>
        <link refid="_g_l_t_f_loader_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>cassert</label>
      </node>
      <node id="42">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="38">
        <label>GLTFSDK/IStreamReader.h</label>
      </node>
      <node id="41">
        <label>vector</label>
      </node>
      <node id="37">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="40">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>GLTFSDK/Deserialize.h</label>
      </node>
      <node id="32">
        <label>Types.h</label>
      </node>
      <node id="34">
        <label>GLTFSDK/GLTFResourceReader.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_microsoft_1_1gl_t_f">Microsoft::glTF</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_g_l_t_f_loader_8cpp_1a4b53215a76bfca434f60d57424b667fb" prot="private" static="no" mutable="no">
        <type>filesystem::path</type>
        <definition>filesystem::path m_pathBase</definition>
        <argsstring></argsstring>
        <name>m_pathBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/AssetManager/Src/GLTFLoader.cpp" line="55" column="1" bodyfile="Source/AssetManager/Src/GLTFLoader.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;AssetManager/GLTFLoader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLTFSDK/IStreamReader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLTFSDK/GLTFResourceReader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLTFSDK/Deserialize.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Log/Log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/Allocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_microsoft_1_1gl_t_f" kindref="compound">Microsoft::glTF</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">filesystem<sp/>=<sp/>boost::filesystem;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>glTF<sp/>SDK<sp/>is<sp/>decoupled<sp/>from<sp/>all<sp/>file<sp/>I/O<sp/>by<sp/>the<sp/>IStreamReader<sp/>(and<sp/>IStreamWriter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>interface(s)<sp/>and<sp/>the<sp/>C++<sp/>stream-based<sp/>I/O<sp/>library.<sp/>This<sp/>allows<sp/>the<sp/>glTF<sp/>SDK<sp/>to<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sandboxed<sp/>environments,<sp/>such<sp/>as<sp/>WebAssembly<sp/>modules<sp/>and<sp/>UWP<sp/>apps,<sp/>where<sp/>any<sp/>file<sp/>I/O<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>platform<sp/>or<sp/>use-case<sp/>specific.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamReader<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IStreamReader<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>StreamReader(filesystem::path<sp/>pathBase)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_pathBase(std::move(pathBase))<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m_pathBase.has_root_path());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Resolves<sp/>the<sp/>relative<sp/>URIs<sp/>of<sp/>any<sp/>external<sp/>resources<sp/>declared<sp/>in<sp/>the<sp/>glTF<sp/>manifest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;std::istream&gt;<sp/>GetInputStream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>construct<sp/>a<sp/>valid<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>filename<sp/>argument<sp/>will<sp/>be<sp/>encoded<sp/>as<sp/>UTF-8<sp/>so<sp/>use<sp/>filesystem::u8path<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>correctly<sp/>construct<sp/>a<sp/>path<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Generate<sp/>an<sp/>absolute<sp/>path<sp/>by<sp/>concatenating<sp/>m_pathBase<sp/>with<sp/>the<sp/>specified<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>path.<sp/>The<sp/>filesystem::operator/<sp/>uses<sp/>the<sp/>platform&apos;s<sp/>preferred<sp/>directory<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>appropriate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Always<sp/>open<sp/>the<sp/>file<sp/>stream<sp/>in<sp/>binary<sp/>mode.<sp/>The<sp/>glTF<sp/>SDK<sp/>will<sp/>handle<sp/>any<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>encoding<sp/>issues<sp/>for<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamPath<sp/>=<sp/>m_pathBase<sp/>/<sp/>filename;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/><sp/><sp/><sp/><sp/>=<sp/>std::make_shared&lt;std::ifstream&gt;(streamPath.c_str(),<sp/>std::ios_base::binary);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>stream<sp/>has<sp/>no<sp/>errors<sp/>and<sp/>is<sp/>ready<sp/>for<sp/>I/O<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stream<sp/>||<sp/>!(*stream))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>a<sp/>valid<sp/>input<sp/>stream<sp/>for<sp/>uri:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>filesystem::path<sp/>m_pathBase;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">GLTFMeshInterface::GLTFMeshInterface(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>manifest,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>Microsoft::glTF::GLTFResourceReader&gt;<sp/>resourceReader)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>:<sp/>m_resourceReader(std::move(resourceReader)),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m_document(Deserialize(manifest))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">std::vector&lt;float&gt;<sp/>GLTFMeshInterface::GetPositionBuffer(U32<sp/>meshId,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>meshPrimitive,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32&amp;<sp/>bufferSize,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32&amp;<sp/>count)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>primitive<sp/>=<sp/>GetMeshPrimitive(GetMesh(meshId),<sp/>meshPrimitive);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Accessor&amp;<sp/>accessor<sp/>=<sp/>m_document.accessors.Get(primitive.GetAttributeAccessorId(</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>m_resourceReader-&gt;ReadBinaryData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(m_document,<sp/>accessor);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>count<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U32(accessor.count);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>bufferSize<sp/>=<sp/>U32(data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">std::vector&lt;float&gt;<sp/>GLTFMeshInterface::</highlight></codeline>
<codeline lineno="84"><highlight class="normal">GetNormalBuffer(U32<sp/>meshId,<sp/>U32<sp/>meshPrimitive,<sp/>U32&amp;<sp/>bufferSize,<sp/>U32&amp;<sp/>count)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>primitive<sp/>=<sp/>GetMeshPrimitive(GetMesh(meshId),<sp/>meshPrimitive);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Accessor&amp;<sp/>accessor<sp/>=<sp/>m_document.accessors.Get(primitive.GetAttributeAccessorId(</highlight><highlight class="stringliteral">&quot;NORMAL&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>m_resourceReader-&gt;ReadBinaryData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(m_document,<sp/>accessor);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>count<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U32(accessor.count);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>bufferSize<sp/>=<sp/>U32(data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">std::vector&lt;float&gt;<sp/>GLTFMeshInterface::GetUVBuffer(U32<sp/>meshId,<sp/>U32<sp/>meshPrimitive,<sp/>U32&amp;<sp/>bufferSize,<sp/>U32&amp;<sp/>count)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>primitive<sp/>=<sp/>GetMeshPrimitive(GetMesh(meshId),<sp/>meshPrimitive);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Accessor&amp;<sp/>accessor<sp/>=<sp/>m_document.accessors.Get(primitive.GetAttributeAccessorId(</highlight><highlight class="stringliteral">&quot;TEXCOORD_0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>m_resourceReader-&gt;ReadBinaryData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(m_document,<sp/>accessor);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>count<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U32(accessor.count);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>bufferSize<sp/>=<sp/>U32(data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">std::vector&lt;U32&gt;<sp/>GLTFMeshInterface::GetIndexBuffer(U32<sp/>meshId,<sp/>U32<sp/>meshPrimitive,<sp/>U32&amp;<sp/>bufferSize,<sp/>U32&amp;<sp/>count)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>primitive<sp/>=<sp/>GetMeshPrimitive(GetMesh(meshId),<sp/>meshPrimitive);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Accessor&amp;<sp/>accessor<sp/>=<sp/>m_document.accessors.Get(primitive.indicesAccessorId);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;U32&gt;<sp/>data<sp/>=<sp/>[&amp;]()</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(accessor.componentType<sp/>==<sp/>COMPONENT_UNSIGNED_SHORT)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u16Data<sp/>=<sp/>m_resourceReader-&gt;ReadBinaryData&lt;U16&gt;(m_document,<sp/>accessor);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;U32&gt;<sp/>u32Data;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u32Data.reserve(u16Data.size());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>:<sp/>u16Data)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u32Data.push_back(U32(value));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u32Data;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resourceReader-&gt;ReadBinaryData&lt;U32&gt;(m_document,<sp/>accessor);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>U32(accessor.count);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>bufferSize<sp/>=<sp/>U32(data.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::glTF::Mesh&amp;<sp/>GLTFMeshInterface::GetMesh(U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_document.meshes[idx];</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::glTF::MeshPrimitive&amp;<sp/>GLTFMeshInterface::GetMeshPrimitive(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::glTF::Mesh&amp;<sp/>mesh,<sp/>U32<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mesh.primitives[idx];</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">GLTFMeshInterface<sp/>GLTFLoader::LoadFromJSON(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>assetName,<sp/>AssetLocation<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>UNUSED(location);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>UNUSED(log);<sp/></highlight><highlight class="comment">//<sp/>Release<sp/>Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>filesystem::path<sp/>filePath<sp/>=<sp/>filesystem::current_path()<sp/>/<sp/>filesystem::</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path(</highlight><highlight class="stringliteral">&quot;Meshes/&quot;</highlight><highlight class="normal"><sp/>+<sp/>assetName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>assetName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.gltf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>LOG_DBG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Loading<sp/>Mesh:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>filePath.c_str());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>streamReader<sp/>=<sp/>std::make_unique&lt;StreamReader&gt;(filePath.parent_path());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gltfStream<sp/>=<sp/>streamReader-&gt;GetInputStream(assetName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.gltf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resourceReader<sp/><sp/><sp/>=<sp/>std::make_unique&lt;GLTFResourceReader&gt;(std::move(streamReader));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>manifestStream;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>glTF<sp/>file<sp/>into<sp/>a<sp/>string<sp/>using<sp/>a<sp/>std::stringstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>manifestStream<sp/>&lt;&lt;<sp/>gltfStream-&gt;rdbuf();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>manifest<sp/>=<sp/>manifestStream.str();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GLTFMeshInterface(manifest,<sp/>std::move(resourceReader));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/AssetManager/Src/GLTFLoader.cpp"/>
  </compounddef>
</doxygen>
