<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_power_bench_2_inc_2_power_bench_2_utils_8h" kind="file" language="C++">
    <compoundname>Utils.h</compoundname>
    <includes local="no">random</includes>
    <includes local="no">vector</includes>
    <includedby refid="_warper_8cpp" local="yes">Source/Dibella/Src/Core/Warper.cpp</includedby>
    <includedby refid="_matrix_multiplication_8h" local="yes">Source/PowerBench/Inc/PowerBench/MatrixMultiplication.h</includedby>
    <includedby refid="_matrix_unroll_8h" local="yes">Source/PowerBench/Inc/PowerBench/MatrixUnroll.h</includedby>
    <includedby refid="_matrix_unroll_8cpp" local="yes">Source/PowerBench/Src/MatrixUnroll.cpp</includedby>
    <incdepgraph>
      <node id="4859">
        <label>Source/PowerBench/Inc/PowerBench/Utils.h</label>
        <link refid="_power_bench_2_inc_2_power_bench_2_utils_8h"/>
        <childnode refid="4860" relation="include">
        </childnode>
        <childnode refid="4861" relation="include">
        </childnode>
      </node>
      <node id="4860">
        <label>random</label>
      </node>
      <node id="4861">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4862">
        <label>Source/PowerBench/Inc/PowerBench/Utils.h</label>
        <link refid="_power_bench_2_inc_2_power_bench_2_utils_8h"/>
        <childnode refid="4863" relation="include">
        </childnode>
        <childnode refid="4864" relation="include">
        </childnode>
      </node>
      <node id="4864">
        <label>Source/PowerBench/Inc/PowerBench/MatrixUnroll.h</label>
        <link refid="_matrix_unroll_8h_source"/>
      </node>
      <node id="4863">
        <label>Source/PowerBench/Inc/PowerBench/MatrixMultiplication.h</label>
        <link refid="_matrix_multiplication_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespace_utils">Utils</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_power_bench_2_inc_2_power_bench_2_utils_8h_1a6fb533d5d34911a48798bef60b073ecf" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>using TestMatrix =  std::vector&lt;std::vector&lt;double&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TestMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/PowerBench/Inc/PowerBench/Utils.h" line="6" column="1" bodyfile="Source/PowerBench/Inc/PowerBench/Utils.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestMatrix<sp/>=<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_utils" kindref="compound">Utils</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal">constexpr<sp/>uint32_t<sp/>CACHE_LINE_BYTES<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">constexpr<sp/>uint32_t<sp/>ELEMENTS_PER_LINE<sp/>=<sp/>CACHE_LINE_BYTES<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BIGGER_THAN_CACHE<sp/>=<sp/>8<sp/>*<sp/>1024<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g_dummyVec<sp/>=<sp/>std::vector&lt;double&gt;(BIGGER_THAN_CACHE);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MATRIX_VAL_MIN<sp/>=<sp/>-5.0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MATRIX_VAL_MAX<sp/>=<sp/>5.0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearCache()<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BIGGER_THAN_CACHE;<sp/>i++)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>g_dummyVec[i]<sp/>=<sp/>rand();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateRandomMatrix(int64_t<sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::mt19937<sp/>mt(rd());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>randomValue(MATRIX_VAL_MIN,<sp/>MATRIX_VAL_MAX);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[i<sp/>*<sp/>size<sp/>+<sp/>j]<sp/>=<sp/>randomValue(mt);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateEmpty(int64_t<sp/>size,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[i<sp/>*<sp/>size<sp/>+<sp/>j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Utils</highlight></codeline>
    </programlisting>
    <location file="Source/PowerBench/Inc/PowerBench/Utils.h"/>
  </compounddef>
</doxygen>
