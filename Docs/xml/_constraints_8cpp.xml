<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_constraints_8cpp" kind="file" language="C++">
    <compoundname>Constraints.cpp</compoundname>
    <includes refid="_constraints_8h" local="yes">Physics/PBD/Cloth/Constraints.h</includes>
    <includes local="no">array</includes>
    <incdepgraph>
      <node id="5666">
        <label>Source/Physics/Src/PBD/Cloth/Constraints.cpp</label>
        <link refid="_constraints_8cpp"/>
        <childnode refid="5667" relation="include">
        </childnode>
        <childnode refid="5679" relation="include">
        </childnode>
      </node>
      <node id="5677">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="5678" relation="include">
        </childnode>
        <childnode refid="5668" relation="include">
        </childnode>
      </node>
      <node id="5672">
        <label>functional</label>
      </node>
      <node id="5673">
        <label>iterator</label>
      </node>
      <node id="5675">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="5672" relation="include">
        </childnode>
        <childnode refid="5668" relation="include">
        </childnode>
        <childnode refid="5676" relation="include">
        </childnode>
      </node>
      <node id="5670">
        <label>cassert</label>
      </node>
      <node id="5676">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="5674">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="5670" relation="include">
        </childnode>
        <childnode refid="5671" relation="include">
        </childnode>
        <childnode refid="5675" relation="include">
        </childnode>
        <childnode refid="5668" relation="include">
        </childnode>
      </node>
      <node id="5669">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="5670" relation="include">
        </childnode>
        <childnode refid="5671" relation="include">
        </childnode>
        <childnode refid="5672" relation="include">
        </childnode>
        <childnode refid="5673" relation="include">
        </childnode>
        <childnode refid="5674" relation="include">
        </childnode>
        <childnode refid="5675" relation="include">
        </childnode>
        <childnode refid="5668" relation="include">
        </childnode>
        <childnode refid="5676" relation="include">
        </childnode>
      </node>
      <node id="5679">
        <label>array</label>
      </node>
      <node id="5668">
        <label>Types.h</label>
      </node>
      <node id="5678">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="5671">
        <label>cstring</label>
      </node>
      <node id="5667">
        <label>Physics/PBD/Cloth/Constraints.h</label>
        <link refid="_constraints_8h_source"/>
        <childnode refid="5668" relation="include">
        </childnode>
        <childnode refid="5669" relation="include">
        </childnode>
        <childnode refid="5677" relation="include">
        </childnode>
        <childnode refid="5679" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_physics">Azura::Physics</innernamespace>
    <innernamespace refid="namespace_azura_1_1_physics_1_1_p_b_d">Azura::Physics::PBD</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Physics/PBD/Cloth/Constraints.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Physics<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">PBD<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ComputeBendingC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>vertices,<sp/>U32<sp/>dest1,<sp/>U32<sp/>dest2,<sp/>U32<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>v1<sp/>=<sp/>vertices[dest1]<sp/>-<sp/>vertices[source];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>v2<sp/>=<sp/>vertices[dest2]<sp/>-<sp/>vertices[source];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f::DotProduct(v1,<sp/>v2)<sp/>/<sp/>Vector3f::CrossProduct(v1,<sp/>v2).Length();</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">DistanceConstraint::DistanceConstraint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x1,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x2,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restLength)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>:<sp/>m_restLength(restLength)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>m_points[0]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>m_points[1]<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DistanceConstraint::Compute(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>currentPoints,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;float&gt;&amp;<sp/>currentInvMass,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Containers::Vector&lt;ConstraintPointDelta&gt;&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexA<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexB<sp/>=<sp/>m_points[1].m_dataIdx;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassSum<sp/><sp/><sp/><sp/><sp/>=<sp/>currentInvMass[indexA]<sp/>+<sp/>currentInvMass[indexB];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor1<sp/>=<sp/>currentInvMass[indexA]<sp/>/<sp/>invMassSum;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor2<sp/>=<sp/>currentInvMass[indexB]<sp/>/<sp/>invMassSum;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>x12<sp/>=<sp/>currentPoints[indexA]<sp/>-<sp/>currentPoints[indexB];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>result[0]<sp/>=<sp/>ConstraintPointDelta{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>indexA,<sp/>((stiffness<sp/>*<sp/>-1.0f<sp/>*<sp/>invMassFactor1<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized())</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>result[1]<sp/>=<sp/>ConstraintPointDelta{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>indexB,<sp/>((stiffness<sp/>*<sp/>invMassFactor2<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DistanceConstraint::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceConstraint&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(m_points[0].m_dataIdx,<sp/>m_points[1].m_dataIdx)<sp/>&lt;<sp/>std::tie(rhs.m_points[0].m_dataIdx,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.m_points[1].m_dataIdx);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DistanceConstraint::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DistanceConstraint&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexA<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexB<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>rhsIndexA<sp/>=<sp/>rhs.m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>rhsIndexB<sp/>=<sp/>rhs.m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((indexA<sp/>==<sp/>rhsIndexA)<sp/>&amp;&amp;<sp/>(indexB<sp/>==<sp/>rhsIndexB))<sp/>||<sp/>((indexA<sp/>==<sp/>rhsIndexB)<sp/>&amp;&amp;<sp/>(indexB<sp/>==<sp/>rhsIndexA));</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">LongRangeConstraint::LongRangeConstraint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x1,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x2,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>restLength)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>:<sp/>m_restLength(restLength)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>m_points[0]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_points[1]<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LongRangeConstraint::Compute(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>currentPoints,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;float&gt;&amp;<sp/>currentInvMass,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>Containers::Vector&lt;ConstraintPointDelta&gt;&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexA<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexB<sp/>=<sp/>m_points[1].m_dataIdx;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassSum<sp/><sp/><sp/><sp/><sp/>=<sp/>currentInvMass[indexA]<sp/>+<sp/>currentInvMass[indexB];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor1<sp/>=<sp/>currentInvMass[indexA]<sp/>/<sp/>invMassSum;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>invMassFactor2<sp/>=<sp/>currentInvMass[indexB]<sp/>/<sp/>invMassSum;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>x12<sp/>=<sp/>currentPoints[indexA]<sp/>-<sp/>currentPoints[indexB];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>result[0]<sp/>=<sp/>ConstraintPointDelta{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>indexA,<sp/>((stiffness<sp/>*<sp/>-1.0f<sp/>*<sp/>invMassFactor1<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized())</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>result[1]<sp/>=<sp/>ConstraintPointDelta{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>indexB,<sp/>((stiffness<sp/>*<sp/>invMassFactor2<sp/>*<sp/>(x12.Length()<sp/>-<sp/>m_restLength))<sp/>*<sp/>x12.Normalized())</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LongRangeConstraint::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LongRangeConstraint&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tie(m_points[0].m_dataIdx,<sp/>m_points[1].m_dataIdx)<sp/>&lt;<sp/>std::tie(rhs.m_points[0].m_dataIdx,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.m_points[1].m_dataIdx);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LongRangeConstraint::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LongRangeConstraint&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexA<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>indexB<sp/>=<sp/>m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>rhsIndexA<sp/>=<sp/>rhs.m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>rhsIndexB<sp/>=<sp/>rhs.m_points[0].m_dataIdx;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((indexA<sp/>==<sp/>rhsIndexA)<sp/>&amp;&amp;<sp/>(indexB<sp/>==<sp/>rhsIndexB))<sp/>||<sp/>((indexA<sp/>==<sp/>rhsIndexB)<sp/>&amp;&amp;<sp/>(indexB<sp/>==<sp/>rhsIndexA));</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">BendingConstraint::BendingConstraint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>currentPoints,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x0,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x1,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x2,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintPoint&amp;<sp/>x3)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>m_points[0]<sp/>=<sp/>x0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>m_points[1]<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>m_points[2]<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>m_points[3]<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c01<sp/>=<sp/>ComputeBendingC(currentPoints,<sp/>x2.m_dataIdx,<sp/>x0.m_dataIdx,<sp/>x1.m_dataIdx);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c04<sp/>=<sp/>ComputeBendingC(currentPoints,<sp/>x3.m_dataIdx,<sp/>x0.m_dataIdx,<sp/>x1.m_dataIdx);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c03<sp/>=<sp/>ComputeBendingC(currentPoints,<sp/>x3.m_dataIdx,<sp/>x1.m_dataIdx,<sp/>x0.m_dataIdx);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c02<sp/>=<sp/>ComputeBendingC(currentPoints,<sp/>x2.m_dataIdx,<sp/>x1.m_dataIdx,<sp/>x0.m_dataIdx);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aValue<sp/>=<sp/>c01<sp/>+<sp/>c04;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bValue<sp/>=<sp/>c02<sp/>+<sp/>c03;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cValue<sp/>=<sp/>-c01<sp/>-<sp/>c02;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dValue<sp/>=<sp/>-c03<sp/>-<sp/>c04;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>s1<sp/>=<sp/>currentPoints[x2.m_dataIdx]<sp/>-<sp/>currentPoints[x1.m_dataIdx];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>s2<sp/>=<sp/>currentPoints[x0.m_dataIdx]<sp/>-<sp/>currentPoints[x1.m_dataIdx];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Area0<sp/>=<sp/>Vector3f::CrossProduct(s1,<sp/>s2).Length()<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Triangle<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>s3<sp/>=<sp/>currentPoints[x3.m_dataIdx]<sp/>-<sp/>currentPoints[x1.m_dataIdx];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>s4<sp/>=<sp/>currentPoints[x0.m_dataIdx]<sp/>-<sp/>currentPoints[x1.m_dataIdx];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Area1<sp/>=<sp/>Vector3f::CrossProduct(s3,<sp/>s4).Length()<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>m_Q<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f(0.0f);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>m_Q.GetColumn(0)<sp/>=<sp/>Vector4f(aValue<sp/>*<sp/>aValue,<sp/>bValue<sp/>*<sp/>aValue,<sp/>cValue<sp/>*<sp/>aValue,<sp/>dValue<sp/>*<sp/>aValue);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>m_Q.GetColumn(1)<sp/>=<sp/>Vector4f(aValue<sp/>*<sp/>bValue,<sp/>bValue<sp/>*<sp/>bValue,<sp/>cValue<sp/>*<sp/>bValue,<sp/>dValue<sp/>*<sp/>bValue);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>m_Q.GetColumn(2)<sp/>=<sp/>Vector4f(aValue<sp/>*<sp/>cValue,<sp/>bValue<sp/>*<sp/>cValue,<sp/>cValue<sp/>*<sp/>cValue,<sp/>dValue<sp/>*<sp/>cValue);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>m_Q.GetColumn(3)<sp/>=<sp/>Vector4f(aValue<sp/>*<sp/>dValue,<sp/>bValue<sp/>*<sp/>dValue,<sp/>cValue<sp/>*<sp/>dValue,<sp/>dValue<sp/>*<sp/>dValue);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>m_Q<sp/>=<sp/>(3.0f<sp/>/<sp/>(Area0<sp/>+<sp/>Area1))<sp/>*<sp/>m_Q;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BendingConstraint::Compute(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stiffness,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>currentPoints,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;float&gt;&amp;<sp/>currentInvMass,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Containers::Vector&lt;ConstraintPointDelta&gt;&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>std::array&lt;U32,<sp/>4&gt;<sp/>indices<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>m_points[0].m_dataIdx,<sp/>m_points[1].m_dataIdx,<sp/>m_points[2].m_dataIdx,<sp/>m_points[3].m_dataIdx</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;float,<sp/>4&gt;<sp/>invMasses<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>currentInvMass[indices[0]],<sp/>currentInvMass[indices[1]],<sp/>currentInvMass[indices[2]],<sp/>currentInvMass[indices[3]]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cX<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idy<sp/>=<sp/>0;<sp/>idy<sp/>&lt;<sp/>4;<sp/>++idy)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cX<sp/>+=<sp/>m_Q(idx,<sp/>idy)<sp/>*<sp/>Vector3f::DotProduct(currentPoints[indices[idx]],<sp/>currentPoints[indices[idy]]);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>cX<sp/>=<sp/>cX<sp/>/<sp/>2.0f;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>std::array&lt;Vector3f,<sp/>4&gt;<sp/>partialDeltas<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sum<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>partialDeltas[idx]<sp/>=<sp/>ComputeBendingGradient(currentPoints,<sp/>m_Q,<sp/>indices,<sp/>idx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(invMasses[idx]<sp/>*<sp/>Vector3f::DotProduct(partialDeltas[idx],<sp/>partialDeltas[idx]));<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(sum)<sp/>&gt;<sp/>EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>4;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[idx]<sp/>=<sp/>ConstraintPointDelta{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices[idx],<sp/>((stiffness<sp/>*<sp/>-1.0f<sp/>*<sp/>cX<sp/>*<sp/>invMasses[idx]<sp/>*<sp/>partialDeltas[idx])<sp/>/<sp/>sum)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">Vector3f<sp/>BendingConstraint::ComputeBendingGradient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;Vector3f&gt;&amp;<sp/>currentPositions,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f&amp;<sp/>Q,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;U32,<sp/>4&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>rowI)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>Vector3f<sp/>sum<sp/>=<sp/>Vector3f(0.0f);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idj<sp/>=<sp/>0;<sp/>idj<sp/>&lt;<sp/>4;<sp/>++idj)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>Q(rowI,<sp/>idj)<sp/>*<sp/>currentPositions[indices[idj]];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>PBD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Physics/Src/PBD/Cloth/Constraints.cpp"/>
  </compounddef>
</doxygen>
