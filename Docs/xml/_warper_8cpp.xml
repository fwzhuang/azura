<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_warper_8cpp" kind="file" language="C++">
    <compoundname>Warper.cpp</compoundname>
    <includes refid="_warper_8h" local="yes">Warper.h</includes>
    <includes local="yes">Constants.h</includes>
    <includes local="yes">Utils.h</includes>
    <incdepgraph>
      <node id="5057">
        <label>mathfu/vector.h</label>
      </node>
      <node id="5058">
        <label>Constants.h</label>
      </node>
      <node id="5050">
        <label>Source/Dibella/Src/Core/Warper.cpp</label>
        <link refid="_warper_8cpp"/>
        <childnode refid="5051" relation="include">
        </childnode>
        <childnode refid="5058" relation="include">
        </childnode>
        <childnode refid="5059" relation="include">
        </childnode>
      </node>
      <node id="5051">
        <label>Warper.h</label>
        <link refid="_warper_8h_source"/>
        <childnode refid="5052" relation="include">
        </childnode>
      </node>
      <node id="5055">
        <label>string</label>
      </node>
      <node id="5052">
        <label>Types.h</label>
        <link refid="_dibella_2_inc_2_core_2_types_8h_source"/>
        <childnode refid="5053" relation="include">
        </childnode>
        <childnode refid="5054" relation="include">
        </childnode>
        <childnode refid="5055" relation="include">
        </childnode>
        <childnode refid="5056" relation="include">
        </childnode>
        <childnode refid="5057" relation="include">
        </childnode>
      </node>
      <node id="5053">
        <label>ToolsCore.h</label>
      </node>
      <node id="5054">
        <label>cstddef</label>
      </node>
      <node id="5056">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="5059">
        <label>Utils.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_dibella">Dibella</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Warper.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Constants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_dibella" kindref="compound">Dibella</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">Vector3f<sp/>Warper::SquareToDiskUniform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>radius<sp/>=<sp/>std::sqrt(sample.x);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>angle<sp/><sp/>=<sp/>2.0f<sp/>*<sp/>PI<sp/>*<sp/>sample.y;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(radius<sp/>*<sp/>std::cos(angle),<sp/>radius<sp/>*<sp/>std::sin(angle),<sp/>0);</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">Vector3f<sp/>Warper::SquareToDiskConcentric(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>Float<sp/>radius,<sp/>angle;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>a<sp/>=<sp/>2.0f<sp/>*<sp/>sample.x<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>b<sp/>=<sp/>2.0f<sp/>*<sp/>sample.y<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>-b)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/><sp/>=<sp/>(PI<sp/>/<sp/>4.0f)<sp/>*<sp/>(b<sp/>/<sp/>a);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/><sp/>=<sp/>(PI<sp/>/<sp/>4.0f)<sp/>*<sp/>(2.0f<sp/>-<sp/>(a<sp/>/<sp/>b));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>-a;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/><sp/>=<sp/>(PI<sp/>/<sp/>4.0f)<sp/>*<sp/>(4.0f<sp/>+<sp/>(b<sp/>/<sp/>a));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>(PI<sp/>/<sp/>4.0f)<sp/>*<sp/>(6.0f<sp/>-<sp/>(a<sp/>/<sp/>b));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(radius<sp/>*<sp/>std::cos(angle),<sp/>radius<sp/>*<sp/>std::sin(angle),<sp/>0);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">Float<sp/>Warper::SquareToDiskPDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INV_PI;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">Vector3f<sp/>Warper::SquareToSphereUniform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>finalZ<sp/>=<sp/>1.0f<sp/>-<sp/>2.0f<sp/>*<sp/>sample.x;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>radius<sp/>=<sp/>std::sqrt(std::fmax(0.0f,<sp/>1.0f<sp/>-<sp/>finalZ<sp/>*<sp/>finalZ));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>angle<sp/><sp/>=<sp/>2.0f<sp/>*<sp/>PI<sp/>*<sp/>sample.y;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(radius<sp/>*<sp/>std::cos(angle),<sp/>radius<sp/>*<sp/>std::sin(angle),<sp/>finalZ);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">Float<sp/>Warper::SquareToSphereUniformPDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INV4_PI;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">Vector3f<sp/><ref refid="class_dibella_1_1_warper_1a136c5617627a7a910179f4905c0bd6dc" kindref="member">Warper::SquareToSphereCapUniform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>thetaMin)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>capAngle<sp/>=<sp/>thetaMin;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>ratio<sp/><sp/><sp/><sp/>=<sp/>(360.0f<sp/>-<sp/>capAngle)<sp/>/<sp/>360.0f;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>finalZ<sp/>=<sp/>((1.0f<sp/>-<sp/>ratio)<sp/>*<sp/>sample.x)<sp/>+<sp/>ratio;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>radius<sp/>=<sp/>std::sqrt(std::fmax(0.0f,<sp/>1.0f<sp/>-<sp/>finalZ<sp/>*<sp/>finalZ));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>angle<sp/><sp/>=<sp/>2.0f<sp/>*<sp/>PI<sp/>*<sp/>sample.y;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(radius<sp/>*<sp/>std::cos(angle),<sp/>radius<sp/>*<sp/>std::sin(angle),<sp/>finalZ);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">Float<sp/>Warper::SquareToSphereCapUniformPDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>sample,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>thetaMin)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2pi<sp/>*<sp/>(1<sp/>-<sp/>cos(theta))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Float<sp/>sa<sp/>=<sp/>(1.0<sp/>-<sp/>std::cos(ToRadians(180.0f<sp/>-<sp/>thetaMin)));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5f<sp/>*<sp/>INV4_PI<sp/>*<sp/>1.0<sp/>/<sp/>(sa);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">Vector3f<sp/>Warper::SquareToHemisphereUniform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>finalZ<sp/>=<sp/>sample.x;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>radius<sp/>=<sp/>std::sqrt(std::fmax(0.0f,<sp/>1.0f<sp/>-<sp/>finalZ<sp/>*<sp/>finalZ));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>angle<sp/><sp/>=<sp/>2.0f<sp/>*<sp/>PI<sp/>*<sp/>sample.y;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(radius<sp/>*<sp/>std::cos(angle),<sp/>radius<sp/>*<sp/>std::sin(angle),<sp/>finalZ);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">Float<sp/>Warper::SquareToHemisphereUniformPDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INV2_PI;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">Vector3f<sp/>Warper::SquareToHemisphereCosine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>val<sp/>=<sp/>SquareToDiskConcentric(sample);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Float<sp/>finalZ<sp/>=<sp/>sqrt(std::fmax(0.0f,<sp/>1.0f<sp/>-<sp/>val.x<sp/>*<sp/>val.x<sp/>-<sp/>val.y<sp/>*<sp/>val.y));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3f(val.x,<sp/>val.y,<sp/>finalZ);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">Float<sp/>Warper::SquareToHemisphereCosinePDF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INV_PI<sp/>*<sp/>std::abs(sample.z);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Dibella</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Dibella/Src/Core/Warper.cpp"/>
  </compounddef>
</doxygen>
