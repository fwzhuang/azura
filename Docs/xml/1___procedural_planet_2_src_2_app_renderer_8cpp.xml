<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="1___procedural_planet_2_src_2_app_renderer_8cpp" kind="file" language="C++">
    <compoundname>AppRenderer.cpp</compoundname>
    <includes refid="1___procedural_planet_2_inc_2_procedural_planet_2_app_renderer_8h" local="yes">ProceduralPlanet/AppRenderer.h</includes>
    <includes refid="_raw_storage_format_8h" local="yes">Core/RawStorageFormat.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <includes refid="_icosphere_8h" local="yes">Math/Icosphere.h</includes>
    <includes refid="_pool_primitives_8h" local="yes">Generic/PoolPrimitives.h</includes>
    <incdepgraph>
      <node id="6195">
        <label>Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6191" relation="include">
        </childnode>
        <childnode refid="6185" relation="include">
        </childnode>
      </node>
      <node id="6191">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6192" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6168">
        <label>functional</label>
      </node>
      <node id="6169">
        <label>iterator</label>
      </node>
      <node id="6180">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6198">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6199" relation="include">
        </childnode>
        <childnode refid="6189" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6161">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6162" relation="include">
        </childnode>
        <childnode refid="6165" relation="include">
        </childnode>
        <childnode refid="6173" relation="include">
        </childnode>
        <childnode refid="6174" relation="include">
        </childnode>
        <childnode refid="6175" relation="include">
        </childnode>
        <childnode refid="6183" relation="include">
        </childnode>
      </node>
      <node id="6175">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6163" relation="include">
        </childnode>
        <childnode refid="6176" relation="include">
        </childnode>
        <childnode refid="6177" relation="include">
        </childnode>
        <childnode refid="6178" relation="include">
        </childnode>
        <childnode refid="6179" relation="include">
        </childnode>
      </node>
      <node id="6190">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6171">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6168" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6172" relation="include">
        </childnode>
      </node>
      <node id="6181">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6166">
        <label>cassert</label>
      </node>
      <node id="6178">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6174">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6165" relation="include">
        </childnode>
        <childnode refid="6162" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6175" relation="include">
        </childnode>
        <childnode refid="6180" relation="include">
        </childnode>
        <childnode refid="6181" relation="include">
        </childnode>
        <childnode refid="6182" relation="include">
        </childnode>
        <childnode refid="6179" relation="include">
        </childnode>
      </node>
      <node id="6189">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6190" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6199">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6166" relation="include">
        </childnode>
        <childnode refid="6190" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6172" relation="include">
        </childnode>
      </node>
      <node id="6172">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6182">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6162">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6163" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6179">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6185">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6163">
        <label>tuple</label>
      </node>
      <node id="6170">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6166" relation="include">
        </childnode>
        <childnode refid="6167" relation="include">
        </childnode>
        <childnode refid="6171" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6188">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6171" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6158">
        <label>Source/Samples/1_ProceduralPlanet/Src/AppRenderer.cpp</label>
        <link refid="1___procedural_planet_2_src_2_app_renderer_8cpp"/>
        <childnode refid="6159" relation="include">
        </childnode>
        <childnode refid="6175" relation="include">
        </childnode>
        <childnode refid="6196" relation="include">
        </childnode>
        <childnode refid="6197" relation="include">
        </childnode>
        <childnode refid="6198" relation="include">
        </childnode>
        <childnode refid="6188" relation="include">
        </childnode>
        <childnode refid="6200" relation="include">
        </childnode>
        <childnode refid="6201" relation="include">
        </childnode>
        <childnode refid="6203" relation="include">
        </childnode>
      </node>
      <node id="6187">
        <label>vector</label>
      </node>
      <node id="6165">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6166" relation="include">
        </childnode>
        <childnode refid="6167" relation="include">
        </childnode>
        <childnode refid="6168" relation="include">
        </childnode>
        <childnode refid="6169" relation="include">
        </childnode>
        <childnode refid="6170" relation="include">
        </childnode>
        <childnode refid="6171" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6172" relation="include">
        </childnode>
      </node>
      <node id="6159">
        <label>ProceduralPlanet/AppRenderer.h</label>
        <link refid="1___procedural_planet_2_inc_2_procedural_planet_2_app_renderer_8h_source"/>
        <childnode refid="6160" relation="include">
        </childnode>
        <childnode refid="6161" relation="include">
        </childnode>
        <childnode refid="6184" relation="include">
        </childnode>
        <childnode refid="6188" relation="include">
        </childnode>
        <childnode refid="6189" relation="include">
        </childnode>
        <childnode refid="6186" relation="include">
        </childnode>
        <childnode refid="6191" relation="include">
        </childnode>
        <childnode refid="6193" relation="include">
        </childnode>
        <childnode refid="6194" relation="include">
        </childnode>
      </node>
      <node id="6186">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6187" relation="include">
        </childnode>
      </node>
      <node id="6202">
        <label>Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6175" relation="include">
        </childnode>
      </node>
      <node id="6203">
        <label>Generic/PoolPrimitives.h</label>
        <link refid="_pool_primitives_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6173" relation="include">
        </childnode>
      </node>
      <node id="6173">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6165" relation="include">
        </childnode>
        <childnode refid="6174" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6175" relation="include">
        </childnode>
      </node>
      <node id="6200">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="6191" relation="include">
        </childnode>
      </node>
      <node id="6176">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6164">
        <label>Types.h</label>
      </node>
      <node id="6196">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6171" relation="include">
        </childnode>
        <childnode refid="6161" relation="include">
        </childnode>
        <childnode refid="6193" relation="include">
        </childnode>
      </node>
      <node id="6192">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6184">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6168" relation="include">
        </childnode>
        <childnode refid="6174" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6161" relation="include">
        </childnode>
        <childnode refid="6185" relation="include">
        </childnode>
        <childnode refid="6186" relation="include">
        </childnode>
      </node>
      <node id="6201">
        <label>Math/Icosphere.h</label>
        <link refid="_icosphere_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6202" relation="include">
        </childnode>
        <childnode refid="6191" relation="include">
        </childnode>
        <childnode refid="6187" relation="include">
        </childnode>
      </node>
      <node id="6194">
        <label>Camera/PolarCamera.h</label>
        <link refid="_polar_camera_8h_source"/>
        <childnode refid="6195" relation="include">
        </childnode>
      </node>
      <node id="6183">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6165" relation="include">
        </childnode>
        <childnode refid="6174" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
      </node>
      <node id="6193">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6189" relation="include">
        </childnode>
        <childnode refid="6188" relation="include">
        </childnode>
        <childnode refid="6165" relation="include">
        </childnode>
        <childnode refid="6174" relation="include">
        </childnode>
        <childnode refid="6186" relation="include">
        </childnode>
      </node>
      <node id="6167">
        <label>cstring</label>
      </node>
      <node id="6160">
        <label>memory</label>
      </node>
      <node id="6197">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="6174" relation="include">
        </childnode>
      </node>
      <node id="6177">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_azura_1_1_vertex" prot="public">Azura::Vertex</innerclass>
    <innerclass refid="struct_azura_1_1_instance" prot="public">Azura::Instance</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ProceduralPlanet/AppRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Core/RawStorageFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Icosphere.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/PoolPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Containers;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Math;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_col[4];</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_instance" kindref="compound">Instance</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">AppRenderer::AppRenderer()</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>:<sp/>m_mainBuffer(0x400000<sp/>*<sp/>2),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainAllocator(m_mainBuffer,<sp/>0x400000),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawableAllocator(m_mainBuffer,<sp/>0x400000),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>m_camera(1280,<sp/>720),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>log_AppRenderer(Log(</highlight><highlight class="stringliteral">&quot;AppRenderer&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Init<sp/>of<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>8192);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>m_window<sp/>=<sp/>RenderSystem::CreateApplicationWindow(</highlight><highlight class="stringliteral">&quot;ProceduralPlanet&quot;</highlight><highlight class="normal">,<sp/>1280,<sp/>720);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>m_window-&gt;SetUpdateCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeDelta)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>WindowUpdate(timeDelta);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>m_window-&gt;SetKeyEventCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](KeyEvent<sp/>evt)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>m_camera.OnKeyEvent(evt);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_window-&gt;SetMouseEventCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](MouseEvent<sp/>evt)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(evt);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>as<sp/>it<sp/>has<sp/>bugs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_camera.OnMouseEvent(e);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>m_window-&gt;Initialize(),<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>Initialize<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Procedural<sp/>Planet&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_camera.Recompute();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>m_sceneUBO<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_proj<sp/>=<sp/>m_camera.GetProjMatrix();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_invProj<sp/>=<sp/>m_sceneUBO.m_proj.Inverse();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_modelInvTranspose<sp/>=<sp/>m_sceneUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_sceneUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shaderControlBuffer<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_sceneControls);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[Q]:Allocator?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(4,<sp/>4,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>|<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SHADER_CONTROLS_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>|<sp/>ShaderStage::Pixel<sp/>});</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::Sampler,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PLANET_TEXTURE_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::SampledImage,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>m_pass1.m_uboSlot<sp/>=<sp/>UBO_SLOT;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>CONTROLS_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SHADER_CONTROLS_SLOT<sp/>});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SAMPLER_SLOT<sp/>});</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>PLANET_TEXTURE_SLOT<sp/>});</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(6,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SCREEN_QUAD_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;ScreenQuad.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;Noise.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;Noise.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>TERRAIN_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;Terrain.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SKY_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;Sky.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>WATER_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;Water.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(4,<sp/>2,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>renderPassRequirements.m_maxPools<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_TARGET_1<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_TARGET_2<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_DEPTH<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::D32_FLOAT});</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>NOISE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{NOISE_VERTEX_SHADER_ID,<sp/>NOISE_PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{NOISE_TARGET_1,<sp/>NOISE_TARGET_2,<sp/>NOISE_DEPTH}<sp/>,<sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{}<sp/>,<sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>CONTROLS_SET}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SINGLE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{{NOISE_TARGET_1,<sp/>ShaderStage::Pixel},<sp/>{NOISE_TARGET_2,<sp/>ShaderStage::Pixel},<sp/>{NOISE_DEPTH,<sp/>ShaderStage::Pixel}},<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>CONTROLS_SET,<sp/>SAMPLER_SET,<sp/>TEXTURE_SET},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{},</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>BlendState{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>{BlendFactor::SrcAlpha,<sp/>BlendFactor::OneMinusSrcAlpha},<sp/>{BlendFactor::SrcAlpha,<sp/>BlendFactor::OneMinusSrcAlpha}}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>SwapChainRequirements<sp/>swapChainRequirements<sp/>=<sp/>m_window-&gt;GetSwapChainRequirements();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>swapChainRequirements.m_depthFormat<sp/>=<sp/>RawStorageFormat::UNKNOWN;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainRequirements,<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,<sp/>m_drawableAllocator,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>*m_window);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>IcoSphere<sp/>sphere(8);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo(allocatorTemporary);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.TotalDataSize()<sp/>+<sp/>0x400000;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>poolInfo.m_cullMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CullMode::BackBit;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/><sp/><sp/><sp/>=<sp/>{{NOISE_PASS},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>sphere.GetVertexFormat()}}<sp/>});</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NORMAL_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;NORMAL&quot;</highlight><highlight class="normal">,<sp/>sphere.GetNormalFormat()}}<sp/>});</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>textureRequirements.m_maxCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>textureRequirements.m_poolSize<sp/>=<sp/>0x400000;<sp/></highlight><highlight class="comment">//<sp/>4MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>planet1Texture<sp/>=<sp/>m_textureManager-&gt;Load(</highlight><highlight class="stringliteral">&quot;Textures/Planet1_Texture.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc*<sp/>planet1Desc<sp/>=<sp/>m_textureManager-&gt;GetInfo(planet1Texture);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>planet1Desc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;planet1Desc<sp/>was<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>DrawablePool&amp;<sp/>pool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>m_mainPool<sp/>=<sp/>&amp;pool;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetVertexCount();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetIndexCount();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetIndexFormat();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>m_icosphereId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>pool.BindVertexData(m_icosphereId,<sp/>VERTEX_SLOT,<sp/>sphere.VertexData(),<sp/>sphere.VertexDataSize());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>pool.BindVertexData(m_icosphereId,<sp/>NORMAL_SLOT,<sp/>sphere.NormalData(),<sp/>sphere.NormalDataSize());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>pool.SetIndexData(m_icosphereId,<sp/>sphere.IndexData(),<sp/>sphere.IndexDataSize());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>pool.BindUniformData(m_icosphereId,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>pool.BindUniformData(m_icosphereId,<sp/>SHADER_CONTROLS_SLOT,<sp/>shaderControlBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ShaderControls));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>DrawablePool&amp;<sp/>skyQuad<sp/>=<sp/>PoolPrimitives::AddScreenQuad(*m_renderer,<sp/>SINGLE_PASS,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>skyQuad.AddShader(SCREEN_QUAD_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>skyQuad.AddShader(SKY_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>skyQuad.BindUniformData(0,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>skyQuad.BindUniformData(0,<sp/>SHADER_CONTROLS_SLOT,<sp/>shaderControlBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ShaderControls));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>skyQuad.BindSampler(SAMPLER_SLOT,<sp/>{});</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>DrawablePool&amp;<sp/>terrainQuad<sp/>=<sp/>PoolPrimitives::AddScreenQuad(*m_renderer,<sp/>SINGLE_PASS,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>terrainQuad.AddShader(SCREEN_QUAD_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>terrainQuad.AddShader(TERRAIN_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>terrainQuad.BindUniformData(0,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>terrainQuad.BindUniformData(0,<sp/>SHADER_CONTROLS_SLOT,<sp/>shaderControlBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ShaderControls));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>terrainQuad.BindTextureData(PLANET_TEXTURE_SLOT,<sp/>*planet1Desc,<sp/>m_textureManager-&gt;GetData(planet1Texture));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>terrainQuad.BindSampler(SAMPLER_SLOT,<sp/>{});</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>DrawablePool&amp;<sp/>waterQuad<sp/>=<sp/>PoolPrimitives::AddScreenQuad(*m_renderer,<sp/>SINGLE_PASS,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>waterQuad.AddShader(SCREEN_QUAD_VERTEX_SHADER_ID);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>waterQuad.AddShader(WATER_PIXEL_SHADER_ID);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>waterQuad.BindUniformData(0,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>waterQuad.BindUniformData(0,<sp/>SHADER_CONTROLS_SLOT,<sp/>shaderControlBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ShaderControls));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>waterQuad.BindTextureData(PLANET_TEXTURE_SLOT,<sp/>*planet1Desc,<sp/>m_textureManager-&gt;GetData(planet1Texture));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>waterQuad.BindSampler(SAMPLER_SLOT,<sp/>{});</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>m_skyPool<sp/>=<sp/>&amp;skyQuad;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>m_terrainPool<sp/>=<sp/>&amp;terrainQuad;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>m_waterPool<sp/>=<sp/>&amp;waterQuad;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::WindowUpdate(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeDelta)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>m_camera.Update(timeDelta);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_invViewProj<sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_view<sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_proj<sp/>=<sp/>m_camera.GetProjMatrix();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>m_sceneUBO.m_invProj<sp/>=<sp/>m_sceneUBO.m_proj.Inverse();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_sceneUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_icosphereId,<sp/>m_pass1.m_uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>m_skyPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>m_skyPool-&gt;UpdateUniformData(0,<sp/>m_pass1.m_uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>m_skyPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>m_terrainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>m_terrainPool-&gt;UpdateUniformData(0,<sp/>m_pass1.m_uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>m_terrainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>m_waterPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>m_waterPool-&gt;UpdateUniformData(0,<sp/>m_pass1.m_uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>m_waterPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>m_window-&gt;StartListening();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Destroy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>m_window-&gt;Destroy();</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Samples/1_ProceduralPlanet/Src/AppRenderer.cpp"/>
  </compounddef>
</doxygen>
