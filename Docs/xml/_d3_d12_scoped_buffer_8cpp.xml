<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_d3_d12_scoped_buffer_8cpp" kind="file" language="C++">
    <compoundname>D3D12ScopedBuffer.cpp</compoundname>
    <includes refid="_d3_d12_scoped_buffer_8h" local="yes">D3D12/D3D12ScopedBuffer.h</includes>
    <includes refid="d3dx12_8h" local="yes">D3D12/d3dx12.h</includes>
    <includes refid="_d3_d12_macros_8h" local="yes">D3D12/D3D12Macros.h</includes>
    <includes refid="_d3_d12_debug_8h" local="yes">D3D12/D3D12Debug.h</includes>
    <incdepgraph>
      <node id="2155">
        <label>D3D12/d3dx12.h</label>
        <link refid="d3dx12_8h_source"/>
        <childnode refid="2131" relation="include">
        </childnode>
      </node>
      <node id="2140">
        <label>functional</label>
      </node>
      <node id="2130">
        <label>windows.h</label>
      </node>
      <node id="2141">
        <label>iterator</label>
      </node>
      <node id="2152">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2127" relation="include">
        </childnode>
      </node>
      <node id="2129">
        <label>D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="2130" relation="include">
        </childnode>
        <childnode refid="2131" relation="include">
        </childnode>
        <childnode refid="2132" relation="include">
        </childnode>
        <childnode refid="2133" relation="include">
        </childnode>
        <childnode refid="2134" relation="include">
        </childnode>
        <childnode refid="2135" relation="include">
        </childnode>
        <childnode refid="2136" relation="include">
        </childnode>
      </node>
      <node id="2147">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2146" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
        <childnode refid="2149" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2151" relation="include">
        </childnode>
      </node>
      <node id="2131">
        <label>d3d12.h</label>
      </node>
      <node id="2124">
        <label>D3D12/D3D12ScopedBuffer.h</label>
        <link refid="_d3_d12_scoped_buffer_8h_source"/>
        <childnode refid="2125" relation="include">
        </childnode>
        <childnode refid="2126" relation="include">
        </childnode>
        <childnode refid="2129" relation="include">
        </childnode>
      </node>
      <node id="2123">
        <label>Source/Azura/RenderSystem/Src/D3D12/D3D12ScopedBuffer.cpp</label>
        <link refid="_d3_d12_scoped_buffer_8cpp"/>
        <childnode refid="2124" relation="include">
        </childnode>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2159" relation="include">
        </childnode>
      </node>
      <node id="2143">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2140" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2144" relation="include">
        </childnode>
      </node>
      <node id="2153">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2138">
        <label>cassert</label>
      </node>
      <node id="2150">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2134">
        <label>wrl.h</label>
      </node>
      <node id="2158">
        <label>stdexcept</label>
      </node>
      <node id="2136">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2137" relation="include">
        </childnode>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2153" relation="include">
        </childnode>
        <childnode refid="2154" relation="include">
        </childnode>
        <childnode refid="2151" relation="include">
        </childnode>
      </node>
      <node id="2159">
        <label>D3D12/D3D12Debug.h</label>
        <link refid="_d3_d12_debug_8h_source"/>
        <childnode refid="2131" relation="include">
        </childnode>
      </node>
      <node id="2144">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2133">
        <label>D3Dcompiler.h</label>
      </node>
      <node id="2154">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2145">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2146" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
      </node>
      <node id="2151">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2146">
        <label>tuple</label>
      </node>
      <node id="2142">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2138" relation="include">
        </childnode>
        <childnode refid="2139" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
      </node>
      <node id="2156">
        <label>D3D12/D3D12Macros.h</label>
        <link refid="_d3_d12_macros_8h_source"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
      </node>
      <node id="2128">
        <label>vector</label>
      </node>
      <node id="2137">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2138" relation="include">
        </childnode>
        <childnode refid="2139" relation="include">
        </childnode>
        <childnode refid="2140" relation="include">
        </childnode>
        <childnode refid="2141" relation="include">
        </childnode>
        <childnode refid="2142" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2144" relation="include">
        </childnode>
      </node>
      <node id="2126">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2128" relation="include">
        </childnode>
      </node>
      <node id="2132">
        <label>dxgi1_4.h</label>
      </node>
      <node id="2125">
        <label>wrl/client.h</label>
      </node>
      <node id="2148">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2127">
        <label>Types.h</label>
      </node>
      <node id="2157">
        <label>winerror.h</label>
      </node>
      <node id="2139">
        <label>cstring</label>
      </node>
      <node id="2135">
        <label>shellapi.h</label>
      </node>
      <node id="2149">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_d3_d12">Azura::D3D12</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedBuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/d3dx12.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">D3D12<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal">SizeType<sp/>Align(SizeType<sp/>uLocation,<sp/>SizeType<sp/>uAlign)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0<sp/>==<sp/>uAlign)<sp/>||<sp/>(uAlign<sp/>&amp;<sp/>(uAlign<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;non-pow2<sp/>alignment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uLocation<sp/>+<sp/>(uAlign<sp/>-<sp/>1))<sp/>&amp;<sp/>~(uAlign<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_HEAP_PROPERTIES&amp;<sp/>heapProperties,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>size,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATES<sp/>resourceStates,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_D3D12RenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>m_currentState<sp/>=<sp/>resourceStates;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferDesc<sp/>=<sp/>CD3DX12_RESOURCE_DESC::Buffer(m_size);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Buffer<sp/>of<sp/>Size:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateCommittedResource(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;heapProperties,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_HEAP_FLAG_NONE,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;bufferDesc,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>resourceStates,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>IID_PPV_ARGS(&amp;m_buffer)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_HEAP_PROPERTIES&amp;<sp/>heapProperties,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>size,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATES<sp/>resourceStates,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_FLAGS<sp/>resourceFlags,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_D3D12RenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>m_currentState<sp/>=<sp/>resourceStates;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferDesc<sp/>=<sp/>CD3DX12_RESOURCE_DESC::Buffer(m_size,<sp/>resourceFlags);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Buffer<sp/>of<sp/>Size:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateCommittedResource(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;heapProperties,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_HEAP_FLAG_NONE,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;bufferDesc,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>resourceStates,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>IID_PPV_ARGS(&amp;m_buffer)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::Map()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pData;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>CD3DX12_RANGE<sp/>readRange(0,<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>m_buffer-&gt;Map(0,<sp/>&amp;readRange,<sp/>&amp;pData);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>p_dataCur<sp/>=<sp/>p_dataBegin<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pData);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>p_dataEnd<sp/>=<sp/>p_dataBegin<sp/>+<sp/>m_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">HRESULT<sp/>D3D12ScopedBuffer::SubAllocateFromBuffer(U32<sp/>size,<sp/>U32<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>p_dataCur<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">UINT8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Align(reinterpret_cast&lt;SizeType&gt;(p_dataCur),<sp/>SizeType(alignment)));<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_dataCur<sp/>+<sp/>size<sp/>&gt;<sp/>p_dataEnd)<sp/>?<sp/>E_INVALIDARG<sp/>:<sp/>S_OK;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">U32<sp/>D3D12ScopedBuffer::AppendData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pData,<sp/>U32<sp/>byteSize,<sp/>U32<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_D3D12RenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>SubAllocateFromBuffer(byteSize,<sp/>alignment),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>Sub<sp/>allocate<sp/>inside<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byteOffset<sp/>=<sp/>GetCurrentOffset();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>std::memcpy(p_dataCur,<sp/>pData,<sp/>byteSize);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>p_dataCur<sp/>+=<sp/>byteSize;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byteOffset;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">U32<sp/>D3D12ScopedBuffer::AppendTextureData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pData,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>byteSize,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>alignment,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>textureWidth,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>textureRowPitch,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_D3D12RenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>numRows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>byteSize<sp/>/<sp/>textureWidth;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>scaledRowPitch<sp/>=<sp/>SCALE_SIZE(textureWidth,<sp/>textureRowPitch);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>requiredSize<sp/><sp/><sp/>=<sp/>scaledRowPitch<sp/>*<sp/>numRows;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>SubAllocateFromBuffer(requiredSize,<sp/>alignment),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>Sub<sp/>allocate<sp/>inside<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byteOffset<sp/>=<sp/>GetCurrentOffset();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>textureData<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pData);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>numRows;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(p_dataCur,<sp/>textureData,<sp/>textureWidth);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dataCur<sp/>+=<sp/>scaledRowPitch;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>textureData<sp/>+=<sp/>textureWidth;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byteOffset;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">ID3D12Resource*<sp/>D3D12ScopedBuffer::Real()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_buffer.Get();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">D3D12_SHADER_RESOURCE_VIEW_DESC<sp/>D3D12ScopedBuffer::GetSRV()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>D3D12_SHADER_RESOURCE_VIEW_DESC<sp/>srvDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>srvDesc.Shader4ComponentMapping<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>srvDesc.Format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DXGI_FORMAT_UNKNOWN;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>srvDesc.ViewDimension<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_SRV_DIMENSION_BUFFER;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>srvDesc.Buffer.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_BUFFER_SRV_FLAG_NONE;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>srvDesc.Buffer.FirstElement<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>srvDesc.Buffer.NumElements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_size<sp/>/<sp/>m_stride;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>srvDesc.Buffer.StructureByteStride<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_stride;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>srvDesc;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">D3D12_UNORDERED_ACCESS_VIEW_DESC<sp/>D3D12ScopedBuffer::GetUAV()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>D3D12_UNORDERED_ACCESS_VIEW_DESC<sp/>uavDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>uavDesc.Format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DXGI_FORMAT_UNKNOWN;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>uavDesc.ViewDimension<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_UAV_DIMENSION_BUFFER;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>uavDesc.Buffer.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_BUFFER_UAV_FLAG_NONE;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>uavDesc.Buffer.FirstElement<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>uavDesc.Buffer.NumElements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>UINT(m_size<sp/>/<sp/>m_stride);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>uavDesc.Buffer.StructureByteStride<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_stride;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uavDesc;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">U32<sp/>D3D12ScopedBuffer::GetStride()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stride;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::SetStride(U32<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>m_stride<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">U32<sp/>D3D12ScopedBuffer::GetSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">U32<sp/>D3D12ScopedBuffer::GetCurrentOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(p_dataCur<sp/>-<sp/>p_dataBegin);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::Reset()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>p_dataCur<sp/>=<sp/>p_dataBegin;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedBuffer::Transition(ID3D12GraphicsCommandList*<sp/>commandList,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>D3D12_RESOURCE_STATES<sp/>toState,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_D3D12RenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>UNUSED(log_D3D12RenderSystem);<sp/></highlight><highlight class="comment">//<sp/>Release<sp/>Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_currentState<sp/>==<sp/>toState)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>State<sp/>is<sp/>same<sp/>as<sp/>Transition<sp/>State:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>D3D12ResourceStateToString(toState));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Transitioning<sp/>State:<sp/>%s<sp/>=&gt;<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>D3D12ResourceStateToString(m_currentState),<sp/>D3D12ResourceStateToString(toState));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resourceBarrier<sp/>=<sp/>CD3DX12_RESOURCE_BARRIER::Transition(m_buffer.Get(),<sp/>m_currentState,<sp/>toState);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>commandList-&gt;ResourceBarrier(1,<sp/>&amp;resourceBarrier);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>m_currentState<sp/>=<sp/>toState;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>D3D12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/D3D12/D3D12ScopedBuffer.cpp"/>
  </compounddef>
</doxygen>
