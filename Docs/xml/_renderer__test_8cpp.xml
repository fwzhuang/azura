<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_renderer__test_8cpp" kind="file" language="C++">
    <compoundname>Renderer_test.cpp</compoundname>
    <includes refid="_renderer__test_8h" local="yes">Renderer_test.h</includes>
    <includes refid="_renderer_8h" local="yes">Generic/Renderer.h</includes>
    <includes refid="_window_8h" local="yes">Generic/Window.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_render_test_cases_8h" local="yes">RenderTestCases.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_file_reader_8h" local="yes">Utils/FileReader.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <incdepgraph>
      <node id="3642">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="3643" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3612">
        <label>functional</label>
      </node>
      <node id="3645">
        <label>Utils/FileReader.h</label>
        <link refid="_file_reader_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3621" relation="include">
        </childnode>
      </node>
      <node id="3624">
        <label>iterator</label>
      </node>
      <node id="3633">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3646">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="3647" relation="include">
        </childnode>
        <childnode refid="3607" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3618">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="3619" relation="include">
        </childnode>
        <childnode refid="3621" relation="include">
        </childnode>
        <childnode refid="3626" relation="include">
        </childnode>
        <childnode refid="3627" relation="include">
        </childnode>
        <childnode refid="3628" relation="include">
        </childnode>
        <childnode refid="3636" relation="include">
        </childnode>
      </node>
      <node id="3628">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3620" relation="include">
        </childnode>
        <childnode refid="3629" relation="include">
        </childnode>
        <childnode refid="3630" relation="include">
        </childnode>
        <childnode refid="3631" relation="include">
        </childnode>
        <childnode refid="3632" relation="include">
        </childnode>
      </node>
      <node id="3615">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="3611" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3616" relation="include">
        </childnode>
      </node>
      <node id="3608">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3611">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="3612" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3613" relation="include">
        </childnode>
      </node>
      <node id="3634">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="3622">
        <label>cassert</label>
      </node>
      <node id="3631">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="3627">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="3621" relation="include">
        </childnode>
        <childnode refid="3619" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3628" relation="include">
        </childnode>
        <childnode refid="3633" relation="include">
        </childnode>
        <childnode refid="3634" relation="include">
        </childnode>
        <childnode refid="3635" relation="include">
        </childnode>
        <childnode refid="3632" relation="include">
        </childnode>
      </node>
      <node id="3607">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="3608" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3647">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="3622" relation="include">
        </childnode>
        <childnode refid="3608" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3613" relation="include">
        </childnode>
      </node>
      <node id="3613">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="3635">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="3619">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="3620" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3632">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="3638">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="3620">
        <label>tuple</label>
      </node>
      <node id="3625">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="3622" relation="include">
        </childnode>
        <childnode refid="3623" relation="include">
        </childnode>
        <childnode refid="3611" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3610">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="3611" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3616">
        <label>vector</label>
      </node>
      <node id="3621">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3622" relation="include">
        </childnode>
        <childnode refid="3623" relation="include">
        </childnode>
        <childnode refid="3612" relation="include">
        </childnode>
        <childnode refid="3624" relation="include">
        </childnode>
        <childnode refid="3625" relation="include">
        </childnode>
        <childnode refid="3611" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3613" relation="include">
        </childnode>
      </node>
      <node id="3617">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3616" relation="include">
        </childnode>
      </node>
      <node id="3614">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3641">
        <label>RenderTestCases.h</label>
        <link refid="_render_test_cases_8h_source"/>
        <childnode refid="3618" relation="include">
        </childnode>
        <childnode refid="3642" relation="include">
        </childnode>
      </node>
      <node id="3626">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="3621" relation="include">
        </childnode>
        <childnode refid="3627" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3628" relation="include">
        </childnode>
      </node>
      <node id="3629">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="3609">
        <label>Types.h</label>
      </node>
      <node id="3639">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="3611" relation="include">
        </childnode>
        <childnode refid="3618" relation="include">
        </childnode>
        <childnode refid="3640" relation="include">
        </childnode>
      </node>
      <node id="3643">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="3637">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="3612" relation="include">
        </childnode>
        <childnode refid="3627" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3618" relation="include">
        </childnode>
        <childnode refid="3638" relation="include">
        </childnode>
        <childnode refid="3617" relation="include">
        </childnode>
      </node>
      <node id="3605">
        <label>Source/Azura/RenderSystem/Test/Renderer_test.cpp</label>
        <link refid="_renderer__test_8cpp"/>
        <childnode refid="3606" relation="include">
        </childnode>
        <childnode refid="3618" relation="include">
        </childnode>
        <childnode refid="3637" relation="include">
        </childnode>
        <childnode refid="3639" relation="include">
        </childnode>
        <childnode refid="3641" relation="include">
        </childnode>
        <childnode refid="3644" relation="include">
        </childnode>
        <childnode refid="3645" relation="include">
        </childnode>
        <childnode refid="3646" relation="include">
        </childnode>
      </node>
      <node id="3636">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="3621" relation="include">
        </childnode>
        <childnode refid="3627" relation="include">
        </childnode>
        <childnode refid="3609" relation="include">
        </childnode>
      </node>
      <node id="3606">
        <label>Renderer_test.h</label>
        <link refid="_renderer__test_8h_source"/>
        <childnode refid="3607" relation="include">
        </childnode>
        <childnode refid="3610" relation="include">
        </childnode>
        <childnode refid="3614" relation="include">
        </childnode>
        <childnode refid="3615" relation="include">
        </childnode>
        <childnode refid="3617" relation="include">
        </childnode>
      </node>
      <node id="3640">
        <label>TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="3609" relation="include">
        </childnode>
        <childnode refid="3607" relation="include">
        </childnode>
        <childnode refid="3610" relation="include">
        </childnode>
        <childnode refid="3621" relation="include">
        </childnode>
        <childnode refid="3627" relation="include">
        </childnode>
        <childnode refid="3617" relation="include">
        </childnode>
      </node>
      <node id="3623">
        <label>cstring</label>
      </node>
      <node id="3644">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="3627" relation="include">
        </childnode>
      </node>
      <node id="3630">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_renderer__test_8cpp_1af8b312acc091fbc63bb075317e2f9fab" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int UNIFORM_BUFFER_BINDING_ID</definition>
        <argsstring></argsstring>
        <name>UNIFORM_BUFFER_BINDING_ID</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="12" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_renderer__test_8cpp_1a5e6ce0dd58078611570510dc4b8d81f3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int WINDOW_WIDTH</definition>
        <argsstring></argsstring>
        <name>WINDOW_WIDTH</name>
        <initializer>= 1280</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="13" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_renderer__test_8cpp_1ab76d138fa589df9a65fc05eb3bd56073" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int WINDOW_HEIGHT</definition>
        <argsstring></argsstring>
        <name>WINDOW_HEIGHT</name>
        <initializer>= 720</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="14" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_renderer__test_8cpp_1a66bc4539f721f9f4eec6e6a39e5e4b12" prot="public" static="no" mutable="no">
        <type>const String</type>
        <definition>const String TEST_SUITE</definition>
        <argsstring></argsstring>
        <name>TEST_SUITE</name>
        <initializer>= &quot;RendererTest&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="16" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_renderer__test_8cpp_1a41e317c0599d51e6b84b2bc892a25eb9" prot="public" static="no" mutable="no">
        <type>const RawStorageFormat</type>
        <definition>const RawStorageFormat SWAPCHAIN_DEFAULT_FORMAT</definition>
        <argsstring></argsstring>
        <name>SWAPCHAIN_DEFAULT_FORMAT</name>
        <initializer>= RawStorageFormat::B8G8R8A8_UNORM</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="18" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_renderer__test_8cpp_1aa3804051970068634d931ef717c36fda" prot="public" static="no" mutable="no">
        <type>const U32</type>
        <definition>const U32 SWAPCHAIN_BYTE_SIZE</definition>
        <argsstring></argsstring>
        <name>SWAPCHAIN_BYTE_SIZE</name>
        <initializer>= WINDOW_WIDTH * WINDOW_HEIGHT * GetFormatSize(SWAPCHAIN_DEFAULT_FORMAT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="20" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_renderer__test_8cpp_1a4c754279d31080bb91e871092f68edc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="class_azura_1_1_window" kindref="compound">Azura::Window</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Azura::Window&gt; CreateDefaultWindow</definition>
        <argsstring>()</argsstring>
        <name>CreateDefaultWindow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="22" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="22" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="_renderer__test_8cpp_1a062b9ab7c5bb6e129ac81b160c8898c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CompareImageBytes</definition>
        <argsstring>(const String &amp;referenceFile, const String &amp;testFile)</argsstring>
        <name>CompareImageBytes</name>
        <param>
          <type>const String &amp;</type>
          <declname>referenceFile</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>testFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="40" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="_renderer__test_8cpp_1a5b3bf7c425f0f30a67c4ef908a792ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RendererTest, BasicRenderTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_renderer_test" kindref="compound">RendererTest</ref></type>
        </param>
        <param>
          <type>BasicRenderTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="49" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="49" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="_renderer__test_8cpp_1ab52b3cab02b885b8cc11c255e9e52f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RendererTest, BasicInstancingTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_renderer_test" kindref="compound">RendererTest</ref></type>
        </param>
        <param>
          <type>BasicInstancingTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="106" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="106" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="_renderer__test_8cpp_1af19a8b3f5b14ec60e16c76ad12cf18d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RendererTest, BasicTextureTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_renderer_test" kindref="compound">RendererTest</ref></type>
        </param>
        <param>
          <type>BasicTextureTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="163" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="163" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="_renderer__test_8cpp_1ad8445bcc24b131cf1f2e41c39d745b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RendererTest, BasicDeferredTest)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_renderer_test" kindref="compound">RendererTest</ref></type>
        </param>
        <param>
          <type>BasicDeferredTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp" line="224" column="1" bodyfile="Source/Azura/RenderSystem/Test/Renderer_test.cpp" bodystart="224" bodyend="299"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Renderer_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Renderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RenderTestCases.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/FileReader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UNIFORM_BUFFER_BINDING_ID<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WINDOW_WIDTH<sp/>=<sp/>1280;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WINDOW_HEIGHT<sp/>=<sp/>720;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>TEST_SUITE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;RendererTest&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawStorageFormat<sp/>SWAPCHAIN_DEFAULT_FORMAT<sp/>=<sp/>RawStorageFormat::B8G8R8A8_UNORM;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SWAPCHAIN_BYTE_SIZE<sp/>=<sp/>WINDOW_WIDTH<sp/>*<sp/>WINDOW_HEIGHT<sp/>*<sp/>GetFormatSize(SWAPCHAIN_DEFAULT_FORMAT);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">std::unique_ptr&lt;Azura::Window&gt;<sp/>CreateDefaultWindow()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Azura::Window&gt;<sp/>windowPtr<sp/>=<sp/>RenderSystem::CreateApplicationWindow(TEST_SUITE,<sp/>WINDOW_WIDTH,<sp/>WINDOW_HEIGHT);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>windowPtr-&gt;SetUpdateCallback([]<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeSinceLastFrame)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(timeSinceLastFrame);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!windowPtr-&gt;Initialize())</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>Initialize<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>windowPtr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CompareImageBytes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>referenceFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>testFile)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>SWAPCHAIN_BYTE_SIZE<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>referenceFileContents<sp/>=<sp/>FileReader::GetFileContents(referenceFile,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>testFileContents<sp/>=<sp/>FileReader::GetFileContents(testFile,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::memcmp(referenceFileContents.Data(),<sp/>testFileContents.Data(),<sp/>SWAPCHAIN_BYTE_SIZE)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">TEST_F(<ref refid="class_renderer_test" kindref="compound">RendererTest</ref>,<sp/>BasicRenderTest)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">HeapMemoryBuffer</ref><sp/>mainBuffer(16384);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>mainAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>drawableAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>CreateDefaultWindow();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_application_info" kindref="compound">ApplicationInfo</ref><sp/>appInfo;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>TEST_SUITE;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref><sp/>requirements;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_application_requirements" kindref="compound">ApplicationRequirements</ref><sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref><sp/>descriptorRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref>(3,<sp/>1,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>});</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref><sp/>shaderRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref>(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicRenderTest.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicRenderTest.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref><sp/>renderPassRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref>(0,<sp/>1,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SINGLE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_clear_data" kindref="compound">ClearData</ref>{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainRequirements<sp/>=<sp/>window-&gt;GetSwapChainRequirements();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Azura::Renderer&gt;<sp/>renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainRequirements,<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>mainAllocator,<sp/>drawableAllocator,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>*window);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>RenderTestCases::ExecuteBasicRenderTest(*renderer,<sp/>*window,<sp/>SINGLE_PASS,<sp/>UBO_SLOT,<sp/>log_TestRenderer);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(CompareImageBytes(</highlight><highlight class="stringliteral">&quot;./ReferenceImages/BasicRenderTest.data&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;./BasicRenderTest.data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>window-&gt;Destroy();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">TEST_F(<ref refid="class_renderer_test" kindref="compound">RendererTest</ref>,<sp/>BasicInstancingTest)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">HeapMemoryBuffer</ref><sp/>mainBuffer(16384);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>mainAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>drawableAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>CreateDefaultWindow();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_application_info" kindref="compound">ApplicationInfo</ref><sp/>appInfo;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>TEST_SUITE;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref><sp/>requirements;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_application_requirements" kindref="compound">ApplicationRequirements</ref><sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref><sp/>descriptorRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref>(3,<sp/>1,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>});</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref><sp/>shaderRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref>(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicInstancingTest.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicInstancingTest.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref><sp/>renderPassRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref>(0,<sp/>1,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SINGLE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_clear_data" kindref="compound">ClearData</ref>{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainRequirements<sp/>=<sp/>window-&gt;GetSwapChainRequirements();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Azura::Renderer&gt;<sp/>renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainRequirements,<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>mainAllocator,<sp/>drawableAllocator,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>*window);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>RenderTestCases::ExecuteBasicInstancingTest(*renderer,<sp/>*window,<sp/>SINGLE_PASS,<sp/>UBO_SLOT,<sp/>log_TestRenderer);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(CompareImageBytes(</highlight><highlight class="stringliteral">&quot;./ReferenceImages/BasicInstancingTest.data&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;./BasicInstancingTest.data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>window-&gt;Destroy();</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TEST_F(<ref refid="class_renderer_test" kindref="compound">RendererTest</ref>,<sp/>BasicTextureTest)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">HeapMemoryBuffer</ref><sp/>mainBuffer(16384);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>mainAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>drawableAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>CreateDefaultWindow();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_application_info" kindref="compound">ApplicationInfo</ref><sp/>appInfo;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>TEST_SUITE;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref><sp/>requirements;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_application_requirements" kindref="compound">ApplicationRequirements</ref><sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref><sp/>descriptorRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref>(3,<sp/>3,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>});</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::Sampler,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>BASIC_TEXTURE_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::SampledImage,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SAMPLER_SLOT<sp/>});</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>BASIC_TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>BASIC_TEXTURE_SLOT<sp/>});</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref><sp/>shaderRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref>(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicTextureTest.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicTextureTest.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref><sp/>renderPassRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref>(0,<sp/>1,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SINGLE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>SAMPLER_SET,<sp/>BASIC_TEXTURE_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_clear_data" kindref="compound">ClearData</ref>{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainRequirements<sp/>=<sp/>window-&gt;GetSwapChainRequirements();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Azura::Renderer&gt;<sp/>renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainRequirements,<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>mainAllocator,<sp/>drawableAllocator,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>*window);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>RenderTestCases::ExecuteBasicTextureTest(*renderer,<sp/>*window,<sp/>SINGLE_PASS,<sp/>UBO_SLOT,<sp/>SAMPLER_SLOT,<sp/>BASIC_TEXTURE_SLOT,<sp/>log_TestRenderer);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(CompareImageBytes(</highlight><highlight class="stringliteral">&quot;./ReferenceImages/BasicTextureTest.data&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;./BasicTextureTest.data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>window-&gt;Destroy();</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">TEST_F(<ref refid="class_renderer_test" kindref="compound">RendererTest</ref>,<sp/>BasicDeferredTest)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">HeapMemoryBuffer</ref><sp/>mainBuffer(16384);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>mainAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>drawableAllocator(mainBuffer,<sp/>8192);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>CreateDefaultWindow();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_application_info" kindref="compound">ApplicationInfo</ref><sp/>appInfo;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>TEST_SUITE;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_device_requirements" kindref="compound">DeviceRequirements</ref><sp/>requirements;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_application_requirements" kindref="compound">ApplicationRequirements</ref><sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref><sp/>descriptorRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_descriptor_requirements" kindref="compound">DescriptorRequirements</ref>(3,<sp/>3,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>});</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::Sampler,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>BASIC_TEXTURE_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::SampledImage,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SAMPLER_SLOT<sp/>});</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>BASIC_TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>BASIC_TEXTURE_SLOT<sp/>});</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref><sp/>shaderRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_shader_requirements" kindref="compound">ShaderRequirements</ref>(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>DEF_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.Deferred.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>DEF_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.Deferred.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref><sp/>renderPassRequirements<sp/>=<sp/><ref refid="struct_azura_1_1_render_pass_requirements" kindref="compound">RenderPassRequirements</ref>(1,<sp/>2,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>renderPassRequirements.m_maxPools<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>COLOR_TARGET_1<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>GBUFFER_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{COLOR_TARGET_1},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>SAMPLER_SET,<sp/>BASIC_TEXTURE_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_clear_data" kindref="compound">ClearData</ref>{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SHADING_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{DEF_VERTEX_SHADER_ID,<sp/>DEF_PIXEL_SHADER_ID},</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{{COLOR_TARGET_1,<sp/>ShaderStage::Pixel}},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{PRESENT_TARGET},<sp/></highlight><highlight class="comment">//<sp/>END<sp/>OF<sp/>RENDERING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},<sp/></highlight><highlight class="comment">//<sp/>END<sp/>OF<sp/>RENDERING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{SAMPLER_SET},</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_clear_data" kindref="compound">ClearData</ref>{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainRequirements<sp/>=<sp/>window-&gt;GetSwapChainRequirements();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Azura::Renderer&gt;<sp/>renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>swapChainRequirements,<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>mainAllocator,<sp/>drawableAllocator,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>*window);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>RenderTestCases::ExecuteBasicDeferredTest(*renderer,<sp/>*window,<sp/>GBUFFER_PASS,<sp/>SHADING_PASS,<sp/>UBO_SLOT,<sp/>SAMPLER_SLOT,<sp/>BASIC_TEXTURE_SLOT,<sp/>log_TestRenderer);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(CompareImageBytes(</highlight><highlight class="stringliteral">&quot;./ReferenceImages/BasicDeferredTest.data&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;./BasicDeferredTest.data&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>window-&gt;Destroy();</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Test/Renderer_test.cpp"/>
  </compounddef>
</doxygen>
