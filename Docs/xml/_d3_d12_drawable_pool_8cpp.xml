<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_d3_d12_drawable_pool_8cpp" kind="file" language="C++">
    <compoundname>D3D12DrawablePool.cpp</compoundname>
    <includes refid="_d3_d12_drawable_pool_8h" local="yes">D3D12/D3D12DrawablePool.h</includes>
    <includes refid="d3dx12_8h" local="yes">D3D12/d3dx12.h</includes>
    <includes refid="_d3_d12_macros_8h" local="yes">D3D12/D3D12Macros.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_d3_d12_scoped_image_8h" local="yes">D3D12/D3D12ScopedImage.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="1973">
        <label>d3dx12.h</label>
        <link refid="d3dx12_8h_source"/>
        <childnode refid="1963" relation="include">
        </childnode>
      </node>
      <node id="1942">
        <label>functional</label>
      </node>
      <node id="1962">
        <label>windows.h</label>
      </node>
      <node id="1943">
        <label>iterator</label>
      </node>
      <node id="1975">
        <label>D3D12/D3D12ScopedImage.h</label>
        <link refid="_d3_d12_scoped_image_8h_source"/>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1956">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1990">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="1993" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1979">
        <label>Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1980" relation="include">
        </childnode>
      </node>
      <node id="1961">
        <label>D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1963" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1966" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
      </node>
      <node id="1951">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1950" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1954" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1963">
        <label>d3d12.h</label>
      </node>
      <node id="1983">
        <label>D3D12/D3D12ScopedBuffer.h</label>
        <link refid="_d3_d12_scoped_buffer_8h_source"/>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1992">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1945">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
      </node>
      <node id="1957">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="1940">
        <label>cassert</label>
      </node>
      <node id="1954">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="1966">
        <label>wrl.h</label>
      </node>
      <node id="1989">
        <label>stdexcept</label>
      </node>
      <node id="1948">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1993">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="1992" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1969">
        <label>map</label>
      </node>
      <node id="1968">
        <label>D3D12/D3D12ScopedPipeline.h</label>
        <link refid="_d3_d12_scoped_pipeline_8h_source"/>
        <childnode refid="1969" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1974" relation="include">
        </childnode>
        <childnode refid="1982" relation="include">
        </childnode>
        <childnode refid="1984" relation="include">
        </childnode>
      </node>
      <node id="1970">
        <label>D3D12/D3D12ScopedShader.h</label>
        <link refid="_d3_d12_scoped_shader_8h_source"/>
        <childnode refid="1971" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
      </node>
      <node id="1991">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1992" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
      </node>
      <node id="1947">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="1986">
        <label>D3D12/D3D12ScopedSampler.h</label>
        <link refid="_d3_d12_scoped_sampler_8h_source"/>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1965">
        <label>D3Dcompiler.h</label>
      </node>
      <node id="1958">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="1974">
        <label>D3D12/D3D12ScopedRenderPass.h</label>
        <link refid="_d3_d12_scoped_render_pass_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
      </node>
      <node id="1949">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="1950" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1955">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="1981">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="1977">
        <label>D3D12/D3D12ScopedSwapChain.h</label>
        <link refid="_d3_d12_scoped_swap_chain_8h_source"/>
        <childnode refid="1978" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1950">
        <label>tuple</label>
      </node>
      <node id="1944">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1987">
        <label>D3D12/D3D12Macros.h</label>
        <link refid="_d3_d12_macros_8h_source"/>
        <childnode refid="1988" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1984">
        <label>optional</label>
      </node>
      <node id="1994">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>vector</label>
      </node>
      <node id="1939">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
      </node>
      <node id="1959">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
      </node>
      <node id="1985">
        <label>D3D12/D3D12Drawable.h</label>
        <link refid="_d3_d12_drawable_8h_source"/>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
      </node>
      <node id="1996">
        <label>utility</label>
      </node>
      <node id="1964">
        <label>dxgi1_4.h</label>
      </node>
      <node id="1972">
        <label>wrl/client.h</label>
      </node>
      <node id="1938">
        <label>Generic/Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
      </node>
      <node id="1952">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="1937">
        <label>D3D12/D3D12DrawablePool.h</label>
        <link refid="_d3_d12_drawable_pool_8h_source"/>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
        <childnode refid="1985" relation="include">
        </childnode>
        <childnode refid="1983" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1974" relation="include">
        </childnode>
      </node>
      <node id="1946">
        <label>Types.h</label>
      </node>
      <node id="1988">
        <label>winerror.h</label>
      </node>
      <node id="1978">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1979" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
      </node>
      <node id="1976">
        <label>D3D12/D3D12ScopedCommandBuffer.h</label>
        <link refid="_d3_d12_scoped_command_buffer_8h_source"/>
        <childnode refid="1961" relation="include">
        </childnode>
      </node>
      <node id="1980">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
      </node>
      <node id="1995">
        <label>algorithm</label>
      </node>
      <node id="1982">
        <label>D3D12/D3D12ScopedComputePass.h</label>
        <link refid="_d3_d12_scoped_compute_pass_8h_source"/>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
        <childnode refid="1983" relation="include">
        </childnode>
      </node>
      <node id="1941">
        <label>cstring</label>
      </node>
      <node id="1967">
        <label>shellapi.h</label>
      </node>
      <node id="1971">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="1948" relation="include">
        </childnode>
      </node>
      <node id="1953">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="1936">
        <label>Source/Azura/RenderSystem/Src/D3D12/D3D12DrawablePool.cpp</label>
        <link refid="_d3_d12_drawable_pool_8cpp"/>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1987" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
        <childnode refid="1994" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1995" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_d3_d12">Azura::D3D12</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12DrawablePool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/d3dx12.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedImage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_microsoft_1_1_w_r_l" kindref="compound">Microsoft::WRL</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">D3D12<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">D3D12DrawablePool::D3D12DrawablePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorCount&amp;<sp/>descriptorCount,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;DescriptorSlot&gt;</ref>&amp;<sp/>descriptorSlots,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;D3D12ScopedShader&gt;</ref>&amp;<sp/>shaders,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;D3D12ScopedRenderPass&gt;</ref>&amp;<sp/>renderPasses,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;D3D12ScopedBuffer&gt;</ref>&amp;<sp/>gpuBuffers,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComPtr&lt;ID3D12CommandQueue&gt;<sp/>commandQueue,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>initAllocator,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log<sp/>log)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>:<sp/>DrawablePool(createInfo,<sp/>descriptorCount,<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>log_D3D12RenderSystem(std::move(log)),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device(device),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_globalDescriptorSlots(descriptorSlots),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaders(shaders),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pipelines(mainAllocator),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawables(createInfo.m_numDrawables,<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPasses(createInfo.m_renderPasses.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>m_gpuBuffers(gpuBuffers.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>m_graphicsCommandQueue(std::move(commandQueue)),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pipelineFactory(initAllocator,<sp/>log_D3D12RenderSystem),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorsPerDrawable(0),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>m_images(mainAllocator),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_samplers(mainAllocator),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>m_secondaryCommandBuffers(createInfo.m_renderPasses.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allHeaps(mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>D3D12<sp/>Drawable<sp/>Pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_pipelineFactory.SetRasterizerStage(createInfo.m_cullMode,<sp/>FrontFace::CounterClockwise);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>inputBuffer<sp/>:<sp/>gpuBuffers)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>m_gpuBuffers.PushBack(inputBuffer);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>CreateRenderPassReferences(createInfo,<sp/>renderPasses);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>CreateInputAttributes(createInfo);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>CreateDescriptorHeap(createInfo);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>m_stagingBuffer.Create(device,<sp/>CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),<sp/>createInfo.m_byteSize,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>m_stagingBuffer.Map();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>m_updateBuffer.Create(device,<sp/>CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),<sp/>createInfo.m_byteSize,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>m_updateBuffer.Map();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>m_mainBuffer.Create(device,<sp/>CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),<sp/>createInfo.m_byteSize,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">DrawableID<sp/>D3D12DrawablePool::CreateDrawable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawableCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>a<sp/>D3D12<sp/>Drawable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>D3D12Drawable<sp/>drawable<sp/>=<sp/>D3D12Drawable(createInfo,<sp/>m_numVertexSlots,<sp/>m_numInstanceSlots,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorCount.m_numUniformSlots,<sp/>GetAllocator());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>m_drawables.PushBack(std::move(drawable));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_drawables.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindVertexData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Vertex<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>BufferInfo<sp/>info<sp/><sp/><sp/><sp/>=<sp/>BufferInfo();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>info.m_maxByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/>=<sp/>slot;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>drawable.AddVertexBufferInfo(std::move(info));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindVertexData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/>U32<sp/>sourceBuffer,<sp/>U32<sp/>offset,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Vertex<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>BufferInfo<sp/>info<sp/><sp/><sp/><sp/>=<sp/>BufferInfo();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>info.m_maxByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/>=<sp/>slot;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>info.m_sourceBufferId<sp/>=<sp/>sourceBuffer;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>drawable.AddVertexBufferInfo(std::move(info));</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindInstanceData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Instance<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>BufferInfo<sp/>info<sp/><sp/><sp/><sp/>=<sp/>BufferInfo();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>info.m_maxByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/>=<sp/>slot;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>drawable.AddInstanceBufferInfo(std::move(info));</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindUniformData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Uniform<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>(size<sp/>+<sp/>D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT<sp/>-<sp/>1)<sp/>&amp;<sp/>~(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendData(buffer,<sp/>size,<sp/>D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descriptorSlot<sp/>=<sp/>m_globalDescriptorSlots[slot];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>UniformBufferInfo<sp/>info<sp/>=<sp/>UniformBufferInfo();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorSlot.m_bindIdx;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>info.m_set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorSlot.m_setIdx;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>drawable.AddUniformBufferInfo(std::move(info));</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::SetIndexData(DrawableID<sp/>drawableId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Index<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>size);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>BufferInfo<sp/>info<sp/>=<sp/>BufferInfo();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>drawable.SetIndexBufferInfo(std::move(info));</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::AddShader(U32<sp/>shaderId)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Shader<sp/>Requested,<sp/>ID:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>shaderId);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>m_pipelineFactory.AddShaderStage(m_shaders[shaderId]);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindTextureData(SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc&amp;<sp/>desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Texture<sp/>Requested<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>slot,<sp/>desc.m_size);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>size<sp/>=<sp/>desc.m_size;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descriptorSlot<sp/>=<sp/>m_globalDescriptorSlots[slot];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>textureWidthBytes<sp/>=<sp/>desc.m_bounds.m_width<sp/>*<sp/>GetFormatSize(desc.m_format);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendTextureData(buffer,<sp/>size,<sp/>512,<sp/>textureWidthBytes,<sp/>D3D12_TEXTURE_DATA_PITCH_ALIGNMENT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>TextureBufferInfo<sp/>info<sp/>=<sp/>TextureBufferInfo();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>info.m_desc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorSlot.m_bindIdx;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>info.m_set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorSlot.m_setIdx;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>m_textureBufferInfos.PushBack(info);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BindSampler(SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerDesc&amp;<sp/>desc)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Binding<sp/>Sampler<sp/>Requested<sp/>for<sp/>Slot:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>slot);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descriptorSlot<sp/>=<sp/>m_globalDescriptorSlots[slot];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>assert(descriptorSlot.m_type<sp/>==<sp/>DescriptorType::Sampler);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>SamplerInfo<sp/>sInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>sInfo.m_set<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorSlot.m_setIdx;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>sInfo.m_binding<sp/><sp/><sp/>=<sp/>descriptorSlot.m_bindIdx;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>sInfo.m_desc<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>m_samplerInfos.PushBack(sInfo);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::SetTextureData(ID3D12GraphicsCommandList*<sp/>oneTimeCommandList)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_textureBufferInfos.GetSize()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Texture<sp/>Data<sp/>Found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>textureCPUHandle(m_descriptorDrawableHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>m_images.Reserve(m_textureBufferInfos.GetSize());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>textBufInfo<sp/>:<sp/>m_textureBufferInfos)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12ScopedImage<sp/>image<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>image.Create(m_device,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>D3D12_RESOURCE_FLAG_NONE,<sp/>textBufInfo.m_desc,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>image.CopyFromBuffer(m_device,<sp/>oneTimeCommandList,<sp/>m_mainBuffer,<sp/>textBufInfo.m_offset);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>image.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>m_images.PushBack(std::move(image));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>cpuHandle;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE::InitOffsetted(cpuHandle,<sp/>textureCPUHandle,<sp/>m_cbvSrvDescriptorElementSize<sp/>*<sp/>idx);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srvDesc<sp/>=<sp/>D3D12ScopedImage::</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetSRV(textBufInfo.m_desc.m_format,<sp/>ImageViewType::ImageView2D,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device-&gt;CreateShaderResourceView(m_images.Last().Real(),<sp/>&amp;srvDesc,<sp/>cpuHandle);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::SetSamplerData()<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_samplerInfos.GetSize()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>samplerCPUHandle(m_descriptorSamplerHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>m_samplers.Reserve(m_samplerInfos.GetSize());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>samplerInfo<sp/>:<sp/>m_samplerInfos)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12ScopedSampler<sp/>sampler<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>sampler.Create(samplerInfo.m_desc,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>cpuHandle;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE::InitOffsetted(cpuHandle,<sp/>samplerCPUHandle,<sp/>m_samplerDescriptorElementSize<sp/>*<sp/>idx);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device-&gt;CreateSampler(&amp;sampler.GetDesc(),<sp/>cpuHandle);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::CreateRenderPassInputTargetSRV(</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;const<sp/>D3D12ScopedImage&gt;&gt;&amp;<sp/>renderPassInputs,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>U32<sp/>offsetTillThis)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>inputCPUHandle(m_descriptorDrawableHeap-&gt;GetCPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetToRenderPassInputs<sp/>+<sp/>offsetTillThis,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>imageRef<sp/>:<sp/>renderPassInputs)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>cpuHandle;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE::InitOffsetted(cpuHandle,<sp/>inputCPUHandle,<sp/>m_cbvSrvDescriptorElementSize<sp/>*<sp/>idx);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srvDesc<sp/>=<sp/>D3D12ScopedImage::GetSRV(imageRef.get().GetFormat(),<sp/>ImageViewType::ImageView2D,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device-&gt;CreateShaderResourceView(imageRef.get().Real(),<sp/>&amp;srvDesc,<sp/>cpuHandle);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::Submit()<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>m_cbvSrvDescriptorElementSize<sp/><sp/>=<sp/>m_device-&gt;GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>m_samplerDescriptorElementSize<sp/>=<sp/>m_device-&gt;GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>std::sort(m_textureBufferInfos.Begin(),<sp/>m_textureBufferInfos.End(),</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureBufferInfo&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureBufferInfo&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.m_set<sp/>==<sp/>b.m_set)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.m_binding<sp/>&lt;<sp/>b.m_binding;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.m_set<sp/>&lt;<sp/>b.m_set;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>std::sort(m_samplerInfos.Begin(),<sp/>m_samplerInfos.End(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerInfo&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerInfo&amp;<sp/>b)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.m_set<sp/>==<sp/>b.m_set)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.m_binding<sp/>&lt;<sp/>b.m_binding;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.m_set<sp/>&lt;<sp/>b.m_set;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>U32<sp/>inputsTillNow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12ScopedCommandBuffer<sp/>cmdBuffer(m_device,<sp/>D3D12_COMMAND_LIST_TYPE_BUNDLE,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>m_secondaryCommandBuffers.PushBack(cmdBuffer);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassInputs<sp/>=<sp/>m_renderPasses[idx].get().GetInputImages();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(renderPassInputs.GetSize()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CreateRenderPassInputTargetSRV(renderPassInputs,<sp/>inputsTillNow);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputsTillNow<sp/>+=<sp/>renderPassInputs.GetSize();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>m_pipelines.Reserve(m_renderPasses.GetSize());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Submitting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>m_pipelineFactory.Submit(m_device,<sp/>m_renderPasses,<sp/>m_pipelines);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeSubmitBuffer<sp/>=<sp/>D3D12ScopedCommandBuffer(m_device,<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.CreateGraphicsCommandList(m_device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeCommandList<sp/>=<sp/>oneTimeSubmitBuffer.GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT64<sp/>stagingBufferSize<sp/>=<sp/>GetRequiredIntermediateSize(m_stagingBuffer.Real(),<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>D3D12Core::CopyBuffer(oneTimeCommandList,<sp/>m_mainBuffer,<sp/>m_stagingBuffer,<sp/>stagingBufferSize);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>m_mainBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_SOURCE,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>SetTextureData(oneTimeCommandList);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>SetSamplerData();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>m_mainBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>oneTimeCommandList-&gt;Close();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.Execute(m_device,<sp/>m_graphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.WaitForComplete(m_graphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Created<sp/>Pipelines&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>drawableHeapOffset<sp/>=<sp/>m_descriptorsPerDrawable<sp/>*<sp/>m_cbvSrvDescriptorElementSize;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>heapHandle(m_descriptorDrawableHeap-&gt;GetCPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetToDrawableHeap,<sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Creating<sp/>Resource<sp/>Views&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>:<sp/>m_drawables)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>drawable.CreateResourceViews(m_device,<sp/>m_mainBuffer.Real(),<sp/>m_vertexDataSlots,<sp/>m_gpuBuffers,<sp/>heapHandle,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cbvSrvDescriptorElementSize,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>heapHandle.Offset(drawableHeapOffset);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>Command<sp/>Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Begin<sp/>Recording&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>U32<sp/>sampledImageRecorded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>U32<sp/>inputsRecorded<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>U32<sp/>samplersRecorded<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassRef<sp/>:<sp/>m_renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderPassRef.get();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassDescriptorCount<sp/><sp/><sp/><sp/>=<sp/>renderPass.GetDescriptorCount();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassRootSignatureTable<sp/>=<sp/>renderPass.GetRootSignatureTable();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassInputs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderPass.GetInputInfo();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>m_secondaryCommandBuffers[idx].CreateGraphicsCommandList(m_device,<sp/>m_pipelines[idx].GetState(),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bundleCommandList<sp/>=<sp/>m_secondaryCommandBuffers[idx].GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>Heap<sp/>Handles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_GPU_DESCRIPTOR_HANDLE<sp/>textureGPUHandle(m_descriptorDrawableHeap-&gt;GetGPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sampledImageRecorded,<sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CD3DX12_GPU_DESCRIPTOR_HANDLE<sp/>inputsGPUHandle(m_descriptorDrawableHeap-&gt;GetGPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetToRenderPassInputs<sp/>+<sp/>inputsRecorded,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_GPU_DESCRIPTOR_HANDLE<sp/>samplerGPUHandle;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(renderPassDescriptorCount.m_numSamplerSlots<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>samplerGPUHandle<sp/>=<sp/>CD3DX12_GPU_DESCRIPTOR_HANDLE(m_descriptorSamplerHeap-&gt;GetGPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplersRecorded,<sp/>m_samplerDescriptorElementSize);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_GPU_DESCRIPTOR_HANDLE<sp/>uboGPUHandle(m_descriptorDrawableHeap-&gt;GetGPUDescriptorHandleForHeapStart(),</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offsetToDrawableHeap,<sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>bundleCommandList-&gt;SetDescriptorHeaps(UINT(m_allHeaps.GetSize()),<sp/>m_allHeaps.Data());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>bundleCommandList-&gt;IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>bundleCommandList-&gt;SetGraphicsRootSignature(renderPass.GetRootSignature());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>U32<sp/>tableIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tableEntry<sp/>:<sp/>renderPassRootSignatureTable)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableEntry.m_type<sp/>==<sp/>DescriptorType::SampledImage)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DEBUG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>Texture<sp/>Descriptor<sp/>Table<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>tableIdx);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bundleCommandList-&gt;SetGraphicsRootDescriptorTable(tableIdx,<sp/>textureGPUHandle);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureGPUHandle.Offset(tableEntry.m_count,<sp/>m_cbvSrvDescriptorElementSize);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableEntry.m_type<sp/>==<sp/>DescriptorType::Sampler)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DEBUG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>Sampler<sp/>Descriptor<sp/>Table<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>tableIdx);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bundleCommandList-&gt;SetGraphicsRootDescriptorTable(tableIdx,<sp/>samplerGPUHandle);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samplerGPUHandle.Offset(tableEntry.m_count,<sp/>m_samplerDescriptorElementSize);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tableIdx;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(renderPassInputs.GetSize()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bundleCommandList-&gt;SetGraphicsRootDescriptorTable(renderPassRootSignatureTable.GetSize(),<sp/>inputsGPUHandle);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DEBUG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Setting<sp/>Input<sp/>Attachment<sp/>Descriptor<sp/>Table<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRootSignatureTable.GetSize());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>inputsRecorded<sp/>+=<sp/>renderPassInputs.GetSize();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>samplersRecorded<sp/>+=<sp/>renderPassDescriptorCount.m_numSamplerSlots;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>sampledImageRecorded<sp/>+=<sp/>renderPassDescriptorCount.m_numSampledImageSlots;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Recording<sp/>Commands<sp/>For<sp/>Drawables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>:<sp/>m_drawables)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>drawable.RecordCommands(bundleCommandList,<sp/>uboGPUHandle,<sp/>m_cbvSrvDescriptorElementSize,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRootSignatureTable,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uboGPUHandle.Offset(drawableHeapOffset);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Closing<sp/>Bundle<sp/>Command<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>bundleCommandList-&gt;Close(),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>close<sp/>bundle<sp/>Command<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::BeginUpdates()<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>m_updateBuffer.Reset();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>m_bufferUpdates.Reset();</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::UpdateUniformData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Update<sp/>Uniform<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>(size<sp/>+<sp/>D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT<sp/>-<sp/>1)<sp/>&amp;<sp/>~(D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_updateBuffer.AppendData(buffer,<sp/>size,<sp/>D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descriptorSlot<sp/>=<sp/>m_globalDescriptorSlots[slot];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>bufferId<sp/>=<sp/>drawable.GetSingleUniformBufferInfo(descriptorSlot);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>allUboInfos<sp/>=<sp/>drawable.GetUniformBufferInfos();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>BufferUpdate<sp/>info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>info.m_type<sp/>=<sp/>BufferUpdateType::UniformBuffer;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>info.m_idx<sp/>=<sp/>bufferId;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>info.m_updateOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>info.m_updateByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>info.m_gpuOffset<sp/>=<sp/>allUboInfos[bufferId].m_offset;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>info.m_gpuByteSize<sp/>=<sp/>allUboInfos[bufferId].m_byteSize;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>m_bufferUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::UpdateTextureData(SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>descriptorSlot<sp/>=<sp/>m_globalDescriptorSlots[slot];</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>bufferId<sp/>=<sp/>GetSingleTextureBufferInfo(descriptorSlot);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc&amp;<sp/>desc<sp/>=<sp/>m_textureBufferInfos[bufferId].m_desc;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Updating<sp/>Texture<sp/>Requested<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>slot,<sp/>desc.m_size);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>textureWidthBytes<sp/>=<sp/>desc.m_bounds.m_width<sp/>*<sp/>GetFormatSize(desc.m_format);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_updateBuffer.AppendTextureData(buffer,<sp/>desc.m_size,<sp/>512,<sp/>textureWidthBytes,<sp/>D3D12_TEXTURE_DATA_PITCH_ALIGNMENT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>BufferUpdate<sp/>info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>info.m_type<sp/>=<sp/>BufferUpdateType::SampledImage;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>info.m_idx<sp/>=<sp/>bufferId;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>info.m_updateOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>info.m_updateByteSize<sp/>=<sp/>desc.m_size;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>info.m_gpuOffset<sp/>=<sp/>m_textureBufferInfos[bufferId].m_offset;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>info.m_gpuByteSize<sp/>=<sp/>m_textureBufferInfos[bufferId].m_byteSize;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>m_bufferUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::UpdateVertexData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Update<sp/>Uniform<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_updateBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>bufferInfoId<sp/>=<sp/>drawable.GetSingleVertexBufferInfo(slot);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>allVertexBufferInfos<sp/>=<sp/>drawable.GetVertexBufferInfos();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>BufferUpdate<sp/>info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>info.m_type<sp/>=<sp/>BufferUpdateType::Vertex;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>info.m_idx<sp/>=<sp/>bufferInfoId;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>info.m_updateOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>info.m_updateByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>info.m_gpuOffset<sp/>=<sp/>allVertexBufferInfos[bufferInfoId].m_offset;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>info.m_gpuByteSize<sp/>=<sp/>allVertexBufferInfos[bufferInfoId].m_byteSize;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>m_bufferUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::UpdateInstanceData(DrawableID<sp/>drawableId,<sp/>SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer,<sp/>U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Drawable<sp/>Pool:<sp/>Update<sp/>Uniform<sp/>Requested<sp/>for<sp/>Drawable:<sp/>%d<sp/>for<sp/>Slot:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>drawableId,<sp/>slot,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>assert(m_drawables.GetSize()<sp/>&gt;<sp/>drawableId);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawable<sp/>=<sp/>m_drawables[drawableId];</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_updateBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>bufferInfoId<sp/>=<sp/>drawable.GetSingleInstanceBufferInfo(slot);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>allInstanceBufferInfos<sp/>=<sp/>drawable.GetInstanceBufferInfos();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>BufferUpdate<sp/>info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>info.m_type<sp/>=<sp/>BufferUpdateType::Instance;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>info.m_idx<sp/>=<sp/>bufferInfoId;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>info.m_updateOffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>info.m_updateByteSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>info.m_gpuOffset<sp/>=<sp/>allInstanceBufferInfos[bufferInfoId].m_offset;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>info.m_gpuByteSize<sp/>=<sp/>allInstanceBufferInfos[bufferInfoId].m_byteSize;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>m_bufferUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::SubmitUpdates()<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeSubmitBuffer<sp/>=<sp/>D3D12ScopedCommandBuffer(m_device,<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.CreateGraphicsCommandList(m_device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeCommandList<sp/>=<sp/>oneTimeSubmitBuffer.GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>m_mainBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>Custom<sp/>Regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>updateRegion<sp/>:<sp/>m_bufferUpdates)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateRegion.m_type<sp/>==<sp/>BufferUpdateType::UniformBuffer)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oneTimeCommandList-&gt;CopyBufferRegion(m_mainBuffer.Real(),<sp/>updateRegion.m_gpuOffset,<sp/>m_updateBuffer.Real(),<sp/>updateRegion.m_updateOffset,<sp/>updateRegion.m_updateByteSize);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateRegion.m_type<sp/>==<sp/>BufferUpdateType::Vertex<sp/>||<sp/>updateRegion.m_type<sp/>==<sp/>BufferUpdateType::Instance)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oneTimeCommandList-&gt;CopyBufferRegion(m_mainBuffer.Real(),<sp/>updateRegion.m_gpuOffset,<sp/>m_updateBuffer.Real(),<sp/>updateRegion.m_updateOffset,<sp/>updateRegion.m_updateByteSize);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateRegion.m_type<sp/>==<sp/>BufferUpdateType::SampledImage)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetImage<sp/>=<sp/>m_images[updateRegion.m_idx];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.CopyFromBuffer(m_device,<sp/>oneTimeCommandList,<sp/>m_updateBuffer,<sp/>updateRegion.m_updateOffset);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>m_mainBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>oneTimeCommandList-&gt;Close();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.Execute(m_device,<sp/>m_graphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>oneTimeSubmitBuffer.WaitForComplete(m_graphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ID3D12DescriptorHeap*&gt;</ref>&amp;<sp/>D3D12DrawablePool::GetAllDescriptorHeaps()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allHeaps;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">ID3D12PipelineState*<sp/>D3D12DrawablePool::GetPipelineState(U32<sp/>renderPassId)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pipelines[renderPassId].GetState();</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">ID3D12GraphicsCommandList*<sp/>D3D12DrawablePool::GetSecondaryCommandList(U32<sp/>renderPassId)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_secondaryCommandBuffers[renderPassId].GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::GetRecordEntries(<ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&lt;std::pair&lt;U32,<sp/>D3D12RenderPassRecordEntry&gt;&gt;&amp;<sp/>recordList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>recordList.<ref refid="class_azura_1_1_containers_1_1_vector_1af9aea7a8da9e449530132e50d85ca221" kindref="member">Reserve</ref>(m_renderPasses.GetSize());</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>:<sp/>m_renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12RenderPassRecordEntry<sp/>entry<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.m_bundle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetSecondaryCommandList(idx);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.m_pso<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetPipelineState(idx);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>recordList.PushBack(std::make_pair(renderPass.get().GetInternalId(),<sp/>entry));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::CreateRenderPassReferences(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedRenderPass&gt;&amp;<sp/>renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>:<sp/>renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(createInfo.m_renderPasses.Begin(),<sp/>createInfo.m_renderPasses.End(),<sp/>[&amp;](U32<sp/>passId)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderPass.GetId()<sp/>==<sp/>passId;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>createInfo.m_renderPasses.End())<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>Pool<sp/>for<sp/>Render<sp/>Pass:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPasses.PushBack(std::reference_wrapper&lt;D3D12ScopedRenderPass&gt;(renderPasses[idx]));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>Adding<sp/>Render<sp/>Passes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::CreateInputAttributes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Adding<sp/>Input<sp/>Attributes<sp/>to<sp/>Pipeline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vertexSlot<sp/>:<sp/>createInfo.m_vertexDataSlots)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pipelineFactory.BulkAddAttributeDescription(vertexSlot,<sp/>idx);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>Adding<sp/>Input<sp/>Attributes<sp/>to<sp/>Pipeline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12DrawablePool::CreateDescriptorHeap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>m_allHeaps.Reserve(2);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>m_offsetToDrawableHeap<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>m_offsetToRenderPassInputs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>U32<sp/>numSamplers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>:<sp/>m_renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>count<sp/>=<sp/>renderPass.get().GetDescriptorCount();</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>m_offsetToDrawableHeap<sp/>+=<sp/>count.m_numSampledImageSlots;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>m_offsetToDrawableHeap<sp/>+=<sp/>renderPass.get().GetInputInfo().GetSize();<sp/></highlight><highlight class="comment">//<sp/>RTV<sp/>as<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>m_offsetToRenderPassInputs<sp/>+=<sp/>count.m_numSampledImageSlots;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorsPerDrawable<sp/>+=<sp/>count.m_numUniformSlots;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>numSamplers<sp/>+=<sp/>count.m_numSamplerSlots;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Allocating<sp/>Descriptor<sp/>Heaps&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>to<sp/>Drawable:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>m_offsetToDrawableHeap);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>to<sp/>Render<sp/>Pass:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>m_offsetToRenderPassInputs);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Num<sp/>Samplers:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>numSamplers);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>heapDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>heapDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_offsetToDrawableHeap<sp/>+<sp/>createInfo.m_numDrawables<sp/>*<sp/>m_descriptorsPerDrawable;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>heapDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>heapDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_device-&gt;CreateDescriptorHeap(&amp;heapDesc,<sp/>IID_PPV_ARGS(&amp;m_descriptorDrawableHeap)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Drawable<sp/>Descriptor<sp/>Heap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>m_allHeaps.PushBack(m_descriptorDrawableHeap.Get());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numSamplers<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>samplerDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>numSamplers;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_device-&gt;CreateDescriptorHeap(&amp;samplerDesc,<sp/>IID_PPV_ARGS(&amp;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSamplerHeap)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Sampler<sp/>Descriptor<sp/>Heap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allHeaps.PushBack(m_descriptorSamplerHeap.Get());</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>D3D12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/D3D12/D3D12DrawablePool.cpp"/>
  </compounddef>
</doxygen>
