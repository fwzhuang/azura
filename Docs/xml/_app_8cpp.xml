<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_app_8cpp" kind="file" language="C++">
    <compoundname>App.cpp</compoundname>
    <includes refid="_app_8h" local="yes">App/App.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes local="no">random</includes>
    <incdepgraph>
      <node id="6867">
        <label>Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6860" relation="include">
        </childnode>
      </node>
      <node id="6875">
        <label>D3D12/D3D12TextureManager.h</label>
        <link refid="_d3_d12_texture_manager_8h_source"/>
        <childnode refid="6876" relation="include">
        </childnode>
      </node>
      <node id="6868">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6869" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6843">
        <label>functional</label>
      </node>
      <node id="6873">
        <label>GLTFSDK/Document.h</label>
      </node>
      <node id="6844">
        <label>iterator</label>
      </node>
      <node id="6880">
        <label>Forward/ForwardComputeScene.h</label>
        <link refid="_forward_compute_scene_8h_source"/>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
      </node>
      <node id="6855">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6872">
        <label>AssetManager/GLTFLoader.h</label>
        <link refid="_g_l_t_f_loader_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6873" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
      </node>
      <node id="6836">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6837" relation="include">
        </childnode>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6848" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6850" relation="include">
        </childnode>
        <childnode refid="6858" relation="include">
        </childnode>
      </node>
      <node id="6850">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6838" relation="include">
        </childnode>
        <childnode refid="6851" relation="include">
        </childnode>
        <childnode refid="6852" relation="include">
        </childnode>
        <childnode refid="6853" relation="include">
        </childnode>
        <childnode refid="6854" relation="include">
        </childnode>
      </node>
      <node id="6863">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="6846" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6862" relation="include">
        </childnode>
      </node>
      <node id="6835">
        <label>App/App.h</label>
        <link refid="_app_8h_source"/>
        <childnode refid="6836" relation="include">
        </childnode>
        <childnode refid="6859" relation="include">
        </childnode>
        <childnode refid="6863" relation="include">
        </childnode>
        <childnode refid="6864" relation="include">
        </childnode>
        <childnode refid="6866" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6879" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
        <childnode refid="6881" relation="include">
        </childnode>
      </node>
      <node id="6865">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6846">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6847" relation="include">
        </childnode>
      </node>
      <node id="6856">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6841">
        <label>cassert</label>
      </node>
      <node id="6853">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6849">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6837" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6850" relation="include">
        </childnode>
        <childnode refid="6855" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6854" relation="include">
        </childnode>
      </node>
      <node id="6864">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6865" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6881">
        <label>ForwardPlus/ForwardPlusComputeScene.h</label>
        <link refid="_forward_plus_compute_scene_8h_source"/>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
      </node>
      <node id="6847">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6870">
        <label>App/LightTexture.h</label>
        <link refid="_light_texture_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6875" relation="include">
        </childnode>
      </node>
      <node id="6857">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6837">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6838" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6854">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6871">
        <label>App/Common.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_common_8h_source"/>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6872" relation="include">
        </childnode>
      </node>
      <node id="6883">
        <label>random</label>
      </node>
      <node id="6860">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6838">
        <label>tuple</label>
      </node>
      <node id="6845">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6841" relation="include">
        </childnode>
        <childnode refid="6842" relation="include">
        </childnode>
        <childnode refid="6846" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6877">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6846" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6862">
        <label>vector</label>
      </node>
      <node id="6840">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6841" relation="include">
        </childnode>
        <childnode refid="6842" relation="include">
        </childnode>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6844" relation="include">
        </childnode>
        <childnode refid="6845" relation="include">
        </childnode>
        <childnode refid="6846" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6847" relation="include">
        </childnode>
      </node>
      <node id="6866">
        <label>Camera/FlyThroughCamera.h</label>
        <link refid="_fly_through_camera_8h_source"/>
        <childnode refid="6867" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
      </node>
      <node id="6861">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6862" relation="include">
        </childnode>
      </node>
      <node id="6834">
        <label>Source/Samples/2_DeferredRenderer/Src/App.cpp</label>
        <link refid="_app_8cpp"/>
        <childnode refid="6835" relation="include">
        </childnode>
        <childnode refid="6882" relation="include">
        </childnode>
        <childnode refid="6883" relation="include">
        </childnode>
      </node>
      <node id="6848">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6850" relation="include">
        </childnode>
      </node>
      <node id="6879">
        <label>Forward/ForwardScene.h</label>
        <link refid="_forward_scene_8h_source"/>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
      </node>
      <node id="6851">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6839">
        <label>Types.h</label>
      </node>
      <node id="6882">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6846" relation="include">
        </childnode>
        <childnode refid="6836" relation="include">
        </childnode>
        <childnode refid="6876" relation="include">
        </childnode>
      </node>
      <node id="6874">
        <label>GLTFSDK/GLTFResourceReader.h</label>
      </node>
      <node id="6869">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6859">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6836" relation="include">
        </childnode>
        <childnode refid="6860" relation="include">
        </childnode>
        <childnode refid="6861" relation="include">
        </childnode>
      </node>
      <node id="6878">
        <label>App/Scene.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_scene_8h_source"/>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6859" relation="include">
        </childnode>
        <childnode refid="6876" relation="include">
        </childnode>
        <childnode refid="6867" relation="include">
        </childnode>
      </node>
      <node id="6858">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
      </node>
      <node id="6876">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6864" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6861" relation="include">
        </childnode>
      </node>
      <node id="6842">
        <label>cstring</label>
      </node>
      <node id="6852">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;App/App.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_memory" kindref="compound">Azura::Memory</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">App::App()<sp/>:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>log_App(Log(</highlight><highlight class="stringliteral">&quot;App&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>m_mainBuffer(0x640</highlight><highlight class="stringliteral">&apos;0000),</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/>m_mainAllocator(m_mainBuffer,<sp/>0x320&apos;</highlight><highlight class="normal">0000),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>m_drawableAllocator(m_mainBuffer,<sp/>0x320</highlight><highlight class="stringliteral">&apos;0000),</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/>m_lights(NUM_LIGHTS,<sp/>m_mainAllocator),</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/>m_camera(1280,<sp/>720),</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/>m_forwardScene(m_mainAllocator,<sp/>m_drawableAllocator),</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/>m_forwardComputeScene(m_mainAllocator,<sp/>m_drawableAllocator),</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/>m_forwardPlusComputeScene(m_mainAllocator,<sp/>m_drawableAllocator)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">void<sp/>App::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/>//<sp/>Init<sp/>Sponza<sp/>Mesh</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/>m_sponza.p_interface<sp/>=<sp/>std::make_unique&lt;GLTFMeshInterface&gt;(GLTFLoader::LoadFromJSON(&quot;sponza&quot;,<sp/>AssetLocation::Meshes,<sp/>log_App));</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/>m_sponza.m_vertexData<sp/>=<sp/>m_sponza.p_interface-&gt;GetPositionBuffer(0,<sp/>0,<sp/>m_sponza.m_vertexDataSize,<sp/>m_sponza.m_numVertices);</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/>m_sponza.m_normalData<sp/>=<sp/>m_sponza.p_interface-&gt;GetNormalBuffer(0,<sp/>0,<sp/>m_sponza.m_normalDataSize,<sp/>m_sponza.m_numNormals);</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/>m_sponza.m_uvData<sp/>=<sp/>m_sponza.p_interface-&gt;GetUVBuffer(0,<sp/>0,<sp/>m_sponza.m_uvDataSize,<sp/>m_sponza.m_numUV);</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/>m_sponza.m_indexData<sp/>=<sp/>m_sponza.p_interface-&gt;GetIndexBuffer(0,<sp/>0,<sp/>m_sponza.m_indexDataSize,<sp/>m_sponza.m_numIndices);</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/>//<sp/>Init<sp/>Light<sp/>Texture<sp/>Sampler</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/>m_lightSamplerDesc.m_filter<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TextureFilter::MinMagMipPoint;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/>m_lightSamplerDesc.m_addressModeU<sp/>=<sp/>TextureAddressMode::Clamp;</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/>m_lightSamplerDesc.m_addressModeV<sp/>=<sp/>TextureAddressMode::Clamp;</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/>m_lightSamplerDesc.m_addressModeW<sp/>=<sp/>TextureAddressMode::Clamp;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">#if<sp/>defined(FORWARD_SCENE)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/>const<sp/>String<sp/>appName<sp/>=<sp/>&quot;Forward<sp/>without<sp/>Compute&quot;;</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">#elif<sp/>defined(FORWARD_COMPUTE_SCENE)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/>const<sp/>String<sp/>appName<sp/>=<sp/>&quot;Forward<sp/>with<sp/>Compute&quot;;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">#elif<sp/>defined(FORWARD_PLUS_COMPUTE_SCENE)</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/>const<sp/>String<sp/>appName<sp/>=<sp/>&quot;Forward<sp/>Plus<sp/>with<sp/>Compute&quot;;</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/>//<sp/>Init<sp/>Window<sp/>&amp;<sp/>Camera</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/>p_window<sp/>=<sp/>RenderSystem::CreateApplicationWindow(appName,<sp/>1280,<sp/>720);</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_App,<sp/>p_window-&gt;Initialize(),<sp/>&quot;Cannot<sp/>Initialize<sp/>Window&quot;);</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;SetCursorState(CursorState::Hidden);</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;SetUpdateCallback([this](float<sp/>timeDelta)</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Update(timeDelta);</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;SetMouseEventCallback([this](MouseEvent<sp/>e)</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_camera.OnMouseEvent(e);</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>p_window-&gt;ResetCursor();</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;SetKeyEventCallback([this](KeyEvent<sp/>e)</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_camera.OnKeyEvent(e);</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/>m_camera.SetTranslationStepSize(5.0f);</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/>m_camera.SetSensitivity(0.5f);</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/>m_camera.SetPosition(Vector3f(-10,<sp/>10,<sp/>0));</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/>m_camera.SetReferencePoint(Vector3f(-5,<sp/>10,<sp/>0));</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/>//<sp/>Trigger<sp/>a<sp/>recompute</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/>m_camera.Recompute();</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/>//<sp/>Init<sp/>UBO<sp/>Buffer</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO.m_model(1,<sp/>3)<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO.m_modelInvTranspose<sp/>=<sp/>m_sceneUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/>GenerateLights();</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/>//<sp/>Init<sp/>All<sp/>Scenes<sp/>here</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">#if<sp/>defined(FORWARD_SCENE)</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/>m_forwardScene.Initialize(*p_window,<sp/>m_camera,<sp/>m_sponza,<sp/>m_sceneUBO,<sp/>m_lightSamplerDesc,<sp/>m_lights);</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/>p_activeScene<sp/>=<sp/>&amp;m_forwardScene;</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">#elif<sp/>defined(FORWARD_COMPUTE_SCENE)</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/>m_forwardComputeScene.Initialize(*p_window,<sp/>m_camera,<sp/>m_sponza,<sp/>m_sceneUBO,<sp/>m_lightSamplerDesc,<sp/>m_lights);</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/>p_activeScene<sp/>=<sp/>&amp;m_forwardComputeScene;</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">#elif<sp/>defined(FORWARD_PLUS_COMPUTE_SCENE)</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/>m_forwardPlusComputeScene.Initialize(*p_window,<sp/>m_camera,<sp/>m_sponza,<sp/>m_sceneUBO,<sp/>m_lightSamplerDesc,<sp/>m_lights);</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/>p_activeScene<sp/>=<sp/>&amp;m_forwardPlusComputeScene;</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">void<sp/>App::Update(float<sp/>timeDelta)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/>for<sp/>(auto&amp;<sp/>light<sp/>:<sp/>m_lights)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_position[1]<sp/>+=<sp/>(LIGHT_DT<sp/>*<sp/>timeDelta);</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Wrap<sp/>lights<sp/>from<sp/>bottom<sp/>to<sp/>top</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_position[1]<sp/>=<sp/>std::fmod(light.m_position[1]<sp/>+<sp/>LIGHT_MAX[1]<sp/>-<sp/>LIGHT_MIN[1],<sp/>LIGHT_MAX[1]<sp/>+<sp/>LIGHT_MIN[1]);</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/>//<sp/>Camera<sp/>Updates</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/>m_camera.Update(timeDelta);</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/>m_sceneUBO.m_viewProj<sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/>p_activeScene-&gt;Update(timeDelta,<sp/>m_camera,<sp/>m_sceneUBO,<sp/>m_lights);</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">void<sp/>App::Run()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/>LOG_INF(log_App,<sp/>LOG_LEVEL,<sp/>&quot;Running<sp/>Application!&quot;);</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;StartListening();</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral">void<sp/>App::CleanUp()<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/>m_forwardScene.CleanUp();</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/>p_window-&gt;Destroy();</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">void<sp/>App::GenerateLights()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/>std::mt19937<sp/>mt(rd());</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/>const<sp/>std::uniform_real_distribution&lt;float&gt;<sp/>uniformX(LIGHT_MIN[0],<sp/>LIGHT_MAX[0]);</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/>const<sp/>std::uniform_real_distribution&lt;float&gt;<sp/>uniformY(LIGHT_MIN[1],<sp/>LIGHT_MAX[1]);</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/>const<sp/>std::uniform_real_distribution&lt;float&gt;<sp/>uniformZ(LIGHT_MIN[2],<sp/>LIGHT_MAX[2]);</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/>const<sp/>std::uniform_real_distribution&lt;float&gt;<sp/>color(-0.25f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/>for<sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>NUM_LIGHTS;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PointLight<sp/>light<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_position<sp/>=<sp/>{<sp/>uniformX(mt),<sp/>uniformY(mt),<sp/>uniformZ(mt)<sp/>};</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_color<sp/>=<sp/>{<sp/>0.5f,<sp/>0.5f,<sp/>0.5f<sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_color<sp/>+=<sp/>Vector3f(color(mt),<sp/>color(mt),<sp/>color(mt));</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>light.m_radius<sp/>=<sp/>LIGHT_RADIUS;</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LOG_DBG(log_App,<sp/>LOG_LEVEL,<sp/>&quot;Generating<sp/>Light:&quot;);</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LOG_DBG(log_App,<sp/>LOG_LEVEL,<sp/>&quot;\tPos:<sp/>%f,<sp/>%f,<sp/>%f&quot;,<sp/>light.m_position[0],<sp/>light.m_position[1],<sp/>light.m_position[2]);</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LOG_DBG(log_App,<sp/>LOG_LEVEL,<sp/>&quot;\tCol:<sp/>%f,<sp/>%f,<sp/>%f&quot;,<sp/>light.m_color[0],<sp/>light.m_color[1],<sp/>light.m_color[2]);</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_lights.PushBack(light);</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Azura</highlight></codeline>
    </programlisting>
    <location file="Source/Samples/2_DeferredRenderer/Src/App.cpp"/>
  </compounddef>
</doxygen>
