<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_stack_memory_buffer__test_8cpp" kind="file" language="C++">
    <compoundname>StackMemoryBuffer_test.cpp</compoundname>
    <includes refid="_stack_memory_buffer__test_8h" local="yes">StackMemoryBuffer_test.h</includes>
    <incdepgraph>
      <node id="4409">
        <label>Source/Common/Test/StackMemoryBuffer_test.cpp</label>
        <link refid="_stack_memory_buffer__test_8cpp"/>
        <childnode refid="4410" relation="include">
        </childnode>
      </node>
      <node id="4413">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4414" relation="include">
        </childnode>
      </node>
      <node id="4412">
        <label>cassert</label>
      </node>
      <node id="4411">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="4412" relation="include">
        </childnode>
        <childnode refid="4413" relation="include">
        </childnode>
        <childnode refid="4414" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4415">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4416">
        <label>gtest/gtest.h</label>
      </node>
      <node id="4414">
        <label>Types.h</label>
      </node>
      <node id="4410">
        <label>StackMemoryBuffer_test.h</label>
        <link refid="_stack_memory_buffer__test_8h_source"/>
        <childnode refid="4411" relation="include">
        </childnode>
        <childnode refid="4416" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_stack_memory_buffer__test_8cpp_1a91a552ddf6691ee274a64fa76db1e70e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StackMemoryBufferTest, Constructs)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_stack_memory_buffer_test" kindref="compound">StackMemoryBufferTest</ref></type>
        </param>
        <param>
          <type>Constructs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/StackMemoryBuffer_test.cpp" line="5" column="1" bodyfile="Source/Common/Test/StackMemoryBuffer_test.cpp" bodystart="5" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="_stack_memory_buffer__test_8cpp_1a6a3ba7321ef4461b8d231a7089ff326a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(StackMemoryBufferTest, AllocateNormal)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_stack_memory_buffer_test" kindref="compound">StackMemoryBufferTest</ref></type>
        </param>
        <param>
          <type>AllocateNormal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/StackMemoryBuffer_test.cpp" line="13" column="1" bodyfile="Source/Common/Test/StackMemoryBuffer_test.cpp" bodystart="13" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;StackMemoryBuffer_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_memory" kindref="compound">Azura::Memory</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">TEST(<ref refid="class_stack_memory_buffer_test" kindref="compound">StackMemoryBufferTest</ref>,<sp/>Constructs)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer&lt;32&gt;</ref><sp/>target;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>ASSERT_NE(target.GetCurrentPtr(),<sp/>0u);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>ASSERT_NE(target.GetBasePtr(),<sp/>0u);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>ASSERT_EQ(target.GetSize(),<sp/>32u);</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">TEST(<ref refid="class_stack_memory_buffer_test" kindref="compound">StackMemoryBufferTest</ref>,<sp/>AllocateNormal)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>allocateAmount<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer&lt;128&gt;</ref><sp/>target;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>target.GetCurrentPtr();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>target.Allocate(allocateAmount);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3<sp/>=<sp/>target.GetCurrentPtr();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>ASSERT_NE(p2,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>ASSERT_EQ(p3<sp/>-<sp/>p1,<sp/>allocateAmount);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Common/Test/StackMemoryBuffer_test.cpp"/>
  </compounddef>
</doxygen>
