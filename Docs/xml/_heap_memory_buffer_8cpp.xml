<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_heap_memory_buffer_8cpp" kind="file" language="C++">
    <compoundname>HeapMemoryBuffer.cpp</compoundname>
    <includes refid="_heap_memory_buffer_8h" local="yes">Memory/HeapMemoryBuffer.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstdlib</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <incdepgraph>
      <node id="4302">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4303" relation="include">
        </childnode>
      </node>
      <node id="4304">
        <label>cassert</label>
      </node>
      <node id="4301">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="4302" relation="include">
        </childnode>
        <childnode refid="4303" relation="include">
        </childnode>
      </node>
      <node id="4306">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4305">
        <label>cstdlib</label>
      </node>
      <node id="4303">
        <label>Types.h</label>
      </node>
      <node id="4300">
        <label>Source/Common/Src/Memory/HeapMemoryBuffer.cpp</label>
        <link refid="_heap_memory_buffer_8cpp"/>
        <childnode refid="4301" relation="include">
        </childnode>
        <childnode refid="4304" relation="include">
        </childnode>
        <childnode refid="4305" relation="include">
        </childnode>
        <childnode refid="4306" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_memory">Azura::Memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Memory/HeapMemoryBuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Memory<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer_1a86b677a49ca2b29500cca9f62cfc1a72" kindref="member">HeapMemoryBuffer::HeapMemoryBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>blockSize)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast,<sp/>cppcoreguidelines-no-malloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>MemoryBuffer(blockSize,<sp/>reinterpret_cast&lt;AddressPtr&gt;(malloc(blockSize))),<sp/>m_isAllocationAligned(false)<sp/>{}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">HeapMemoryBuffer::HeapMemoryBuffer(U32<sp/>blockSize,<sp/>U32<sp/>alignment)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>MemoryBuffer(blockSize,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast,<sp/>cppcoreguidelines-no-malloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;AddressPtr&gt;(ALIGNED_ALLOC(alignment,<sp/>blockSize))),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_isAllocationAligned(true)<sp/>{}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">HeapMemoryBuffer::~HeapMemoryBuffer()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_memoryBlock<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isAllocationAligned)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-owning-memory,<sp/>cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ALIGNED_FREE(reinterpret_cast&lt;void*&gt;(m_memoryBlock));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-no-malloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-owning-memory,<sp/>cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>free(reinterpret_cast&lt;void*&gt;(m_memoryBlock));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-no-malloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>HeapMemoryBuffer::Allocate(U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AddressPtr<sp/>addr<sp/>=<sp/>AllocateRaw(size);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HeapMemoryBuffer::Deallocate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>UNUSED(address);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">UPTR<sp/>HeapMemoryBuffer::AllocateRaw(U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Available<sp/>&gt;<sp/>Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>assert(m_size<sp/>-<sp/>(m_currentPosition<sp/>-<sp/>m_memoryBlock)<sp/>&gt;=<sp/>size);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AddressPtr<sp/>addr<sp/>=<sp/>m_currentPosition;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>m_currentPosition<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Src/Memory/HeapMemoryBuffer.cpp"/>
  </compounddef>
</doxygen>
