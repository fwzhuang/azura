<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_azura_1_1_memory_1_1_monotonic_allocator" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Azura::Memory::MonotonicAllocator</compoundname>
    <basecompoundref refid="class_azura_1_1_memory_1_1_allocator" prot="public" virt="non-virtual">Azura::Memory::Allocator</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a378bf411770d7dbcbbe936712c7cd4d8" prot="private" static="no" mutable="no">
        <type>AddressPtr</type>
        <definition>AddressPtr Azura::Memory::MonotonicAllocator::m_headPtr</definition>
        <argsstring></argsstring>
        <name>m_headPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="48" column="1" bodyfile="Source/Common/Inc/Memory/MonotonicAllocator.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a20735d1cf52f413c47651a58eb486253" prot="private" static="no" mutable="no">
        <type><ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref> &amp;</type>
        <definition>MemoryBuffer&amp; Azura::Memory::MonotonicAllocator::m_sourceBuffer</definition>
        <argsstring></argsstring>
        <name>m_sourceBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="49" column="1" bodyfile="Source/Common/Inc/Memory/MonotonicAllocator.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a1984a1226a70c18fc6680fad9e91ccca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Memory::MonotonicAllocator::MonotonicAllocator</definition>
        <argsstring>(MemoryBuffer &amp;buffer, U32 size)</argsstring>
        <name>MonotonicAllocator</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="12" column="1" bodyfile="Source/Common/Src/Memory/MonotonicAllocator.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a32f070c855ef828389fef771a245f370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Memory::MonotonicAllocator::~MonotonicAllocator</definition>
        <argsstring>() override</argsstring>
        <name>~MonotonicAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="13" column="1" bodyfile="Source/Common/Src/Memory/MonotonicAllocator.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a52b4e07269608d4ab7e4a0f46f183af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Memory::MonotonicAllocator::MonotonicAllocator</definition>
        <argsstring>(const MonotonicAllocator &amp;other)=delete</argsstring>
        <name>MonotonicAllocator</name>
        <param>
          <type>const <ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1ac99083afa5b1376fecf99cb1e8b5ddbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;</type>
        <definition>MonotonicAllocator&amp; Azura::Memory::MonotonicAllocator::operator=</definition>
        <argsstring>(const MonotonicAllocator &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a220c110db144d3ad1442d11ae3c2c7a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Memory::MonotonicAllocator::MonotonicAllocator</definition>
        <argsstring>(MonotonicAllocator &amp;&amp;other) noexcept=default</argsstring>
        <name>MonotonicAllocator</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a5527e273b815c112b2178396e36299f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;</type>
        <definition>MonotonicAllocator&amp; Azura::Memory::MonotonicAllocator::operator=</definition>
        <argsstring>(MonotonicAllocator &amp;&amp;other) noexcept=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">MonotonicAllocator</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a5c31a835742876a7e041b6f46df17aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Azura::Memory::MonotonicAllocator::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="class_azura_1_1_memory_1_1_allocator_1a8e6578ce7e05f6f2d138f9e3385626cc">Reset</reimplements>
        <briefdescription>
<para>Reset the Memory for fresh new use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="30" column="1" bodyfile="Source/Common/Src/Memory/MonotonicAllocator.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a5a3a0d00854453236515762f28a0bfe7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * Azura::Memory::MonotonicAllocator::Allocate</definition>
        <argsstring>(U32 size, U32 alignment) override</argsstring>
        <name>Allocate</name>
        <reimplements refid="class_azura_1_1_memory_1_1_allocator_1a4ea0bf858fb03e351e2b53cf533b28e0">Allocate</reimplements>
        <param>
          <type>U32</type>
          <declname>size</declname>
        </param>
        <param>
          <type>U32</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Allocates a set number of bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bytes to Allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Alignment for the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to Memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="39" column="1" bodyfile="Source/Common/Src/Memory/MonotonicAllocator.cpp" bodystart="34" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_memory_1_1_monotonic_allocator_1a6f81ae431111a6db680ca159d9a575e1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Azura::Memory::MonotonicAllocator::Deallocate</definition>
        <argsstring>(void *address) override</argsstring>
        <name>Deallocate</name>
        <reimplements refid="class_azura_1_1_memory_1_1_allocator_1aa11b99093ae5c589b86efaddcded4933">Deallocate</reimplements>
        <param>
          <type>void *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Currently a No Op. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to Deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="45" column="1" bodyfile="Source/Common/Src/Memory/MonotonicAllocator.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="413">
        <label>Azura::Memory::Allocator</label>
        <link refid="class_azura_1_1_memory_1_1_allocator"/>
      </node>
      <node id="412">
        <label>Azura::Memory::MonotonicAllocator</label>
        <link refid="class_azura_1_1_memory_1_1_monotonic_allocator"/>
        <childnode refid="413" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="415">
        <label>Azura::Memory::Allocator</label>
        <link refid="class_azura_1_1_memory_1_1_allocator"/>
      </node>
      <node id="414">
        <label>Azura::Memory::MonotonicAllocator</label>
        <link refid="class_azura_1_1_memory_1_1_monotonic_allocator"/>
        <childnode refid="415" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Source/Common/Inc/Memory/MonotonicAllocator.h" line="10" column="1" bodyfile="Source/Common/Inc/Memory/MonotonicAllocator.h" bodystart="10" bodyend="50"/>
    <listofallmembers>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a5a3a0d00854453236515762f28a0bfe7" prot="protected" virt="virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Allocate</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a63f66173b61bcb2936c5ee42e23d6555" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Allocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a04e5f421a8ce8c63540f23ca0a6a16b4" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Allocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a4f5ab0c255db815ab88fd0bbe7b7185a" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Allocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a13a71cfb6bbfdb445a51db710597f1e3" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Allocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a45e1ae30db48775871f472d09f0ba354" prot="protected" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>BasePtr</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a6f81ae431111a6db680ca159d9a575e1" prot="protected" virt="virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Deallocate</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a378bf411770d7dbcbbe936712c7cd4d8" prot="private" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>m_headPtr</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a20735d1cf52f413c47651a58eb486253" prot="private" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>m_sourceBuffer</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a1984a1226a70c18fc6680fad9e91ccca" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>MonotonicAllocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a52b4e07269608d4ab7e4a0f46f183af6" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>MonotonicAllocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a220c110db144d3ad1442d11ae3c2c7a7" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>MonotonicAllocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a93fef7c386893fb1feb03fab6dcb9fd2" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>New</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1af2d4ccebb175af0404080ab5caddaf1b" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>NewArray</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1ac99083afa5b1376fecf99cb1e8b5ddbd" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a5527e273b815c112b2178396e36299f2" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1ac64c3f6013af712213e377b9b21bf162" prot="public" virt="non-virtual" ambiguityscope="Azura::Memory::Allocator::"><scope>Azura::Memory::MonotonicAllocator</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a6bcad4fa8aff6a3b564da97634fdcdbf" prot="public" virt="non-virtual" ambiguityscope="Azura::Memory::Allocator::"><scope>Azura::Memory::MonotonicAllocator</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1aef78ca3a361d0374827a010cef7980fd" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>RawNew</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1ab8ee7c90285ae60033b95a40e347e16d" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>RawNewArray</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a5c31a835742876a7e041b6f46df17aa1" prot="public" virt="virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Reset</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a3786ae37c581e3e8e221b51fa4c982e0" prot="protected" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>Size</name></member>
      <member refid="class_azura_1_1_memory_1_1_allocator_1a7ae01cfa01f9e4354c9d811d899aa1e1" prot="public" virt="virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>~Allocator</name></member>
      <member refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a32f070c855ef828389fef771a245f370" prot="public" virt="non-virtual"><scope>Azura::Memory::MonotonicAllocator</scope><name>~MonotonicAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
