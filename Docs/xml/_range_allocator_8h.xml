<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_range_allocator_8h" kind="file" language="C++">
    <compoundname>RangeAllocator.h</compoundname>
    <includes refid="_allocator_8h" local="yes">Allocator.h</includes>
    <includes local="yes">Types.h</includes>
    <includes local="no">vector</includes>
    <includedby refid="_renderer__test_8h" local="yes">Source/Azura/RenderSystem/Test/Renderer_test.h</includedby>
    <includedby refid="_range_allocator_8cpp" local="yes">Source/Common/Src/Memory/RangeAllocator.cpp</includedby>
    <includedby refid="_range_allocator__test_8h" local="yes">Source/Common/Test/RangeAllocator_test.h</includedby>
    <includedby refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h" local="yes">Source/Samples/0_TestZone/Inc/TestZone/AppRenderer.h</includedby>
    <includedby refid="_app_8h" local="yes">Source/Samples/2_DeferredRenderer/Inc/App/App.h</includedby>
    <includedby refid="3___cloth_sim_2_inc_2_cloth_sim_2_app_renderer_8h" local="yes">Source/Samples/3_ClothSim/Inc/ClothSim/AppRenderer.h</includedby>
    <incdepgraph>
      <node id="4006">
        <label>functional</label>
      </node>
      <node id="4004">
        <label>Source/Common/Inc/Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h"/>
        <childnode refid="4005" relation="include">
        </childnode>
        <childnode refid="4007" relation="include">
        </childnode>
        <childnode refid="4009" relation="include">
        </childnode>
      </node>
      <node id="4005">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4006" relation="include">
        </childnode>
        <childnode refid="4007" relation="include">
        </childnode>
        <childnode refid="4008" relation="include">
        </childnode>
      </node>
      <node id="4008">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4009">
        <label>vector</label>
      </node>
      <node id="4007">
        <label>Types.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4010">
        <label>Source/Common/Inc/Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h"/>
        <childnode refid="4011" relation="include">
        </childnode>
        <childnode refid="4012" relation="include">
        </childnode>
        <childnode refid="4013" relation="include">
        </childnode>
        <childnode refid="4014" relation="include">
        </childnode>
        <childnode refid="4015" relation="include">
        </childnode>
      </node>
      <node id="4014">
        <label>Source/Samples/2_DeferredRenderer/Inc/App/App.h</label>
        <link refid="_app_8h_source"/>
      </node>
      <node id="4015">
        <label>Source/Samples/3_ClothSim/Inc/ClothSim/AppRenderer.h</label>
        <link refid="3___cloth_sim_2_inc_2_cloth_sim_2_app_renderer_8h_source"/>
      </node>
      <node id="4013">
        <label>Source/Samples/0_TestZone/Inc/TestZone/AppRenderer.h</label>
        <link refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h_source"/>
      </node>
      <node id="4012">
        <label>Source/Common/Test/RangeAllocator_test.h</label>
        <link refid="_range_allocator__test_8h_source"/>
      </node>
      <node id="4011">
        <label>Source/Azura/RenderSystem/Test/Renderer_test.h</label>
        <link refid="_renderer__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_azura_1_1_memory_1_1_range_allocator" prot="public">Azura::Memory::RangeAllocator</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_memory">Azura::Memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Allocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Memory<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MemoryBuffer;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_azura_1_1_memory_1_1_range_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>(<ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref>&amp;<sp/>buffer,<sp/>U32<sp/>size);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>~<ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>Copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>Move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>(<ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">RangeAllocator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_UNIT_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;MemoryRange&gt;&amp;<sp/>GetFreeRanges()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_freeRanges;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;MemoryRange&gt;&amp;<sp/>GetOccupiedRanges()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_occupiedRanges;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Allocate(U32<sp/>size,<sp/>U32<sp/>alignment)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Deallocate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref>&amp;<sp/>m_sourceBuffer;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Needs<sp/>a<sp/>performance<sp/>boost<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>std::vector&lt;MemoryRange&gt;<sp/>m_freeRanges{1,<sp/><ref refid="struct_azura_1_1_memory_1_1_memory_range" kindref="compound">MemoryRange</ref>(0,<sp/>Size())};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::vector&lt;MemoryRange&gt;<sp/>m_occupiedRanges;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Inc/Memory/RangeAllocator.h"/>
  </compounddef>
</doxygen>
