<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_forward_plus_compute_scene_8cpp" kind="file" language="C++">
    <compoundname>ForwardPlusComputeScene.cpp</compoundname>
    <includes refid="_forward_plus_compute_scene_8h" local="yes">ForwardPlus/ForwardPlusComputeScene.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_pool_primitives_8h" local="yes">Generic/PoolPrimitives.h</includes>
    <incdepgraph>
      <node id="6972">
        <label>Camera/Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6965" relation="include">
        </childnode>
      </node>
      <node id="6974">
        <label>D3D12/D3D12TextureManager.h</label>
        <link refid="_d3_d12_texture_manager_8h_source"/>
        <childnode refid="6968" relation="include">
        </childnode>
      </node>
      <node id="6936">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6937" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6943">
        <label>functional</label>
      </node>
      <node id="6940">
        <label>GLTFSDK/Document.h</label>
      </node>
      <node id="6948">
        <label>iterator</label>
      </node>
      <node id="6959">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6939">
        <label>AssetManager/GLTFLoader.h</label>
        <link refid="_g_l_t_f_loader_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6940" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
      </node>
      <node id="6975">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6976" relation="include">
        </childnode>
        <childnode refid="6969" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6962">
        <label>Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6952" relation="include">
        </childnode>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6963" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6954" relation="include">
        </childnode>
        <childnode refid="6964" relation="include">
        </childnode>
      </node>
      <node id="6954">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6955" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6957" relation="include">
        </childnode>
        <childnode refid="6958" relation="include">
        </childnode>
      </node>
      <node id="6970">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6950">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6943" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
      </node>
      <node id="6960">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6946">
        <label>cassert</label>
      </node>
      <node id="6957">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6944">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6952" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6954" relation="include">
        </childnode>
        <childnode refid="6959" relation="include">
        </childnode>
        <childnode refid="6960" relation="include">
        </childnode>
        <childnode refid="6961" relation="include">
        </childnode>
        <childnode refid="6958" relation="include">
        </childnode>
      </node>
      <node id="6969">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6970" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6933">
        <label>ForwardPlus/ForwardPlusComputeScene.h</label>
        <link refid="_forward_plus_compute_scene_8h_source"/>
        <childnode refid="6934" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6973" relation="include">
        </childnode>
      </node>
      <node id="6976">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6970" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
      </node>
      <node id="6951">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6973">
        <label>App/LightTexture.h</label>
        <link refid="_light_texture_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6974" relation="include">
        </childnode>
      </node>
      <node id="6961">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6952">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6958">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6935">
        <label>App/Common.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_common_8h_source"/>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
      </node>
      <node id="6932">
        <label>Source/Samples/2_DeferredRenderer/Src/ForwardPlusComputeScene.cpp</label>
        <link refid="_forward_plus_compute_scene_8cpp"/>
        <childnode refid="6933" relation="include">
        </childnode>
        <childnode refid="6971" relation="include">
        </childnode>
        <childnode refid="6975" relation="include">
        </childnode>
        <childnode refid="6977" relation="include">
        </childnode>
        <childnode refid="6978" relation="include">
        </childnode>
      </node>
      <node id="6965">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6953">
        <label>tuple</label>
      </node>
      <node id="6949">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6947" relation="include">
        </childnode>
        <childnode refid="6950" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6971">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6950" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6967">
        <label>vector</label>
      </node>
      <node id="6945">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6947" relation="include">
        </childnode>
        <childnode refid="6943" relation="include">
        </childnode>
        <childnode refid="6948" relation="include">
        </childnode>
        <childnode refid="6949" relation="include">
        </childnode>
        <childnode refid="6950" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
      </node>
      <node id="6966">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6967" relation="include">
        </childnode>
      </node>
      <node id="6978">
        <label>Generic/PoolPrimitives.h</label>
        <link refid="_pool_primitives_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6963" relation="include">
        </childnode>
      </node>
      <node id="6963">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6954" relation="include">
        </childnode>
      </node>
      <node id="6955">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6938">
        <label>Types.h</label>
      </node>
      <node id="6977">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6950" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6968" relation="include">
        </childnode>
      </node>
      <node id="6941">
        <label>GLTFSDK/GLTFResourceReader.h</label>
      </node>
      <node id="6937">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6942">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6943" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6965" relation="include">
        </childnode>
        <childnode refid="6966" relation="include">
        </childnode>
      </node>
      <node id="6934">
        <label>App/Scene.h</label>
        <link refid="_samples_22___deferred_renderer_2_inc_2_app_2_scene_8h_source"/>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6968" relation="include">
        </childnode>
        <childnode refid="6972" relation="include">
        </childnode>
      </node>
      <node id="6964">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6968">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6969" relation="include">
        </childnode>
        <childnode refid="6971" relation="include">
        </childnode>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6966" relation="include">
        </childnode>
      </node>
      <node id="6947">
        <label>cstring</label>
      </node>
      <node id="6956">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ForwardPlus/ForwardPlusComputeScene.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/PoolPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal">Plane<sp/>ComputePlane(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>p0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>Plane<sp/>plane;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>v0<sp/>=<sp/>p1<sp/>-<sp/>p0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>v2<sp/>=<sp/>p2<sp/>-<sp/>p0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>plane.m_normal<sp/>=<sp/>-1.0f<sp/>*<sp/>Vector3f::CrossProduct(v0,<sp/>v2).Normalized();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>distance<sp/>to<sp/>the<sp/>origin<sp/>using<sp/>p0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>plane.m_distanceToOrigin<sp/>=<sp/>Vector3f::DotProduct(plane.m_normal,<sp/>p0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plane;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">ForwardPlusComputeScene::ForwardPlusComputeScene(Memory::Allocator&amp;<sp/>mainAllocator,<sp/>Memory::Allocator&amp;<sp/>drawAllocator)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>:<sp/>Scene(</highlight><highlight class="stringliteral">&quot;ForwardPlusComputeScene&quot;</highlight><highlight class="normal">,<sp/>mainAllocator,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lightTexture(NUM_LIGHTS,<sp/>7,<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_frustums(FPLUS_NUM_FRUSTRUMS,<sp/>mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ForwardPlusComputeScene::Initialize(Window&amp;<sp/>window,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Camera&amp;<sp/>camera,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MeshObject&amp;<sp/>sceneMesh,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UniformBufferData&amp;<sp/>uboData,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SamplerDesc&amp;<sp/>lightSamplerDesc,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;PointLight&gt;&amp;<sp/>lights)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>0x40</highlight><highlight class="stringliteral">&apos;0000);</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/>FillFrustums(window,<sp/>camera);</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/>&quot;ForwardPlusComputeScene&quot;;</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/>const<sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(6,<sp/>5,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/>m_pass.m_uboSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>1</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/>m_pass.m_sampSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::Sampler,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>2</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/>m_pass.m_texSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/>m_pass.m_normalSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::SampledImage,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/>//<sp/>SET<sp/>0<sp/>for<sp/>Compute</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/>m_pass.m_computeUBO<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Compute</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/>m_pass.m_lightSampSlot<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DescriptorType::Sampler,<sp/>ShaderStage::Pixel</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_uboSlot</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>TEXTURE_SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_sampSlot</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_texSlot,<sp/>m_pass.m_normalSlot</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_computeUBO</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_pass.m_lightSampSlot</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(5,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>VERTEX_SHADER_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ForwardPlusComputePass1.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ForwardPlusComputePass1.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>COMPUTE_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Compute,<sp/>&quot;ForwardPlusComputePass2.cs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SHADING_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/>&quot;ScreenQuad.vs&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>SHADING_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/>&quot;ForwardPlusComputePass3.ps&quot;,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(6,<sp/>3,<sp/>1,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/>renderPassRequirements.m_maxPools<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>GBUFFER_1<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>GBUFFER_2<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>GBUFFER_3<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>DEPTH_BUFFER<sp/><sp/><sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::D32_FLOAT});</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>LIGHT_TARGET<sp/><sp/><sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT,<sp/>NUM_LIGHTS,<sp/>2});</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>CLUSTER_TARGET<sp/>=<sp/>renderPassRequirements.AddTarget({</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RawStorageFormat::R32G32B32A32_FLOAT,<sp/>TILES_X<sp/>*<sp/>TILES_Y,<sp/>CLUSTER_PIXEL_HEIGHT</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>FRUSTUM_BUFFER<sp/>=<sp/>renderPassRequirements.AddBuffer({</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>m_frustums.GetSize()<sp/>*<sp/>U32(sizeof(Frustum)),<sp/>U32(sizeof(Frustum))</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/>m_pass.m_gBufferPassId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{GBUFFER_1,<sp/>GBUFFER_2,<sp/>GBUFFER_3,<sp/>DEPTH_BUFFER},</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>TEXTURE_SAMPLER_SET,<sp/>TEXTURE_SET},</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/>m_pass.m_computePassId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{COMPUTE_SHADER_ID},</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{{DEPTH_BUFFER,<sp/>ShaderStage::Compute}},</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{{FRUSTUM_BUFFER,<sp/>ShaderStage::Compute}},</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{LIGHT_TARGET,<sp/>CLUSTER_TARGET},</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{COMPUTE_UBO_SET},</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0},</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BlendState{},</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>RenderPassType::Compute</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/>m_pass.m_shadingPassId<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{SHADING_VERTEX_SHADER_ID,<sp/>SHADING_PIXEL_SHADER_ID},</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{GBUFFER_1,<sp/>ShaderStage::Pixel},<sp/>{GBUFFER_2,<sp/>ShaderStage::Pixel},<sp/>{GBUFFER_3,<sp/>ShaderStage::Pixel},</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>{LIGHT_TARGET,<sp/>ShaderStage::Pixel},<sp/>{CLUSTER_TARGET,<sp/>ShaderStage::Pixel}</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputTargets{},</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::OutputBuffers{},</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{TEXTURE_SAMPLER_SET,<sp/>LIGHT_SAMPLER_SET},</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ClearData{{0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window.GetSwapChainRequirements(),<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawAllocator,</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window);</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/>//<sp/>Load<sp/>Assets</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/>m_lightTexture.Fill(lights);</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindRenderTarget(LIGHT_TARGET,<sp/>m_lightTexture.GetTextureDesc(),<sp/>m_lightTexture.GetBuffer());</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>frustumDataStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(m_frustums.Data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;BindBufferTarget(FRUSTUM_BUFFER,<sp/>frustumDataStart);</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/>ComputePoolCreateInfo<sp/>computePoolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_computePasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{{m_pass.m_computePassId},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/>computePoolInfo.m_launchDims<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ThreadGroupDimensions{TILES_X,<sp/>TILES_Y,<sp/>1};</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/>ComputePool&amp;<sp/>computePool<sp/>=<sp/>m_renderer-&gt;CreateComputePool(computePoolInfo);</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/>m_computePool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;computePool;</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_nearPlane<sp/>=<sp/>camera.GetNearClip();</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_farPlane<sp/><sp/>=<sp/>camera.GetFarClip();</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_proj<sp/><sp/><sp/>=<sp/>camera.GetProjMatrix();</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lightUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;m_lightUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/>computePool.BindUniformData(m_pass.m_computeUBO,<sp/>lightUBOStart,<sp/>sizeof(LightUBO));</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xF00000;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_renderPasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{{m_pass.m_gBufferPassId},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/>poolInfo.m_cullMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CullMode::None;</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;POSITION&quot;,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>NORMAL_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{&quot;NORMAL&quot;,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>UV_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({BufferUsageRate::PerVertex,<sp/>{{&quot;UV&quot;,<sp/>RawStorageFormat::R32G32_FLOAT}}});</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/>DrawablePool&amp;<sp/>pool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/>m_mainPool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pool;</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/>//<sp/>Pool<sp/>Binds</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/>pool.BindSampler(m_pass.m_sampSlot,<sp/>{});</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/>//<sp/>Bind<sp/>Texture</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>colorTexture<sp/><sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/sponza/color.png&quot;);</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>normalTexture<sp/>=<sp/>m_textureManager-&gt;Load(&quot;Meshes/sponza/normal.png&quot;);</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>colorDesc<sp/><sp/>=<sp/>m_textureManager-&gt;GetInfo(colorTexture);</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/>const<sp/>TextureDesc*<sp/>normalDesc<sp/>=<sp/>m_textureManager-&gt;GetInfo(normalTexture);</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_Scene,<sp/>colorDesc<sp/>!=<sp/>nullptr,<sp/>&quot;Color<sp/>Texture<sp/>Description<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/>VERIFY_TRUE(log_Scene,<sp/>normalDesc<sp/>!=<sp/>nullptr,<sp/>&quot;Normal<sp/>Texture<sp/>Description<sp/>was<sp/>Null&quot;);</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/>pool.BindTextureData(m_pass.m_texSlot,<sp/>*colorDesc,<sp/>m_textureManager-&gt;GetData(colorTexture));</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/>pool.BindTextureData(m_pass.m_normalSlot,<sp/>*normalDesc,<sp/>m_textureManager-&gt;GetData(normalTexture));</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/>//<sp/>Bind<sp/>Light<sp/>Texture</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>vertexStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_vertexData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>normalStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_normalData.data());<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uvStart<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_uvData.data());<sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>indexBufferStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(sceneMesh.m_indexData.data());<sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/>//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sceneMesh.m_numVertices;</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sceneMesh.m_numIndices;</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/>//<sp/>Drawable<sp/>Binds</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/>m_sponzaId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>VERTEX_SLOT,<sp/>vertexStart,<sp/>sceneMesh.m_vertexDataSize);</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>NORMAL_SLOT,<sp/>normalStart,<sp/>sceneMesh.m_normalDataSize);</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/>pool.BindVertexData(m_sponzaId,<sp/>UV_SLOT,<sp/>uvStart,<sp/>sceneMesh.m_uvDataSize);</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/>pool.SetIndexData(m_sponzaId,<sp/>indexBufferStart,<sp/>sceneMesh.m_indexDataSize);</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/>pool.BindUniformData(m_sponzaId,<sp/>m_pass.m_uboSlot,<sp/>uboDataBuffer,<sp/>sizeof(UniformBufferData));</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/>//<sp/>PASS<sp/>3</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/>DrawablePool&amp;<sp/>shadingQuad<sp/>=<sp/>PoolPrimitives::AddScreenQuad(*m_renderer,<sp/>m_pass.m_shadingPassId,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/>shadingQuad.BindSampler(m_pass.m_sampSlot,<sp/>{});</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/>shadingQuad.BindSampler(m_pass.m_lightSampSlot,<sp/>lightSamplerDesc);</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral">void<sp/>ForwardPlusComputeScene::Update(float<sp/>timeDelta,</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Camera&amp;<sp/>camera,</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>UniformBufferData&amp;<sp/>uboData,</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Containers::Vector&lt;PointLight&gt;&amp;<sp/>lights)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/>UNUSED(lights);</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_timeDelta<sp/>=<sp/>timeDelta;</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_nearPlane<sp/>=<sp/>camera.GetNearClip();</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_farPlane<sp/><sp/>=<sp/>camera.GetFarClip();</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/>m_lightUBO.m_proj<sp/><sp/><sp/>=<sp/>camera.GetProjMatrix();</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>uboDataBuffer<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;uboData);<sp/><sp/><sp/><sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>lightUBOStart<sp/>=<sp/>reinterpret_cast&lt;const<sp/>U8*&gt;(&amp;m_lightUBO);<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;UpdateUniformData(m_pass.m_computeUBO,<sp/>lightUBOStart,<sp/>sizeof(LightUBO));</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/>m_computePool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_sponzaId,<sp/>m_pass.m_uboSlot,<sp/>uboDataBuffer,<sp/>sizeof(UniformBufferData));</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/>m_mainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral">void<sp/>ForwardPlusComputeScene::CleanUp()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral">void<sp/>ForwardPlusComputeScene::FillFrustums(const<sp/>Window&amp;<sp/>window,<sp/>const<sp/>Camera&amp;<sp/>camera)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>widthPerTile<sp/><sp/>=<sp/>window.GetWidth()<sp/>/<sp/>TILES_X;</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/>const<sp/>U32<sp/>heightPerTile<sp/>=<sp/>window.GetHeight()<sp/>/<sp/>TILES_Y;</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"><sp/><sp/>const<sp/>auto<sp/>invProj<sp/>=<sp/>camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/>for<sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>TILES_X;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>(U32<sp/>idy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idy<sp/>&lt;<sp/>TILES_Y;<sp/>++idy)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>screenX1<sp/>=<sp/>idx<sp/>*<sp/>widthPerTile;</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>screenY1<sp/>=<sp/>idy<sp/>*<sp/>heightPerTile;</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>screenX2<sp/>=<sp/>(idx<sp/>+<sp/>1)<sp/>*<sp/>widthPerTile;</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>U32<sp/>screenY2<sp/>=<sp/>(idy<sp/>+<sp/>1)<sp/>*<sp/>heightPerTile;</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2f<sp/>tileP1<sp/>=<sp/>Vector2f(float(screenX1),<sp/>float(screenY1));</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2f<sp/>tileP2<sp/>=<sp/>Vector2f(float(screenX2),<sp/>float(screenY1));</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2f<sp/>tileP3<sp/>=<sp/>Vector2f(float(screenX2),<sp/>float(screenY2));</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector2f<sp/>tileP4<sp/>=<sp/>Vector2f(float(screenX1),<sp/>float(screenY2));</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>To<sp/>NDC</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP1<sp/>=<sp/>tileP1<sp/>/<sp/>Vector2f(float(window.GetWidth()),<sp/>float(window.GetHeight()));</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP2<sp/>=<sp/>tileP2<sp/>/<sp/>Vector2f(float(window.GetWidth()),<sp/>float(window.GetHeight()));</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP3<sp/>=<sp/>tileP3<sp/>/<sp/>Vector2f(float(window.GetWidth()),<sp/>float(window.GetHeight()));</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP4<sp/>=<sp/>tileP4<sp/>/<sp/>Vector2f(float(window.GetWidth()),<sp/>float(window.GetHeight()));</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP1[0]<sp/>=<sp/>(tileP1[0]<sp/>*<sp/>2.0f)<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP2[0]<sp/>=<sp/>(tileP2[0]<sp/>*<sp/>2.0f)<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP3[0]<sp/>=<sp/>(tileP3[0]<sp/>*<sp/>2.0f)<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP4[0]<sp/>=<sp/>(tileP4[0]<sp/>*<sp/>2.0f)<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP1[1]<sp/>=<sp/>1.0f<sp/>-<sp/>(2.0f<sp/>*<sp/>tileP1[1]);</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP2[1]<sp/>=<sp/>1.0f<sp/>-<sp/>(2.0f<sp/>*<sp/>tileP2[1]);</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP3[1]<sp/>=<sp/>1.0f<sp/>-<sp/>(2.0f<sp/>*<sp/>tileP3[1]);</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>tileP4[1]<sp/>=<sp/>1.0f<sp/>-<sp/>(2.0f<sp/>*<sp/>tileP4[1]);</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>To<sp/>View<sp/>Space</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector4f<sp/>viewP1<sp/>=<sp/>Vector4f(tileP1[0],<sp/>tileP1[1],<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector4f<sp/>viewP2<sp/>=<sp/>Vector4f(tileP2[0],<sp/>tileP2[1],<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector4f<sp/>viewP3<sp/>=<sp/>Vector4f(tileP3[0],<sp/>tileP3[1],<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Vector4f<sp/>viewP4<sp/>=<sp/>Vector4f(tileP4[0],<sp/>tileP4[1],<sp/>1.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP1<sp/>=<sp/>invProj<sp/>*<sp/>viewP1;</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP2<sp/>=<sp/>invProj<sp/>*<sp/>viewP2;</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP3<sp/>=<sp/>invProj<sp/>*<sp/>viewP3;</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP4<sp/>=<sp/>invProj<sp/>*<sp/>viewP4;</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP1<sp/>=<sp/>viewP1<sp/>/<sp/>viewP1[3];</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP2<sp/>=<sp/>viewP2<sp/>/<sp/>viewP2[3];</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP3<sp/>=<sp/>viewP3<sp/>/<sp/>viewP3[3];</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>viewP4<sp/>=<sp/>viewP4<sp/>/<sp/>viewP4[3];</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>viewP1.w<sp/>=<sp/>1.0f;<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>viewP2.w<sp/>=<sp/>1.0f;<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>viewP3.w<sp/>=<sp/>1.0f;<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>viewP4.w<sp/>=<sp/>1.0f;<sp/>//<sp/>NOLINT</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Frustum<sp/>frustum;</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>frustum.m_planes[0]<sp/>=<sp/>ComputePlane(Vector3f(0,0,0),<sp/>viewP1.xyz(),<sp/>viewP2.xyz());</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>frustum.m_planes[1]<sp/>=<sp/>ComputePlane(Vector3f(0,0,0),<sp/>viewP2.xyz(),<sp/>viewP3.xyz());</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>frustum.m_planes[2]<sp/>=<sp/>ComputePlane(Vector3f(0,0,0),<sp/>viewP3.xyz(),<sp/>viewP4.xyz());</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>frustum.m_planes[3]<sp/>=<sp/>ComputePlane(Vector3f(0,0,0),<sp/>viewP4.xyz(),<sp/>viewP1.xyz());</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>m_frustums.PushBack(frustum);</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Azura</highlight></codeline>
    </programlisting>
    <location file="Source/Samples/2_DeferredRenderer/Src/ForwardPlusComputeScene.cpp"/>
  </compounddef>
</doxygen>
