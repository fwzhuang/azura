<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_render_test_cases_8cpp" kind="file" language="C++">
    <compoundname>RenderTestCases.cpp</compoundname>
    <includes refid="_render_test_cases_8h" local="yes">RenderTestCases.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <incdepgraph>
      <node id="3687">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="3688" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3671">
        <label>functional</label>
      </node>
      <node id="3672">
        <label>iterator</label>
      </node>
      <node id="3683">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3697">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="3698" relation="include">
        </childnode>
        <childnode refid="3691" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3664">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="3665" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3676" relation="include">
        </childnode>
        <childnode refid="3677" relation="include">
        </childnode>
        <childnode refid="3678" relation="include">
        </childnode>
        <childnode refid="3686" relation="include">
        </childnode>
      </node>
      <node id="3678">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3679" relation="include">
        </childnode>
        <childnode refid="3680" relation="include">
        </childnode>
        <childnode refid="3681" relation="include">
        </childnode>
        <childnode refid="3682" relation="include">
        </childnode>
      </node>
      <node id="3692">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3674">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="3671" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3675" relation="include">
        </childnode>
      </node>
      <node id="3684">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="3669">
        <label>cassert</label>
      </node>
      <node id="3681">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="3677">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3665" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3678" relation="include">
        </childnode>
        <childnode refid="3683" relation="include">
        </childnode>
        <childnode refid="3684" relation="include">
        </childnode>
        <childnode refid="3685" relation="include">
        </childnode>
        <childnode refid="3682" relation="include">
        </childnode>
      </node>
      <node id="3691">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="3692" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3698">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="3669" relation="include">
        </childnode>
        <childnode refid="3692" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3675" relation="include">
        </childnode>
      </node>
      <node id="3675">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="3685">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="3665">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="3666" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3682">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="3666">
        <label>tuple</label>
      </node>
      <node id="3673">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="3669" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3693">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3695">
        <label>vector</label>
      </node>
      <node id="3668">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3669" relation="include">
        </childnode>
        <childnode refid="3670" relation="include">
        </childnode>
        <childnode refid="3671" relation="include">
        </childnode>
        <childnode refid="3672" relation="include">
        </childnode>
        <childnode refid="3673" relation="include">
        </childnode>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3675" relation="include">
        </childnode>
      </node>
      <node id="3694">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3695" relation="include">
        </childnode>
      </node>
      <node id="3663">
        <label>RenderTestCases.h</label>
        <link refid="_render_test_cases_8h_source"/>
        <childnode refid="3664" relation="include">
        </childnode>
        <childnode refid="3687" relation="include">
        </childnode>
      </node>
      <node id="3662">
        <label>Source/Azura/RenderSystem/Test/RenderTestCases.cpp</label>
        <link refid="_render_test_cases_8cpp"/>
        <childnode refid="3663" relation="include">
        </childnode>
        <childnode refid="3689" relation="include">
        </childnode>
        <childnode refid="3696" relation="include">
        </childnode>
        <childnode refid="3693" relation="include">
        </childnode>
        <childnode refid="3697" relation="include">
        </childnode>
        <childnode refid="3699" relation="include">
        </childnode>
      </node>
      <node id="3676">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3677" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3678" relation="include">
        </childnode>
      </node>
      <node id="3699">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="3687" relation="include">
        </childnode>
      </node>
      <node id="3679">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="3667">
        <label>Types.h</label>
      </node>
      <node id="3689">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="3674" relation="include">
        </childnode>
        <childnode refid="3664" relation="include">
        </childnode>
        <childnode refid="3690" relation="include">
        </childnode>
      </node>
      <node id="3688">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="3686">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3677" relation="include">
        </childnode>
        <childnode refid="3667" relation="include">
        </childnode>
      </node>
      <node id="3690">
        <label>TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="3667" relation="include">
        </childnode>
        <childnode refid="3691" relation="include">
        </childnode>
        <childnode refid="3693" relation="include">
        </childnode>
        <childnode refid="3668" relation="include">
        </childnode>
        <childnode refid="3677" relation="include">
        </childnode>
        <childnode refid="3694" relation="include">
        </childnode>
      </node>
      <node id="3670">
        <label>cstring</label>
      </node>
      <node id="3696">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="3677" relation="include">
        </childnode>
      </node>
      <node id="3680">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_vertex" prot="public">Vertex</innerclass>
    <innerclass refid="struct_vertex_with_u_v" prot="public">VertexWithUV</innerclass>
    <innerclass refid="struct_instance" prot="public">Instance</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;RenderTestCases.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="struct_vertex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_col[4];</highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="struct_vertex_with_u_v" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VertexWithUV<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_uv[2];</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="struct_instance" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_azura_1_1_instance" kindref="compound">Instance</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderTestCases::ExecuteBasicRenderTest(<ref refid="class_azura_1_1_renderer" kindref="compound">Azura::Renderer</ref>&amp;<sp/>renderer,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_window" kindref="compound">Azura::Window</ref>&amp;<sp/>window,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>renderPass,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>uboSlot,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_log" kindref="compound">Azura::Log</ref>&amp;<sp/>log_TestCase)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>UNUSED(log_TestCase);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>UNUSED(window);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_pool_create_info" kindref="compound">DrawablePoolCreateInfo</ref><sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{{renderPass},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;COLOR&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT}}<sp/>});</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_drawable_pool" kindref="compound">DrawablePool</ref>&amp;<sp/>pool<sp/>=<sp/>renderer.CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vertex&gt;</ref><sp/>vertexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vertex&gt;</ref>({</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{0,<sp/>0,<sp/>1,<sp/>1},<sp/>{1,<sp/>0,<sp/>0,<sp/>1}},</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{1,<sp/>0,<sp/>1,<sp/>1},<sp/>{0,<sp/>1,<sp/>0,<sp/>1}},</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{1,<sp/>1,<sp/>1,<sp/>1},<sp/>{0,<sp/>0,<sp/>1,<sp/>1}},</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{0,<sp/>1,<sp/>1,<sp/>1},<sp/>{1,<sp/>1,<sp/>1,<sp/>1}}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref><sp/>indexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref>({</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref><sp/>uboData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>uboData.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Transform::LookAt(Vector3f(0.5f,<sp/>0.5f,<sp/>0.0f),<sp/>Vector3f(0.5f,<sp/>0.5f,<sp/>6.0f),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f(0.0f,<sp/>1.0f,<sp/>0.0f));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>proj<sp/>=<sp/>Transform::Perspective(45.0f,<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.1f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>uboData.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>proj<sp/>*<sp/>view;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>uboData.m_modelInvTranspose<sp/>=<sp/>uboData.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexBufferStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_create_info" kindref="compound">DrawableCreateInfo</ref><sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertexData.GetSize();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indexData.GetSize();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>drawableId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>pool.BindVertexData(drawableId,<sp/>VERTEX_SLOT,<sp/>bufferStart,<sp/>vertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>pool.SetIndexData(drawableId,<sp/>indexBufferStart,<sp/>indexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>pool.BindUniformData(drawableId,<sp/>uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref>));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>renderer.Submit();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>renderer.SnapshotFrame(</highlight><highlight class="stringliteral">&quot;./BasicRenderTest.data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderTestCases::ExecuteBasicInstancingTest(<ref refid="class_azura_1_1_renderer" kindref="compound">Azura::Renderer</ref>&amp;<sp/>renderer,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_window" kindref="compound">Azura::Window</ref>&amp;<sp/>window,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Azura::U32<sp/>renderPass,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>uboSlot,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_log" kindref="compound">Azura::Log</ref>&amp;<sp/>log_TestCase)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>UNUSED(window);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>UNUSED(log_TestCase);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_pool_create_info" kindref="compound">DrawablePoolCreateInfo</ref><sp/>poolInfo{allocatorTemporary};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{{renderPass},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;COLOR&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>INSTANCE_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerInstance,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;INSTANCE_POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_drawable_pool" kindref="compound">DrawablePool</ref>&amp;<sp/>pool<sp/>=<sp/>renderer.CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vertex&gt;</ref><sp/>vertexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vertex&gt;</ref>({</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{0,<sp/>0,<sp/>1,<sp/>1},<sp/>{1,<sp/>0,<sp/>0,<sp/>1}},</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{1,<sp/>0,<sp/>1,<sp/>1},<sp/>{0,<sp/>1,<sp/>0,<sp/>1}},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{1,<sp/>1,<sp/>1,<sp/>1},<sp/>{0,<sp/>0,<sp/>1,<sp/>1}},</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>{{0,<sp/>1,<sp/>1,<sp/>1},<sp/>{1,<sp/>1,<sp/>1,<sp/>1}}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Instance&gt;</ref><sp/>instanceData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Instance&gt;</ref>({</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_instance" kindref="compound">Instance</ref>{{-2,<sp/>0,<sp/>0,<sp/>1}},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_azura_1_1_instance" kindref="compound">Instance</ref>{{2,<sp/>0,<sp/>0,<sp/>1}}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref><sp/>indexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref>({</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref><sp/>uboData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>uboData.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Transform::LookAt(Vector3f(0.5f,<sp/>0.5f,<sp/>0.0f),<sp/>Vector3f(0.5f,<sp/>0.5f,<sp/>6.0f),</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f(0.0f,<sp/>1.0f,<sp/>0.0f));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>proj<sp/>=<sp/>Transform::Perspective(45.0f,<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.1f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>uboData.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>proj<sp/>*<sp/>view;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>uboData.m_modelInvTranspose<sp/>=<sp/>uboData.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instanceStart<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(instanceData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexBufferStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_create_info" kindref="compound">DrawableCreateInfo</ref><sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertexData.GetSize();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indexData.GetSize();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>drawableId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>pool.BindVertexData(drawableId,<sp/>VERTEX_SLOT,<sp/>bufferStart,<sp/>vertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_vertex" kindref="compound">Vertex</ref>));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>pool.BindInstanceData(drawableId,<sp/>INSTANCE_SLOT,<sp/>instanceStart,<sp/>instanceData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_instance" kindref="compound">Instance</ref>));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>pool.SetIndexData(drawableId,<sp/>indexBufferStart,<sp/>indexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>pool.BindUniformData(drawableId,<sp/>uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref>));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>renderer.Submit();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>renderer.SnapshotFrame(</highlight><highlight class="stringliteral">&quot;./BasicInstancingTest.data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderTestCases::ExecuteBasicTextureTest(<ref refid="class_azura_1_1_renderer" kindref="compound">Azura::Renderer</ref>&amp;<sp/>renderer,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_window" kindref="compound">Azura::Window</ref>&amp;<sp/>window,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Azura::U32<sp/>renderPass,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Azura::U32<sp/>uboSlot,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Azura::U32<sp/>samplerSlot,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Azura::U32<sp/>samplerTextureSlot,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_log" kindref="compound">Azura::Log</ref>&amp;<sp/>log_TestCase)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>UNUSED(window);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_texture_requirements" kindref="compound">TextureRequirements</ref><sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;<sp/></highlight><highlight class="comment">//<sp/>4MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>texManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>nocturnalTexture<sp/>=<sp/>texManager-&gt;Load(</highlight><highlight class="stringliteral">&quot;Textures/Nocturnal.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_pool_create_info" kindref="compound">DrawablePoolCreateInfo</ref><sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{{renderPass},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_drawable_pool" kindref="compound">DrawablePool</ref>&amp;<sp/>pool<sp/>=<sp/>renderer.CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_texture_desc" kindref="compound">TextureDesc</ref>*<sp/>desc<sp/>=<sp/>texManager-&gt;GetInfo(nocturnalTexture);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_TestCase,<sp/>desc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Texture<sp/>Description<sp/>was<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>pool.BindTextureData(samplerTextureSlot,<sp/>*desc,<sp/>texManager-&gt;GetData(nocturnalTexture));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>pool.BindSampler(samplerSlot,<sp/>{});</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref><sp/>vertexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref>({</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{0,<sp/>0,<sp/>1,<sp/>1},<sp/>{0,<sp/>0}},</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>0,<sp/>1,<sp/>1},<sp/>{1,<sp/>0}},</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>1,<sp/>1,<sp/>1},<sp/>{1,<sp/>1}},</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{0,<sp/>1,<sp/>1,<sp/>1},<sp/>{0,<sp/>1}}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref><sp/>indexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref>({</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref><sp/>uboData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>uboData.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f<sp/>view<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Transform::LookAt(Vector3f(0.5f,<sp/>0.5f,<sp/>1.0f),<sp/>Vector3f(0.5f,<sp/>0.5f,<sp/>4.0f),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f(0.0f,<sp/>1.0f,<sp/>0.0f));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f<sp/>proj<sp/>=<sp/>Transform::Perspective(45.0f,<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.1f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>uboData.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>proj<sp/>*<sp/>view;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>uboData.m_modelInvTranspose<sp/>=<sp/>uboData.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexBufferStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_create_info" kindref="compound">DrawableCreateInfo</ref><sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertexData.GetSize();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indexData.GetSize();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>drawableId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>pool.BindVertexData(drawableId,<sp/>VERTEX_SLOT,<sp/>bufferStart,<sp/>vertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VertexWithUV));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>pool.SetIndexData(drawableId,<sp/>indexBufferStart,<sp/>indexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>pool.BindUniformData(drawableId,<sp/>uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref>));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>renderer.Submit();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>renderer.SnapshotFrame(</highlight><highlight class="stringliteral">&quot;./BasicTextureTest.data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RenderTestCases::ExecuteBasicDeferredTest(<ref refid="class_azura_1_1_renderer" kindref="compound">Azura::Renderer</ref>&amp;<sp/>renderer,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_window" kindref="compound">Azura::Window</ref>&amp;<sp/>window,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>renderPass1,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>renderPass2,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>uboSlot,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>samplerSlot,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>Azura::U32<sp/>samplerTextureSlot,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_log" kindref="compound">Azura::Log</ref>&amp;<sp/>log_TestCase)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Memory::MonotonicAllocator</ref>,<sp/>16384);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>UNUSED(window);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_texture_requirements" kindref="compound">TextureRequirements</ref><sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;<sp/></highlight><highlight class="comment">//<sp/>4MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>texManager<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref><sp/>uboData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>uboData.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f<sp/>view<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Transform::LookAt(Vector3f(0.5f,<sp/>0.5f,<sp/>1.0f),<sp/>Vector3f(0.5f,<sp/>0.5f,<sp/>4.0f),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3f(0.0f,<sp/>1.0f,<sp/>0.0f));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix4f<sp/>proj<sp/>=<sp/>Transform::Perspective(45.0f,<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.1f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>uboData.m_viewProj<sp/>=<sp/>proj<sp/>*<sp/>view;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>uboData.m_modelInvTranspose<sp/>=<sp/>uboData.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>nocturnalTexture<sp/>=<sp/>texManager-&gt;Load(</highlight><highlight class="stringliteral">&quot;Textures/Nocturnal.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_pool_create_info" kindref="compound">DrawablePoolCreateInfo</ref><sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{{renderPass1},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_drawable_pool" kindref="compound">DrawablePool</ref>&amp;<sp/>pool<sp/>=<sp/>renderer.CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_azura_1_1_texture_desc" kindref="compound">TextureDesc</ref>*<sp/>desc<sp/>=<sp/>texManager-&gt;GetInfo(nocturnalTexture);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_TestCase,<sp/>desc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Texture<sp/>Description<sp/>was<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>pool.BindTextureData(samplerTextureSlot,<sp/>*desc,<sp/>texManager-&gt;GetData(nocturnalTexture));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>pool.BindSampler(samplerSlot,<sp/>{});</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref><sp/>vertexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref>({</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{0,<sp/>0,<sp/>1,<sp/>1},<sp/>{0,<sp/>0}},</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>0,<sp/>1,<sp/>1},<sp/>{1,<sp/>0}},</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>1,<sp/>1,<sp/>1},<sp/>{1,<sp/>1}},</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{0,<sp/>1,<sp/>1,<sp/>1},<sp/>{0,<sp/>1}}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref><sp/>indexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref>({</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexBufferStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_create_info" kindref="compound">DrawableCreateInfo</ref><sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertexData.GetSize();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indexData.GetSize();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>drawableId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>pool.BindVertexData(drawableId,<sp/>VERTEX_SLOT,<sp/>bufferStart,<sp/>vertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VertexWithUV));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>pool.SetIndexData(drawableId,<sp/>indexBufferStart,<sp/>indexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>pool.BindUniformData(drawableId,<sp/>uboSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_azura_1_1_uniform_buffer_data" kindref="compound">UniformBufferData</ref>));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>QUAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="struct_azura_1_1_drawable_pool_create_info" kindref="compound">DrawablePoolCreateInfo</ref><sp/>quadPoolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>quadPoolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>quadPoolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>quadPoolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>quadPoolInfo.m_cullMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CullMode::None;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>quadPoolInfo.m_renderPasses<sp/>=<sp/>{{renderPass2},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>QUAD_VERTEX_SLOT<sp/>=<sp/>quadPoolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_drawable_pool" kindref="compound">DrawablePool</ref>&amp;<sp/>quadPool<sp/>=<sp/>renderer.CreateDrawablePool(quadPoolInfo);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>quadPool.BindSampler(samplerSlot,<sp/>{});</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref><sp/>quadVertexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VertexWithUV&gt;</ref>({</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{-1,<sp/>-1,<sp/>0,<sp/>1},<sp/>{0,<sp/>0}},</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>-1,<sp/>0,<sp/>1},<sp/>{1,<sp/>0}},</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{1,<sp/>1,<sp/>0,<sp/>1},<sp/>{1,<sp/>1}},</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>VertexWithUV{{-1,<sp/>1,<sp/>0,<sp/>1},<sp/>{0,<sp/>1}}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref><sp/>quadIndexData<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;U32&gt;</ref>({</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadBufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quadVertexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadIndexStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quadIndexData.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>createInfo<sp/>=<sp/><ref refid="struct_azura_1_1_drawable_create_info" kindref="compound">DrawableCreateInfo</ref>{};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>quadVertexData.GetSize();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>quadIndexData.GetSize();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadId<sp/>=<sp/>quadPool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>quadPool.BindVertexData(quadId,<sp/>QUAD_VERTEX_SLOT,<sp/>quadBufferStart,<sp/>quadVertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VertexWithUV));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>quadPool.SetIndexData(quadId,<sp/>quadIndexStart,<sp/>quadIndexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>renderer.Submit();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>renderer.RenderFrame();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>renderer.SnapshotFrame(</highlight><highlight class="stringliteral">&quot;./BasicDeferredTest.data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Test/RenderTestCases.cpp"/>
  </compounddef>
</doxygen>
