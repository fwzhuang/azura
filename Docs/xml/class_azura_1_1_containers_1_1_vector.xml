<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_azura_1_1_containers_1_1_vector" kind="class" language="C++" prot="public">
    <compoundname>Azura::Containers::Vector</compoundname>
    <includes refid="_vector_8h" local="no">Vector.h</includes>
    <innerclass refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" prot="public">Azura::Containers::Vector::Iterator</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Type</declname>
        <defname>Type</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_azura_1_1_containers_1_1_vector_1a6faabc30c68ff3ead2705cd513dc116b" prot="private" static="no" mutable="no">
        <type>U32</type>
        <definition>U32 Azura::Containers::Vector&lt; Type &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="621" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_azura_1_1_containers_1_1_vector_1adfb996e85aa768c6d82678f2c4b1adb2" prot="private" static="no" mutable="no">
        <type>U32</type>
        <definition>U32 Azura::Containers::Vector&lt; Type &gt;::m_maxSize</definition>
        <argsstring></argsstring>
        <name>m_maxSize</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="622" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_azura_1_1_containers_1_1_vector_1a3da37d3d227c645f49efda73324c3be0" prot="private" static="no" mutable="no">
        <type>std::reference_wrapper&lt; <ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &gt;</type>
        <definition>std::reference_wrapper&lt;Memory::Allocator&gt; Azura::Containers::Vector&lt; Type &gt;::m_allocator</definition>
        <argsstring></argsstring>
        <name>m_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="623" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_azura_1_1_containers_1_1_vector_1af9bdce2aa7ada2b8671fba58550bc685" prot="private" static="no" mutable="no">
        <type>Memory::UniqueArrayPtr&lt; Type &gt;</type>
        <definition>Memory::UniqueArrayPtr&lt;Type&gt; Azura::Containers::Vector&lt; Type &gt;::m_base</definition>
        <argsstring></argsstring>
        <name>m_base</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="624" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="624" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(Memory::Allocator &amp;alloc)</argsstring>
        <name>Vector</name>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Constructs a 0 sized vector with an allocator. </para>        </briefdescription>
        <detaileddescription>
<para>An empty vector doesn&apos;t reserve any space on the allocator. It is required to reserve the vector before you use it.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Later<sp/>in<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Resize(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>5.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>----<sp/>OR<sp/>----</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Reserve(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="142" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="628" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a57b086de3f62679d082a086300138636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(UINT maxSize, Memory::Allocator &amp;alloc)</argsstring>
        <name>Vector</name>
        <param>
          <type>UINT</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Constructs a vector accepting reserved size and allocator. </para>        </briefdescription>
        <detaileddescription>
<para>This constructor <bold>reserves</bold> the specified size in the vector. The vector is of still size 0.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="161" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="633" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1af816fc5ac5a9e5060f6c88cb4e8beaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(UINT currentSize, UINT maxSize, Memory::Allocator &amp;alloc)</argsstring>
        <name>Vector</name>
        <param>
          <type>UINT</type>
          <declname>currentSize</declname>
        </param>
        <param>
          <type>UINT</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Construct a vector using size and max size. </para>        </briefdescription>
        <detaileddescription>
<para>This constructor <bold>reserves and constructs</bold> the specified sizes in the vector.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(2,<sp/>5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>2.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">currentSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The current size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="180" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="640" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a791c8721cacac5dd785a45a98e45d4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(const std::initializer_list&lt; Type &gt; &amp;list, Memory::Allocator &amp;alloc)</argsstring>
        <name>Vector</name>
        <param>
          <type>const std::initializer_list&lt; Type &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Construct a vector using an initializer list. </para>        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr({1,<sp/>2,<sp/>3,<sp/>4,<sp/>5},<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector<sp/>with<sp/>that<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>5.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="198" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="649" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a11574d6d332a04eccebcc4f0255275b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(ContainerExtent extent, Memory::Allocator &amp;alloc, Args &amp;&amp;... args)</argsstring>
        <name>Vector</name>
        <param>
          <type><ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref></type>
          <declname>extent</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructs the vector using the extent. </para>        </briefdescription>
        <detaileddescription>
<para>Also, you can provide initialization arguments along with the extent.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref>{5},<sp/>allocator,<sp/>6);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector<sp/>with<sp/>the<sp/>value<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>5.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">extent</parametername>
</parameternamelist>
<parameterdescription>
<para>The extent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization arguments</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="220" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="669" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a81495c5eec68f60da33123073cdde942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <briefdescription>
<para>Destroys the vector and frees the memory in the allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="225" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="682" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a3b25f7177d538d7bb646ceb5fa46f30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="227" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="690" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1afa47d6fd1b56460466a5b15a1030c439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(const Vector &amp;other, Memory::Allocator &amp;alloc)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref> &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="228" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="709" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a2552d6447e1aeccdd359a50f9c52d016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Azura::Containers::Vector&lt; Type &gt;::Vector</definition>
        <argsstring>(Vector &amp;&amp;other) noexcept</argsstring>
        <name>Vector</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="229" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="728" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1adbb949f6f25479775bb3af194ce528d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&lt; Type &gt; &amp; Azura::Containers::Vector&lt; Type &gt;::operator=</definition>
        <argsstring>(const Vector &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="230" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="739" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aed6c43d8742cd53f938c87ae91e6532b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector&lt; Type &gt; &amp; Azura::Containers::Vector&lt; Type &gt;::operator=</definition>
        <argsstring>(Vector &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="231" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="765" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::PushBack</definition>
        <argsstring>(const Type &amp;data)</argsstring>
        <name>PushBack</name>
        <param>
          <type>const Type &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Appends data to the end of the vector. </para>        </briefdescription>
        <detaileddescription>
<para>The vector also doubles its size incase it fills up. Recommended to pre-allocate as much as you can.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>1.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>2.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>3.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(4);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>4.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to push </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="258" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="825" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1af55839be4b5b355ed020a09201713935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::PushBack</definition>
        <argsstring>(Type &amp;&amp;data)</argsstring>
        <name>PushBack</name>
        <param>
          <type>Type &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Appends data to the end of the vector. </para>        </briefdescription>
        <detaileddescription>
<para>The vector also doubles its size incase it fills up. Recommended to pre-allocate as much as you can.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>1.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>2.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>3.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(4);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>4.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to push </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="263" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="833" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aadfac4f55765e41e812160022a9a949f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::EmplaceBack</definition>
        <argsstring>(Args ... args)</argsstring>
        <name>EmplaceBack</name>
        <param>
          <type>Args ...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Appends data to the end of the vector by emplacing (like regular vector) </para>        </briefdescription>
        <detaileddescription>
<para>The vector also doubles its size incase it fills up. Recommended to pre-allocate as much as you can.</para><para>The arguments are the initialization parameters for the Type.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">MyClass<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyClass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)<sp/>:<sp/>data(a)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Containers::Vector&lt;MyClass&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.EmplaceBack(1);<sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>MyClass{1}<sp/>at<sp/>the<sp/>memory<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>1.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.EmplaceBack(2);<sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>MyClass{2}<sp/>at<sp/>the<sp/>memory<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>2.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to push</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="297" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="842" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1ad181b9dc858e1ad59fc64b39f795fb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::PopBack</definition>
        <argsstring>()</argsstring>
        <name>PopBack</name>
        <briefdescription>
<para>Removes the last element in the vector array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="302" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="850" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a5da3557964b80e7c40a574fbbb7e24a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Azura::Containers::Vector&lt; Type &gt;::FindFirst</definition>
        <argsstring>(const Type &amp;data)</argsstring>
        <name>FindFirst</name>
        <param>
          <type>const Type &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Searches for the data in the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to search for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index if Found, else -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="311" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="859" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a4d191b0d876f03c44c5a58e6380a07ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Remove</definition>
        <argsstring>(const Type &amp;data)</argsstring>
        <name>Remove</name>
        <param>
          <type>const Type &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Searches for the given data in the vector and removes it. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to Search for and Remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="318" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="873" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Reserve</definition>
        <argsstring>(U32 requiredSize)</argsstring>
        <name>Reserve</name>
        <param>
          <type>U32</type>
          <declname>requiredSize</declname>
        </param>
        <briefdescription>
<para>Reserves a contiguous block for the vector. </para>        </briefdescription>
        <detaileddescription>
<para>Use this when you didn&apos;t provide an initial size for the vector. The growth of the vector is not controlled by this. Using Reserve <bold>after</bold> storing the data in the vector will lead an undefined behavior. Use this only once.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Later<sp/>in<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Reserve(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>requiredSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Required Size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="345" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="886" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Resize</definition>
        <argsstring>(U32 requiredSize)</argsstring>
        <name>Resize</name>
        <param>
          <type>U32</type>
          <declname>requiredSize</declname>
        </param>
        <briefdescription>
<para>Reserves a contiguous block for the vector and sets the size to the value specified. </para>        </briefdescription>
        <detaileddescription>
<para>Also, sets the size to the specified value. Use this when you didn&apos;t provide an initial size for the vector. The growth of the vector is not controlled by this. Using Resize <bold>after</bold> storing the data in the vector will lead an undefined behavior. Use this only once.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Later<sp/>in<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Resize(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allocates<sp/>a<sp/>5<sp/>sized<sp/>int<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>now<sp/>of<sp/>size<sp/>5.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>requiredSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Required Size </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="373" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="892" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a3f955f930eefbb486ff9880421bbc7a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Azura::Containers::Vector&lt; Type &gt;::IsEmpty</definition>
        <argsstring>() const</argsstring>
        <name>IsEmpty</name>
        <briefdescription>
<para>Checks if the container is empty. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="380" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="899" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a9f350f9bbc7f5aaec6318369444d2d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::InsertAt</definition>
        <argsstring>(U32 idx, const Type &amp;data)</argsstring>
        <name>InsertAt</name>
        <param>
          <type>U32</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const Type &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Inserts the supplied data at the index. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Better Documentation</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Target Index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="390" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="904" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Type *</type>
        <definition>Type * Azura::Containers::Vector&lt; Type &gt;::Data</definition>
        <argsstring>()</argsstring>
        <name>Data</name>
        <briefdescription>
<para>Gets the Data pointer. </para>        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Data()<sp/></highlight><highlight class="comment">//<sp/>is<sp/>of<sp/>type<sp/>int*</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="406" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="915" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a512f49e419efb7f312d0a08ddfc675b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Type *</type>
        <definition>const Type * Azura::Containers::Vector&lt; Type &gt;::Data</definition>
        <argsstring>() const</argsstring>
        <name>Data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the Data pointer.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>still<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Data()<sp/></highlight><highlight class="comment">//<sp/>is<sp/>of<sp/>type<sp/>int*</highlight></codeline>
</programlisting> Useful as a constant pointer when compared to its other overload. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="414" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="920" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
<para>Empties the vector. </para>        </briefdescription>
        <detaileddescription>
<para>But, it doesn&apos;t deallocate anything. It is meant to reuse the allocated memory.</para><para>Example: <programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>1.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>2.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(3);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>3.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(4);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>4.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Reset();<sp/></highlight><highlight class="comment">//<sp/>Or<sp/>Clear();</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>is<sp/>of<sp/>size<sp/>0.<sp/>The<sp/>capacity<sp/>is<sp/>5.</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="444" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="925" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1acf0e0039895ef1262e9060406863351e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" kindref="member">Vector::Reset()</ref></para><para><ref refid="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" kindref="member">Vector::Reset()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="451" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="930" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a9375fcc59ae44bfe9960d045d322d897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; Azura::Containers::Vector&lt; Type &gt;::operator[]</definition>
        <argsstring>(U32 idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>U32</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="453" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="935" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aa88a35925d3013cd8050639e07938d62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; Azura::Containers::Vector&lt; Type &gt;::operator[]</definition>
        <argsstring>(U32 idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>U32</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="454" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aff0a689dcc4d698e49a40453f4e40d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; Azura::Containers::Vector&lt; Type &gt;::Last</definition>
        <argsstring>()</argsstring>
        <name>Last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="456" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="947" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a6c87f384a7a0e3c4a76e53c8607e7f04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Type &amp;</type>
        <definition>Type &amp; Azura::Containers::Vector&lt; Type &gt;::Last</definition>
        <argsstring>() const</argsstring>
        <name>Last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="457" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="952" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a109fab9164fcbf717f7dba81e1a8ac47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>U32</type>
        <definition>U32 Azura::Containers::Vector&lt; Type &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="459" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="459" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1ad51431e69d28f4f8e240c8f64cea17db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>U32</type>
        <definition>U32 Azura::Containers::Vector&lt; Type &gt;::GetMaxSize</definition>
        <argsstring>() const</argsstring>
        <name>GetMaxSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="463" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a41f8b0d08472230bbcaf4e9611c9a5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::Assign</definition>
        <argsstring>(InputIt first, InputIt last)</argsstring>
        <name>Assign</name>
        <param>
          <type>InputIt</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="468" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="958" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a49e7eba07315528d8f75998944b0e7c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref></type>
        <definition>Vector&lt; Type &gt;::Iterator Azura::Containers::Vector&lt; Type &gt;::Begin</definition>
        <argsstring>() const</argsstring>
        <name>Begin</name>
        <briefdescription>
<para>Returns an <ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> pointing to the beginning of the vector. This is similar to <ref refid="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" kindref="member">begin()</ref> of a std::vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="598" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="967" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1aaf8c1fcfb814e8030e5520b56c094c6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref></type>
        <definition>Vector&lt; Type &gt;::Iterator Azura::Containers::Vector&lt; Type &gt;::End</definition>
        <argsstring>() const</argsstring>
        <name>End</name>
        <briefdescription>
<para>Returns an <ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> pointing to the end of the vector. This is similar to <ref refid="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" kindref="member">end()</ref> of a std::vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="604" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="972" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref></type>
        <definition>Vector&lt; Type &gt;::Iterator Azura::Containers::Vector&lt; Type &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an <ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> pointing to the beginning of the vector. This is similar to <ref refid="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" kindref="member">begin()</ref> of a std::vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="610" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="977" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref></type>
        <definition>Vector&lt; Type &gt;::Iterator Azura::Containers::Vector&lt; Type &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an <ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> pointing to the end of the vector. This is similar to <ref refid="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" kindref="member">end()</ref> of a std::vector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="616" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="982" bodyend="984"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_azura_1_1_containers_1_1_vector_1a20e4cd72d8b14584bba20323efbffed4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Azura::Containers::Vector&lt; Type &gt;::GrowIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>GrowIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Inc/Containers/Vector.h" line="619" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="783" bodyend="822"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for customized vector. </para>    </briefdescription>
    <detaileddescription>
<para>This class is used to construct a customized Azura vector. Azura vectors take advantage of a custom allocator. The custom allocators allows them to be created on the Stack or the Heap.</para><para>They also don&apos;t &quot;allocate&quot; new memory. Allocation is handled by the supplied <ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Azura::Memory::Allocator</ref> class.</para><para>Azura Vectors are also &quot;reserve&quot; first. This basically means that the vector reserves a chunk first, instead of reserving and initializing like std::vector. This is probably the main difference between the two. Here is an example:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>above<sp/>code<sp/>allocates<sp/>a<sp/>memory<sp/>upto<sp/>5<sp/>ints.<sp/>But<sp/>arr[0<sp/>to<sp/>4]<sp/>doesn&apos;t<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>arr.GetSize()<sp/>will<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>arr.GetMaxSize()<sp/>will<sp/>be<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;int&gt;<sp/>arr(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>above<sp/>code<sp/>allocates<sp/>and<sp/>initializes<sp/>a<sp/>memory<sp/>upto<sp/>5<sp/>ints.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>arr.size()<sp/>will<sp/>be<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>arr.capacity()<sp/>will<sp/>be<sp/>5</highlight></codeline>
</programlisting></para><para>Both vectors tend to grow. But growing vectors are bad so watch out. Pre-allocate as much as you can beforehand.</para><para>The API for Azura <ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref> is similar but Pascal Case&apos;d mostly. Example:</para><para><programlisting filename=".cpp"><codeline><highlight class="normal">Containers::Vector&lt;int&gt;<sp/>arr(5,<sp/>allocator);</highlight></codeline>
<codeline><highlight class="normal">arr.PushBack(0);<sp/></highlight><highlight class="comment">//<sp/>similar<sp/>to<sp/>push_back</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">arr.Begin();</highlight></codeline>
<codeline><highlight class="normal">arr.End();</highlight></codeline>
</programlisting> Pascal case was selected because Azura keeps the API similar across all C++ code. And most of the Game Engine code that was initially built followed this scheme.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Datatype of the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="Source/Containers/Inc/Containers/Vector.h" line="111" column="1" bodyfile="Source/Containers/Inc/Containers/Vector.h" bodystart="111" bodyend="625"/>
    <listofallmembers>
      <member refid="class_azura_1_1_containers_1_1_vector_1a41f8b0d08472230bbcaf4e9611c9a5b3" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Assign</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a49e7eba07315528d8f75998944b0e7c5" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Begin</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>begin</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1acf0e0039895ef1262e9060406863351e" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Clear</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Data</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a512f49e419efb7f312d0a08ddfc675b7" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Data</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aadfac4f55765e41e812160022a9a949f" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>EmplaceBack</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aaf8c1fcfb814e8030e5520b56c094c6a" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>End</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>end</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a5da3557964b80e7c40a574fbbb7e24a6" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>FindFirst</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1ad51431e69d28f4f8e240c8f64cea17db" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>GetMaxSize</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a109fab9164fcbf717f7dba81e1a8ac47" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>GetSize</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a20e4cd72d8b14584bba20323efbffed4" prot="private" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>GrowIfNeeded</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a9f350f9bbc7f5aaec6318369444d2d99" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>InsertAt</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a3f955f930eefbb486ff9880421bbc7a4" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>IsEmpty</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aff0a689dcc4d698e49a40453f4e40d3b" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Last</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a6c87f384a7a0e3c4a76e53c8607e7f04" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Last</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a3da37d3d227c645f49efda73324c3be0" prot="private" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>m_allocator</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1af9bdce2aa7ada2b8671fba58550bc685" prot="private" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>m_base</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1adfb996e85aa768c6d82678f2c4b1adb2" prot="private" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>m_maxSize</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a6faabc30c68ff3ead2705cd513dc116b" prot="private" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>m_size</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1adbb949f6f25479775bb3af194ce528d5" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aed6c43d8742cd53f938c87ae91e6532b" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>operator=</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a9375fcc59ae44bfe9960d045d322d897" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>operator[]</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aa88a35925d3013cd8050639e07938d62" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>operator[]</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1ad181b9dc858e1ad59fc64b39f795fb75" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>PopBack</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>PushBack</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1af55839be4b5b355ed020a09201713935" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>PushBack</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a4d191b0d876f03c44c5a58e6380a07ee" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Remove</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Reserve</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Reset</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Resize</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a57b086de3f62679d082a086300138636" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1af816fc5ac5a9e5060f6c88cb4e8beaa3" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a791c8721cacac5dd785a45a98e45d4a8" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a11574d6d332a04eccebcc4f0255275b4" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a3b25f7177d538d7bb646ceb5fa46f30c" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1afa47d6fd1b56460466a5b15a1030c439" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a2552d6447e1aeccdd359a50f9c52d016" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>Vector</name></member>
      <member refid="class_azura_1_1_containers_1_1_vector_1a81495c5eec68f60da33123073cdde942" prot="public" virt="non-virtual"><scope>Azura::Containers::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
