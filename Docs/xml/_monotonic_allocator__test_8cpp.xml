<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_monotonic_allocator__test_8cpp" kind="file" language="C++">
    <compoundname>MonotonicAllocator_test.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes refid="_monotonic_allocator__test_8h" local="yes">MonotonicAllocator_test.h</includes>
    <incdepgraph>
      <node id="4370">
        <label>functional</label>
      </node>
      <node id="4363">
        <label>limits</label>
      </node>
      <node id="4366">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4367" relation="include">
        </childnode>
      </node>
      <node id="4369">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4370" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
        <childnode refid="4371" relation="include">
        </childnode>
      </node>
      <node id="4365">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="4366" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
      </node>
      <node id="4361">
        <label>Source/Common/Test/MonotonicAllocator_test.cpp</label>
        <link refid="_monotonic_allocator__test_8cpp"/>
        <childnode refid="4362" relation="include">
        </childnode>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4364" relation="include">
        </childnode>
      </node>
      <node id="4371">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4364">
        <label>MonotonicAllocator_test.h</label>
        <link refid="_monotonic_allocator__test_8h_source"/>
        <childnode refid="4365" relation="include">
        </childnode>
        <childnode refid="4368" relation="include">
        </childnode>
        <childnode refid="4372" relation="include">
        </childnode>
      </node>
      <node id="4368">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="4369" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
      </node>
      <node id="4372">
        <label>gtest/gtest.h</label>
      </node>
      <node id="4362">
        <label>iostream</label>
      </node>
      <node id="4367">
        <label>Types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_sample" prot="public">Sample</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_monotonic_allocator__test_8cpp_1ac9e07a76ae83212af84c2b244d0ae3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MonotonicAllocatorTest, Constructs)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref></type>
        </param>
        <param>
          <type>Constructs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/MonotonicAllocator_test.cpp" line="16" column="1" bodyfile="Source/Common/Test/MonotonicAllocator_test.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="_monotonic_allocator__test_8cpp_1a91a8fc9858ada27ba80a532e9a70b138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MonotonicAllocatorTest, AllocateNormalData)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref></type>
        </param>
        <param>
          <type>AllocateNormalData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/MonotonicAllocator_test.cpp" line="21" column="1" bodyfile="Source/Common/Test/MonotonicAllocator_test.cpp" bodystart="21" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_monotonic_allocator__test_8cpp_1aebf780e24cf7ae3e5ecaf4eb8c38a18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MonotonicAllocatorTest, AllocateStructData)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref></type>
        </param>
        <param>
          <type>AllocateStructData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/MonotonicAllocator_test.cpp" line="35" column="1" bodyfile="Source/Common/Test/MonotonicAllocator_test.cpp" bodystart="35" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="_monotonic_allocator__test_8cpp_1adb633093519743ee045d2489e601a0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MonotonicAllocatorTest, AllocateNormalData2)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref></type>
        </param>
        <param>
          <type>AllocateNormalData2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/MonotonicAllocator_test.cpp" line="46" column="1" bodyfile="Source/Common/Test/MonotonicAllocator_test.cpp" bodystart="46" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MonotonicAllocator_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="struct_sample" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg1;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg2;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>arg2<sp/>=<sp/>16.0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">TEST(<ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref>,<sp/>Constructs)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref><sp/>target<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">TEST(<ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref>,<sp/>AllocateNormalData)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref><sp/>target<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>target.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>ASSERT_NE(ptr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>ASSERT_EQ(*ptr,<sp/>0);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>ASSERT_EQ(*ptr,<sp/>99.0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">TEST(<ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref>,<sp/>AllocateStructData)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref><sp/>target<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>target.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;<ref refid="struct_sample" kindref="compound">Sample</ref>&gt;();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ASSERT_NE(ptr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr-&gt;arg1,<sp/>99);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr-&gt;arg2,<sp/>16.0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">TEST(<ref refid="class_monotonic_allocator_test" kindref="compound">MonotonicAllocatorTest</ref>,<sp/>AllocateNormalData2)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref><sp/>target<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_monotonic_allocator" kindref="compound">Azura::Memory::MonotonicAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>uintptr_t<sp/>base<sp/>=<sp/>target.GetBasePtr();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/><sp/><sp/>=<sp/>target.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;<ref refid="struct_sample" kindref="compound">Sample</ref>&gt;();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr2<sp/><sp/>=<sp/>target.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;<ref refid="struct_sample" kindref="compound">Sample</ref>&gt;();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>ptr2-&gt;arg1<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>ptr2-&gt;arg2<sp/>=<sp/>7.0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>ASSERT_EQ(base,<sp/>(uintptr_t)ptr.get());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>ASSERT_EQ(base<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_sample" kindref="compound">Sample</ref>),<sp/>(uintptr_t)ptr2.get());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>ASSERT_NE(ptr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr-&gt;arg1,<sp/>99);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr-&gt;arg2,<sp/>16.0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>ASSERT_NE(ptr2,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr2-&gt;arg1,<sp/>12);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>ASSERT_EQ(ptr2-&gt;arg2,<sp/>7.0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Common/Test/MonotonicAllocator_test.cpp"/>
  </compounddef>
</doxygen>
