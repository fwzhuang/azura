<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vk_scoped_render_pass_8cpp" kind="file" language="C++">
    <compoundname>VkScopedRenderPass.cpp</compoundname>
    <includes local="no">utility</includes>
    <includes refid="_vk_scoped_render_pass_8h" local="yes">Vulkan/VkScopedRenderPass.h</includes>
    <includes refid="_vk_type_mapping_8h" local="yes">Vulkan/VkTypeMapping.h</includes>
    <includes refid="_vk_core_8h" local="yes">Vulkan/VkCore.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_vk_macros_8h" local="yes">Vulkan/VkMacros.h</includes>
    <includes refid="_vk_scoped_swap_chain_8h" local="yes">Vulkan/VkScopedSwapChain.h</includes>
    <incdepgraph>
      <node id="3317">
        <label>functional</label>
      </node>
      <node id="3318">
        <label>iterator</label>
      </node>
      <node id="3329">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3348">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3334" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3343">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="3322" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3344" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3324" relation="include">
        </childnode>
        <childnode refid="3345" relation="include">
        </childnode>
      </node>
      <node id="3324">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3323" relation="include">
        </childnode>
        <childnode refid="3325" relation="include">
        </childnode>
        <childnode refid="3326" relation="include">
        </childnode>
        <childnode refid="3327" relation="include">
        </childnode>
        <childnode refid="3328" relation="include">
        </childnode>
      </node>
      <node id="3332">
        <label>VkScopedImage.h</label>
        <link refid="_vk_scoped_image_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
        <childnode refid="3333" relation="include">
        </childnode>
      </node>
      <node id="3335">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3320">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="3317" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3321" relation="include">
        </childnode>
      </node>
      <node id="3330">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="3315">
        <label>cassert</label>
      </node>
      <node id="3327">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="3351">
        <label>stdexcept</label>
      </node>
      <node id="3313">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3322" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3324" relation="include">
        </childnode>
        <childnode refid="3329" relation="include">
        </childnode>
        <childnode refid="3330" relation="include">
        </childnode>
        <childnode refid="3331" relation="include">
        </childnode>
        <childnode refid="3328" relation="include">
        </childnode>
      </node>
      <node id="3334">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3338">
        <label>map</label>
      </node>
      <node id="3349">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3321" relation="include">
        </childnode>
      </node>
      <node id="3321">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="3331">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="3322">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="3323" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3328">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="3337">
        <label>VkShader.h</label>
        <link refid="_vk_shader_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3338" relation="include">
        </childnode>
        <childnode refid="3339" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
      </node>
      <node id="3323">
        <label>tuple</label>
      </node>
      <node id="3319">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3316" relation="include">
        </childnode>
        <childnode refid="3320" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3341">
        <label>optional</label>
      </node>
      <node id="3336">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="3320" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3312">
        <label>vector</label>
      </node>
      <node id="3314">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3316" relation="include">
        </childnode>
        <childnode refid="3317" relation="include">
        </childnode>
        <childnode refid="3318" relation="include">
        </childnode>
        <childnode refid="3319" relation="include">
        </childnode>
        <childnode refid="3320" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3321" relation="include">
        </childnode>
      </node>
      <node id="3310">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3312" relation="include">
        </childnode>
      </node>
      <node id="3307">
        <label>utility</label>
      </node>
      <node id="3347">
        <label>array</label>
      </node>
      <node id="3353">
        <label>Vulkan/VkScopedSwapChain.h</label>
        <link refid="_vk_scoped_swap_chain_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3332" relation="include">
        </childnode>
      </node>
      <node id="3344">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3324" relation="include">
        </childnode>
      </node>
      <node id="3342">
        <label>Vulkan/VkCore.h</label>
        <link refid="_vk_core_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
      </node>
      <node id="3352">
        <label>VkDebug.h</label>
        <link refid="_vk_debug_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
      </node>
      <node id="3309">
        <label>vulkan/vulkan_core.h</label>
      </node>
      <node id="3325">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="3311">
        <label>Types.h</label>
      </node>
      <node id="3306">
        <label>Source/Azura/RenderSystem/Src/Vulkan/VkScopedRenderPass.cpp</label>
        <link refid="_vk_scoped_render_pass_8cpp"/>
        <childnode refid="3307" relation="include">
        </childnode>
        <childnode refid="3308" relation="include">
        </childnode>
        <childnode refid="3340" relation="include">
        </childnode>
        <childnode refid="3342" relation="include">
        </childnode>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
      </node>
      <node id="3350">
        <label>Vulkan/VkMacros.h</label>
        <link refid="_vk_macros_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
        <childnode refid="3352" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
      </node>
      <node id="3345">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
      </node>
      <node id="3340">
        <label>Vulkan/VkTypeMapping.h</label>
        <link refid="_vk_type_mapping_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3341" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3324" relation="include">
        </childnode>
      </node>
      <node id="3333">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3334" relation="include">
        </childnode>
        <childnode refid="3336" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
      </node>
      <node id="3316">
        <label>cstring</label>
      </node>
      <node id="3308">
        <label>Vulkan/VkScopedRenderPass.h</label>
        <link refid="_vk_scoped_render_pass_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3332" relation="include">
        </childnode>
        <childnode refid="3337" relation="include">
        </childnode>
      </node>
      <node id="3339">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="3313" relation="include">
        </childnode>
      </node>
      <node id="3326">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
      <node id="3346">
        <label>VkTypes.h</label>
        <link refid="_vk_types_8h_source"/>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3312" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3332" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_vulkan">Azura::Vulkan</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkScopedRenderPass.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkTypeMapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkCore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkMacros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkScopedSwapChain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Vulkan<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Containers;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">VkScopedRenderPass::VkScopedRenderPass(U32<sp/>idx,<sp/>Memory::Allocator&amp;<sp/>mainAllocator,<sp/>Log<sp/>logger)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>:<sp/>log_VulkanRenderSystem(std::move(logger)),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>m_id(idx),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorSetLayout(VK_NULL_HANDLE),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_frameBuffers(mainAllocator),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>m_commandBuffers(mainAllocator),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>m_inputAttachments(mainAllocator),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_colorBlendAttachments(mainAllocator),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clearValues(mainAllocator),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaderPipelineInfos(mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::Create(VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCommandPool<sp/>commandPool,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;RenderTargetCreateInfo&gt;&amp;<sp/>pipelineBuffers,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;VkScopedImage&gt;&amp;<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;VkShader&gt;&amp;<sp/>allShaders,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedSwapChain&amp;<sp/>swapChain)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>2048);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>m_commandBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(1);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>m_frameBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" kindref="member">Resize</ref>(1);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Render<sp/>Pass:<sp/>ID<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>m_id);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>CreateDescriptorSetLayout(device,<sp/>createInfo);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>m_shaderPipelineInfos.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(U32(createInfo.m_shaders.size()));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vkShaderId<sp/>:<sp/>createInfo.m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vkShader<sp/>=<sp/>allShaders[vkShaderId];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaderPipelineInfos.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(vkShader.GetShaderStageInfo());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Vector&lt;VkAttachmentReference&gt;<sp/>colorReferences{U32(createInfo.m_outputTargets.size()),<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>VkAttachmentReference<sp/>depthReference;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>Vector&lt;VkAttachmentDescription&gt;<sp/>attachments{U32(createInfo.m_outputTargets.size()),<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>Vector&lt;VkImageView&gt;<sp/>attachmentViews{U32(createInfo.m_outputTargets.size()),<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>m_colorBlendAttachments.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(U32(createInfo.m_outputTargets.size()));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(U32(createInfo.m_outputTargets.size()));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>U32<sp/>refCount<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasDepth<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>output<sp/>:<sp/>createInfo.m_outputTargets)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>selected<sp/>=<sp/>pipelineBuffers[output];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>VkClearValue<sp/>clearValue<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>View<sp/>to<sp/>Vector<sp/>as<sp/>we<sp/>process<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentViews.PushBack(pipelineBufferImages[output].View());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vkFormat<sp/>=<sp/>VkCore::GetVkFormat(selected.m_format,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>VkAttachmentDescription<sp/>attachmentDescription<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vkFormat;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.samples<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.loadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.storeOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_STORE_OP_STORE;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>Stencil<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.stencilLoadOp<sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>attachmentDescription.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthComponent(selected.m_format)<sp/>||<sp/>HasStencilComponent(selected.m_format))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>Depth<sp/>Reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>depthReference<sp/>=<sp/>VkAttachmentReference{refCount,<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasDepth<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shader<sp/>Read<sp/>for<sp/>Color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attachmentDescription.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attachmentDescription.finalLayout<sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearValue.depthStencil<sp/>=<sp/>{<sp/>createInfo.m_clearData.m_depth,<sp/>createInfo.m_clearData.m_stencil<sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(clearValue);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>Color<sp/>Reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorReferences.PushBack({refCount,<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL});</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shader<sp/>Read<sp/>for<sp/>Color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attachmentDescription.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attachmentDescription.finalLayout<sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VkPipelineColorBlendAttachmentState<sp/>colorBlendAttachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.colorWriteMask<sp/>=<sp/>VK_COLOR_COMPONENT_R_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_G_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_B_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_A_BIT;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.blendEnable<sp/>=<sp/>VkBool32(createInfo.m_blendState.m_enable);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(createInfo.m_blendState.m_enable)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Enabling<sp/>Blend<sp/>State<sp/>For<sp/>Render<sp/>Pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorSrcFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_color.m_srcFactor);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorSrcFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorDstFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_color.m_dstFactor);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorDstFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorOp<sp/>=<sp/>ToVkBlendOp(createInfo.m_blendState.m_color.m_op);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorOp,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorOp<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaSrcFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_alpha.m_srcFactor);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaSrcFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaDstFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_alpha.m_dstFactor);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaDstFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaOp<sp/>=<sp/>ToVkBlendOp(createInfo.m_blendState.m_alpha.m_op);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaOp,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaOp<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.srcColorBlendFactor<sp/>=<sp/>colorSrcFactor.value();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.dstColorBlendFactor<sp/>=<sp/>colorDstFactor.value();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.colorBlendOp<sp/>=<sp/>colorOp.value();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.srcAlphaBlendFactor<sp/>=<sp/>alphaSrcFactor.value();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.dstAlphaBlendFactor<sp/>=<sp/>alphaDstFactor.value();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorBlendAttachment.alphaBlendOp<sp/>=<sp/>alphaOp.value();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_colorBlendAttachments.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(colorBlendAttachment);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearValue.color<sp/>=<sp/>{<sp/>createInfo.m_clearData.m_color[0],<sp/>createInfo.m_clearData.m_color[1],<sp/>createInfo.m_clearData.m_color[2],<sp/>createInfo.m_clearData.m_color[3]<sp/>};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(clearValue);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>attachments.PushBack(attachmentDescription);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>++refCount;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>VkSubpassDescription<sp/>subpass<sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>subpass.pipelineBindPoint<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>subpass.colorAttachmentCount<sp/><sp/><sp/><sp/>=<sp/>colorReferences.GetSize();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>subpass.pColorAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>colorReferences.Data();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>subpass.pDepthStencilAttachment<sp/>=<sp/>hasDepth<sp/>?<sp/>&amp;depthReference<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>VkRenderPassCreateInfo<sp/>renderPassInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>renderPassInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>renderPassInfo.attachmentCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attachments.GetSize();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>renderPassInfo.pAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attachments.Data();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>renderPassInfo.subpassCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>renderPassInfo.pSubpasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;subpass;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>special<sp/>subpass<sp/>to<sp/>wait<sp/>for<sp/>Image<sp/>acquisition<sp/>from<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>std::array&lt;VkSubpassDependency,<sp/>2&gt;<sp/>dependencies<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>dependencies[0].srcSubpass<sp/><sp/><sp/><sp/>=<sp/>VK_SUBPASS_EXTERNAL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>dependencies[0].dstSubpass<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>dependencies[0].srcStageMask<sp/><sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>dependencies[0].srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>dependencies[0].dstStageMask<sp/><sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>dependencies[0].dstAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT<sp/>|<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>dependencies[1].srcSubpass<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>dependencies[1].dstSubpass<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SUBPASS_EXTERNAL;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>dependencies[1].srcStageMask<sp/><sp/><sp/><sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>dependencies[1].dstStageMask<sp/><sp/><sp/><sp/>=<sp/>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>dependencies[1].srcAccessMask<sp/><sp/><sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT<sp/>|<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>dependencies[1].dstAccessMask<sp/><sp/><sp/>=<sp/>VK_ACCESS_MEMORY_READ_BIT;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>dependencies[1].dependencyFlags<sp/>=<sp/>VK_DEPENDENCY_BY_REGION_BIT;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>renderPassInfo.dependencyCount<sp/>=<sp/>U32(dependencies.size());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>renderPassInfo.pDependencies<sp/><sp/><sp/>=<sp/>dependencies.data();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateRenderPass(device,<sp/>&amp;renderPassInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;m_renderPass),</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>render<sp/>pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>VkFramebufferCreateInfo<sp/>framebufferInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>framebufferInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>framebufferInfo.renderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_renderPass;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>framebufferInfo.attachmentCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U32(attachmentViews.GetSize());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>framebufferInfo.pAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attachmentViews.Data();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>framebufferInfo.width<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetExtent().width;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>framebufferInfo.height<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetExtent().height;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>framebufferInfo.layers<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>m_numAttachments<sp/>=<sp/>attachmentViews.GetSize();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateFramebuffer(device,<sp/>&amp;framebufferInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>m_frameBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>()),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>single<sp/>framebuffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>m_commandBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(VkCore::CreateCommandBuffer(device,<sp/>commandPool,<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>m_beginRenderSemaphore<sp/>=<sp/>VkCore::CreateSemaphore(device,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::CreateForSwapChain(VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCommandPool<sp/>commandPool,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;VkShader&gt;&amp;<sp/>allShaders,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedSwapChain&amp;<sp/>swapChain)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>2048);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>CreateDescriptorSetLayout(device,<sp/>createInfo);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Render<sp/>Pass<sp/>(Swap<sp/>Chain):<sp/>ID<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>m_id);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>m_shaderPipelineInfos.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(U32(createInfo.m_shaders.size()));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>VkClearValue<sp/>clearValue;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vkShaderId<sp/>:<sp/>createInfo.m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vkShader<sp/>=<sp/>allShaders[vkShaderId];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaderPipelineInfos.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(vkShader.GetShaderStageInfo());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>VkAttachmentDescription<sp/>colorAttachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>colorAttachment.format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetSurfaceFormat();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>colorAttachment.samples<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>colorAttachment.loadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>colorAttachment.storeOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_STORE_OP_STORE;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>Stencil<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>colorAttachment.stencilLoadOp<sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>colorAttachment.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>colorAttachment.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>colorAttachment.finalLayout<sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>m_colorBlendAttachments.<ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>VkPipelineColorBlendAttachmentState<sp/>colorBlendAttachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>colorBlendAttachment.colorWriteMask<sp/>=<sp/>VK_COLOR_COMPONENT_R_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_G_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_B_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_A_BIT;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>colorBlendAttachment.blendEnable<sp/>=<sp/>VkBool32(createInfo.m_blendState.m_enable);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(createInfo.m_blendState.m_enable)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Enabling<sp/>Blend<sp/>State<sp/>For<sp/>Render<sp/>Pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorSrcFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_color.m_srcFactor);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorSrcFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorDstFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_color.m_dstFactor);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorDstFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorOp<sp/>=<sp/>ToVkBlendOp(createInfo.m_blendState.m_color.m_op);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorOp,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>colorOp<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaSrcFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_alpha.m_srcFactor);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaSrcFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaDstFactor<sp/>=<sp/>ToVkBlendFactor(createInfo.m_blendState.m_alpha.m_dstFactor);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaDstFactor<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaOp<sp/>=<sp/>ToVkBlendOp(createInfo.m_blendState.m_alpha.m_op);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>alphaOp,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>alphaOp<sp/>converted<sp/>for<sp/>Blend<sp/>State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.srcColorBlendFactor<sp/>=<sp/>colorSrcFactor.value();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.dstColorBlendFactor<sp/>=<sp/>colorDstFactor.value();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.colorBlendOp<sp/>=<sp/>colorOp.value();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.srcAlphaBlendFactor<sp/>=<sp/>alphaSrcFactor.value();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.dstAlphaBlendFactor<sp/>=<sp/>alphaDstFactor.value();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>colorBlendAttachment.alphaBlendOp<sp/>=<sp/>alphaOp.value();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>m_colorBlendAttachments.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(colorBlendAttachment);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>VkAttachmentDescription<sp/>depthAttachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>depthAttachment.format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetDepthFormat();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>depthAttachment.samples<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>depthAttachment.loadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>depthAttachment.storeOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>depthAttachment.stencilLoadOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>depthAttachment.stencilStoreOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>depthAttachment.initialLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>depthAttachment.finalLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>VkAttachmentReference<sp/>colorAttachmentRef<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>colorAttachmentRef.attachment<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>colorAttachmentRef.layout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>VkAttachmentReference<sp/>depthAttachmentRef<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>depthAttachmentRef.attachment<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>depthAttachmentRef.layout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>VkSubpassDescription<sp/>subpass<sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>subpass.pipelineBindPoint<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>subpass.colorAttachmentCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>subpass.pColorAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;colorAttachmentRef;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>subpass.pDepthStencilAttachment<sp/>=<sp/>swapChain.HasDepthSupport()<sp/>?<sp/>&amp;depthAttachmentRef<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>Vector&lt;VkAttachmentDescription&gt;<sp/>attachments{<sp/>2,<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>attachments.PushBack(colorAttachment);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>clearValue.color<sp/>=<sp/>{<sp/>createInfo.m_clearData.m_color[0],<sp/>createInfo.m_clearData.m_color[1],<sp/>createInfo.m_clearData.m_color[2],<sp/>createInfo.m_clearData.m_color[3]<sp/>};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(clearValue);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChain.HasDepthSupport())</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>attachments.PushBack(depthAttachment);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>clearValue.depthStencil<sp/>=<sp/>{<sp/>createInfo.m_clearData.m_depth,<sp/>createInfo.m_clearData.m_stencil<sp/>};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(clearValue);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>VkRenderPassCreateInfo<sp/>renderPassInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>renderPassInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>renderPassInfo.attachmentCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attachments.GetSize();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>renderPassInfo.pAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attachments.Data();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>renderPassInfo.subpassCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>renderPassInfo.pSubpasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;subpass;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>m_numAttachments<sp/>=<sp/>attachments.GetSize();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>special<sp/>subpass<sp/>to<sp/>wait<sp/>for<sp/>Image<sp/>acquisition<sp/>from<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>std::array&lt;VkSubpassDependency,<sp/>1&gt;<sp/>dependencies<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>dependencies[0].srcSubpass<sp/><sp/><sp/><sp/>=<sp/>VK_SUBPASS_EXTERNAL;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>dependencies[0].dstSubpass<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>dependencies[0].srcStageMask<sp/><sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>dependencies[0].srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>dependencies[0].dstStageMask<sp/><sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>dependencies[0].dstAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_READ_BIT<sp/>|<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>renderPassInfo.dependencyCount<sp/>=<sp/>U32(dependencies.size());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>renderPassInfo.pDependencies<sp/><sp/><sp/>=<sp/>dependencies.data();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateRenderPass(device,<sp/>&amp;renderPassInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;m_renderPass),</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>render<sp/>pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>allImages<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetAllImages();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainExtent<sp/>=<sp/>swapChain.GetExtent();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>m_frameBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" kindref="member">Resize</ref>(allImages.GetSize());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImageView<sp/>depthImageView<sp/>=<sp/>swapChain.GetDepthImage().View();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>allImages.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;VkImageView&gt;<sp/>swapAttachments{<sp/>2,<sp/>allocatorTemporary<sp/>};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>swapAttachments.PushBack(allImages[idx].View());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChain.HasDepthSupport())</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swapAttachments.PushBack(depthImageView);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFramebufferCreateInfo<sp/>framebufferInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.renderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_renderPass;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.attachmentCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapAttachments.GetSize();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.pAttachments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapAttachments.Data();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.width<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChainExtent.width;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.height<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChainExtent.height;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>framebufferInfo.layers<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateFramebuffer(device,<sp/>&amp;framebufferInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;m_frameBuffers[idx]),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>framebuffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>m_commandBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" kindref="member">Resize</ref>(m_frameBuffers.GetSize());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>VkCore::CreateCommandBuffers(device,<sp/>commandPool,<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_commandBuffers,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>m_beginRenderSemaphore<sp/>=<sp/>VkCore::CreateSemaphore(device,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">VkRenderPass<sp/>VkScopedRenderPass::GetRenderPass()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_renderPass;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">VkFramebuffer<sp/>VkScopedRenderPass::GetFrameBuffer(U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_frameBuffers[idx];</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">VkCommandBuffer<sp/>VkScopedRenderPass::GetCommandBuffer(U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_commandBuffers[idx];</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;PipelinePassInput&gt;&amp;<sp/>VkScopedRenderPass::GetPassInputs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inputAttachments;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">U32<sp/>VkScopedRenderPass::GetFrameBufferCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_frameBuffers.GetSize();</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">VkSemaphore<sp/>VkScopedRenderPass::GetRenderSemaphore()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_beginRenderSemaphore;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">VkDescriptorSetLayout<sp/>VkScopedRenderPass::GetDescriptorSetLayout()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_descriptorSetLayout;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">U32<sp/>VkScopedRenderPass::GetId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">U32<sp/>VkScopedRenderPass::GetDescriptorSetId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_descriptorSet;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::SetDescriptorSetId(U32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>m_descriptorSet<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::Begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedSwapChain&amp;<sp/>swapChain)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_frameBuffers.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::BeginCommandBuffer(m_commandBuffers[idx],<sp/>VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPassBeginInfo<sp/>renderPassInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.renderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_renderPass;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.framebuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_frameBuffers[idx];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.renderArea.offset<sp/><sp/><sp/><sp/><sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.renderArea.extent<sp/><sp/><sp/><sp/><sp/>=<sp/>swapChain.GetExtent();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.clearValueCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_clearValues.GetSize();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassInfo.pClearValues<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_clearValues.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBeginRenderPass(m_commandBuffers[idx],<sp/>&amp;renderPassInfo,<sp/>VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::End()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_commandBuffers.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdEndRenderPass(m_commandBuffers[idx]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::EndCommandBuffer(m_commandBuffers[idx],<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;VkPipelineShaderStageCreateInfo&gt;&amp;<sp/>VkScopedRenderPass::GetShaderStageInfo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shaderPipelineInfos;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;VkPipelineColorBlendAttachmentState&gt;&amp;<sp/>VkScopedRenderPass::GetColorBlendAttachments()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_colorBlendAttachments;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::CleanUp(VkDevice<sp/>device,<sp/>VkCommandPool<sp/>commandPool)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>vkDestroyRenderPass(device,<sp/>m_renderPass,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>frameBuffer<sp/>:<sp/>m_frameBuffers)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyFramebuffer(device,<sp/>frameBuffer,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>vkDestroySemaphore(device,<sp/>m_beginRenderSemaphore,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>vkFreeCommandBuffers(device,<sp/>commandPool,<sp/>m_commandBuffers.GetSize(),<sp/>m_commandBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>());</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedRenderPass::CreateDescriptorSetLayout(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(createInfo.m_inputTargets.empty())<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>1024);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>U32<sp/>bindingId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>m_inputAttachments.Reserve(U32(createInfo.m_inputTargets.size()));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>Vector&lt;VkDescriptorSetLayoutBinding&gt;<sp/>currentBindings(U32(createInfo.m_inputTargets.size()),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>input<sp/>:<sp/>createInfo.m_inputTargets)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>m_inputAttachments.PushBack(input);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>combinedShaderFlagBits<sp/>=<sp/>GetCombinedShaderStageFlag(input.m_stages);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::CreateSampledImageBinding(currentBindings,<sp/>bindingId,<sp/>1,<sp/>combinedShaderFlagBits);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>++bindingId;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>m_descriptorSetLayout<sp/>=<sp/>VkCore::CreateDescriptorSetLayout(device,<sp/>currentBindings,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Vulkan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Vulkan/VkScopedRenderPass.cpp"/>
  </compounddef>
</doxygen>
