<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vk_scoped_swap_chain_8cpp" kind="file" language="C++">
    <compoundname>VkScopedSwapChain.cpp</compoundname>
    <includes refid="_vk_scoped_swap_chain_8h" local="yes">Vulkan/VkScopedSwapChain.h</includes>
    <includes refid="_vk_types_8h" local="yes">Vulkan/VkTypes.h</includes>
    <includes refid="_vk_core_8h" local="yes">Vulkan/VkCore.h</includes>
    <includes refid="_renderer_8h" local="yes">Generic/Renderer.h</includes>
    <includes refid="_vk_type_mapping_8h" local="yes">Vulkan/VkTypeMapping.h</includes>
    <includes refid="_vk_macros_8h" local="yes">Vulkan/VkMacros.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <incdepgraph>
      <node id="3533">
        <label>Vulkan/VkScopedSwapChain.h</label>
        <link refid="_vk_scoped_swap_chain_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3547" relation="include">
        </childnode>
      </node>
      <node id="3542">
        <label>functional</label>
      </node>
      <node id="3555">
        <label>Generic/Constants.h</label>
        <link refid="_constants_8h_source"/>
        <childnode refid="3556" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3568">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="3555" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3569" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
        <childnode refid="3570" relation="include">
        </childnode>
      </node>
      <node id="3532">
        <label>Source/Azura/RenderSystem/Src/Vulkan/VkScopedSwapChain.cpp</label>
        <link refid="_vk_scoped_swap_chain_8cpp"/>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3565" relation="include">
        </childnode>
        <childnode refid="3567" relation="include">
        </childnode>
        <childnode refid="3568" relation="include">
        </childnode>
        <childnode refid="3571" relation="include">
        </childnode>
        <childnode refid="3573" relation="include">
        </childnode>
        <childnode refid="3576" relation="include">
        </childnode>
      </node>
      <node id="3543">
        <label>iterator</label>
      </node>
      <node id="3575">
        <label>VkDebug.h</label>
        <link refid="_vk_debug_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
      </node>
      <node id="3537">
        <label>cstdint</label>
      </node>
      <node id="3540">
        <label>cassert</label>
      </node>
      <node id="3577">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3552" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3546" relation="include">
        </childnode>
      </node>
      <node id="3560">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="3574">
        <label>stdexcept</label>
      </node>
      <node id="3565">
        <label>Vulkan/VkTypes.h</label>
        <link refid="_vk_types_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3566" relation="include">
        </childnode>
        <childnode refid="3549" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3547" relation="include">
        </childnode>
      </node>
      <node id="3538">
        <label>string</label>
      </node>
      <node id="3567">
        <label>Vulkan/VkCore.h</label>
        <link refid="_vk_core_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3568" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3565" relation="include">
        </childnode>
        <childnode refid="3548" relation="include">
        </childnode>
      </node>
      <node id="3569">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
      </node>
      <node id="3564">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="3563">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="3561">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="3550">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3551" relation="include">
        </childnode>
        <childnode refid="3553" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3548" relation="include">
        </childnode>
      </node>
      <node id="3571">
        <label>Vulkan/VkTypeMapping.h</label>
        <link refid="_vk_type_mapping_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3572" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
      </node>
      <node id="3545">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="3542" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3546" relation="include">
        </childnode>
      </node>
      <node id="3539">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3541" relation="include">
        </childnode>
        <childnode refid="3542" relation="include">
        </childnode>
        <childnode refid="3543" relation="include">
        </childnode>
        <childnode refid="3544" relation="include">
        </childnode>
        <childnode refid="3545" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3546" relation="include">
        </childnode>
      </node>
      <node id="3546">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="3556">
        <label>tuple</label>
      </node>
      <node id="3570">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3554" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3572">
        <label>optional</label>
      </node>
      <node id="3554">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="3539" relation="include">
        </childnode>
        <childnode refid="3555" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3557" relation="include">
        </childnode>
        <childnode refid="3562" relation="include">
        </childnode>
        <childnode refid="3563" relation="include">
        </childnode>
        <childnode refid="3564" relation="include">
        </childnode>
        <childnode refid="3561" relation="include">
        </childnode>
      </node>
      <node id="3549">
        <label>vector</label>
      </node>
      <node id="3544">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="3540" relation="include">
        </childnode>
        <childnode refid="3541" relation="include">
        </childnode>
        <childnode refid="3545" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3566">
        <label>array</label>
      </node>
      <node id="3548">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3549" relation="include">
        </childnode>
      </node>
      <node id="3576">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="3577" relation="include">
        </childnode>
        <childnode refid="3551" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3573">
        <label>Vulkan/VkMacros.h</label>
        <link refid="_vk_macros_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3574" relation="include">
        </childnode>
        <childnode refid="3575" relation="include">
        </childnode>
        <childnode refid="3548" relation="include">
        </childnode>
      </node>
      <node id="3551">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="3552" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3557">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3556" relation="include">
        </childnode>
        <childnode refid="3558" relation="include">
        </childnode>
        <childnode refid="3559" relation="include">
        </childnode>
        <childnode refid="3560" relation="include">
        </childnode>
        <childnode refid="3561" relation="include">
        </childnode>
      </node>
      <node id="3534">
        <label>vulkan/vulkan_core.h</label>
      </node>
      <node id="3536">
        <label>cstddef</label>
      </node>
      <node id="3558">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="3553">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="3545" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3562">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3535">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3538" relation="include">
        </childnode>
      </node>
      <node id="3547">
        <label>VkScopedImage.h</label>
        <link refid="_vk_scoped_image_8h_source"/>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3548" relation="include">
        </childnode>
        <childnode refid="3550" relation="include">
        </childnode>
      </node>
      <node id="3552">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="3535" relation="include">
        </childnode>
      </node>
      <node id="3541">
        <label>cstring</label>
      </node>
      <node id="3559">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_vulkan">Azura::Vulkan</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkScopedSwapChain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkCore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Renderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkTypeMapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkMacros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Vulkan<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal">VkPresentModeKHR<sp/>ChooseSwapPresentMode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;VkPresentModeKHR&gt;&amp;<sp/>availablePresentModes)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>VkPresentModeKHR<sp/>bestMode<sp/>=<sp/>VK_PRESENT_MODE_FIFO_KHR;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>availablePresentMode<sp/>:<sp/>availablePresentModes)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availablePresentMode<sp/>==<sp/>VK_PRESENT_MODE_MAILBOX_KHR)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availablePresentMode;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availablePresentMode<sp/>==<sp/>VK_PRESENT_MODE_IMMEDIATE_KHR)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bestMode<sp/>=<sp/>availablePresentMode;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestMode;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">VkSurfaceFormatKHR<sp/>ChooseSwapSurfaceFormat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;VkSurfaceFormatKHR&gt;&amp;<sp/>availableFormats,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainRequirements&amp;<sp/>requirement,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log_VulkanRenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>ToVkFormat(requirement.m_format);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>format,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorSpace<sp/>=<sp/>ToVkColorSpaceKHR(requirement.m_colorSpace);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>colorSpace,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Colorspace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Checking<sp/>for<sp/>%d<sp/>availableFormats&quot;</highlight><highlight class="normal">,<sp/>availableFormats.GetSize());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>preferred<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availableFormats.GetSize()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>availableFormats[0].format<sp/>==<sp/>VK_FORMAT_UNDEFINED)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{format.value(),<sp/>colorSpace.value()};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>availableFormat<sp/>:<sp/>availableFormats)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(availableFormat.format<sp/>==<sp/>format.value()<sp/>&amp;&amp;<sp/>availableFormat.colorSpace<sp/>==<sp/>colorSpace.value())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>availableFormat;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>get<sp/>proper<sp/>required<sp/>swapchain<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">VkExtent2D<sp/>ChooseSwapExtent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkSurfaceCapabilitiesKHR&amp;<sp/>capabilities,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainRequirements&amp;<sp/>requirement)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capabilities.currentExtent.width<sp/>!=<sp/>std::numeric_limits&lt;U32&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capabilities.currentExtent;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>VkExtent2D<sp/>actualExtent<sp/>=<sp/>{requirement.m_extent.m_width,<sp/>requirement.m_extent.m_height};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>actualExtent.width<sp/><sp/><sp/><sp/><sp/><sp/>=</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::max(capabilities.minImageExtent.width,<sp/>std::min(capabilities.maxImageExtent.width,<sp/>actualExtent.width));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>actualExtent.height<sp/>=</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::max(capabilities.minImageExtent.height,<sp/>std::min(capabilities.maxImageExtent.height,<sp/>actualExtent.height));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>actualExtent;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">VkScopedSwapChain::VkScopedSwapChain(Memory::Allocator&amp;<sp/>allocator,<sp/>Log<sp/>logger)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>:<sp/>log_VulkanRenderSystem(std::move(logger)),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapChain(),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>m_extent(),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>m_surfaceFormat(),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m_images(allocator),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_depthImage(log_VulkanRenderSystem)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedSwapChain::Create(VkDevice<sp/>device,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>physicalDevice,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkQueue<sp/>graphicsQueue,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCommandPool<sp/>graphicsCommandPool,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/>surface,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkQueueIndices&amp;<sp/>queueIndices,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainDeviceSupport&amp;<sp/>swapChainSupport,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainRequirements&amp;<sp/>swapChainRequirement,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkPhysicalDeviceMemoryProperties&amp;<sp/>physicalDeviceMemoryProperties)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>1024);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_hasDepthSupport<sp/>=<sp/>swapChainRequirement.m_depthFormat<sp/>!=<sp/>RawStorageFormat::UNKNOWN;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkPresentModeKHR<sp/>presentMode<sp/>=<sp/>ChooseSwapPresentMode(swapChainSupport.m_presentModes);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>m_surfaceFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ChooseSwapSurfaceFormat(swapChainSupport.m_formats,<sp/>swapChainRequirement,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>m_extent<sp/>=<sp/>ChooseSwapExtent(swapChainSupport.m_capabilities,<sp/>swapChainRequirement);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Need<sp/>requirement?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Queue<sp/>Length<sp/>of<sp/>SwapChain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>m_imageCount<sp/>=<sp/>swapChainSupport.m_capabilities.minImageCount<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainSupport.m_capabilities.maxImageCount<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_imageCount<sp/>&gt;<sp/>swapChainSupport.m_capabilities.maxImageCount)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m_imageCount<sp/>=<sp/>swapChainSupport.m_capabilities.maxImageCount;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>VkSwapchainCreateInfoKHR<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>createInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>createInfo.surface<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>surface;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>createInfo.minImageCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_imageCount;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>createInfo.imageFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_surfaceFormat.format;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>createInfo.imageColorSpace<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_surfaceFormat.colorSpace;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>createInfo.imageExtent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_extent;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>createInfo.imageArrayLayers<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>createInfo.imageUsage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT<sp/>|<sp/>VK_IMAGE_USAGE_TRANSFER_SRC_BIT;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Possible<sp/>bug<sp/>if<sp/>Graphics<sp/>Queue<sp/>is<sp/>not<sp/>the<sp/>same<sp/>as<sp/>Present<sp/>Queue.<sp/>How<sp/>to<sp/>handle?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queueIndices.m_transferFamily<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>queueIndices.m_isTransferQueueRequired)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SHARING_MODE_CONCURRENT;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>queueIndices.GetActiveSize();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/><sp/><sp/>=<sp/>queueIndices.GetIndicesArray().data();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.imageSharingMode<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.queueFamilyIndexCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.pQueueFamilyIndices<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>createInfo.preTransform<sp/><sp/><sp/>=<sp/>swapChainSupport.m_capabilities.currentTransform;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>createInfo.compositeAlpha<sp/>=<sp/>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>createInfo.presentMode<sp/><sp/><sp/><sp/>=<sp/>presentMode;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>createInfo.clipped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>createInfo.oldSwapchain<sp/><sp/><sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateSwapchainKHR(device,<sp/>&amp;createInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;m_swapChain),</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>swap<sp/>chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>vkGetSwapchainImagesKHR(device,<sp/>m_swapChain,<sp/>&amp;m_imageCount,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>m_images.Reserve(m_imageCount);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>Containers::Vector&lt;VkImage&gt;<sp/>tempImages{Containers::ContainerExtent{m_imageCount},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>vkGetSwapchainImagesKHR(device,<sp/>m_swapChain,<sp/>&amp;m_imageCount,<sp/>tempImages.Data());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>TextureDesc<sp/>swapChainDesc<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>swapChainDesc.m_arrayLayers<sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>swapChainDesc.m_mipLevels<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>swapChainDesc.m_bounds.m_width<sp/><sp/>=<sp/>m_extent.width;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>swapChainDesc.m_bounds.m_height<sp/>=<sp/>m_extent.height;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>swapChainDesc.m_bounds.m_depth<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>swapChainDesc.m_format<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChainRequirement.m_format;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>swapChainDesc.m_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ImageType::Image2D;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_imageCount;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scopedImage<sp/>=<sp/>VkScopedImage(device,<sp/>swapChainDesc,<sp/>tempImages[idx],<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>scopedImage.CreateImageView(ImageViewType::ImageView2D);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>m_images.PushBack(scopedImage);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_hasDepthSupport)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Depth<sp/>Format<sp/>Not<sp/>Supplied;<sp/>Will<sp/>not<sp/>create<sp/>Depth<sp/>Attachment<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>Depth<sp/>Format<sp/>is<sp/>supported<sp/>by<sp/>Device<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>depthFormatCheck<sp/>=<sp/>VkCore::QueryFormatFeatureSupport(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physicalDevice,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCore::GetVkFormat(swapChainRequirement.</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_depthFormat,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormatProperties&amp;<sp/>prop)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(prop.optimalTilingFeatures<sp/>&amp;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>==</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_VulkanRenderSystem,<sp/>depthFormatCheck,<sp/></highlight><highlight class="stringliteral">&quot;Depth<sp/>Format<sp/>Not<sp/>Supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>TextureDesc<sp/>depthDesc<sp/>=<sp/>swapChainDesc;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>depthDesc.m_format<sp/>=<sp/>swapChainRequirement.m_depthFormat;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>depthDesc.m_arrayLayers<sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>depthDesc.m_mipLevels<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>depthDesc.m_size<sp/>=<sp/>GetFormatSize(swapChainRequirement.m_depthFormat)<sp/>*<sp/>swapChainDesc.m_bounds.m_width<sp/>*<sp/>swapChainDesc.m_bounds.m_height;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>m_depthImage.Create(device,<sp/>depthDesc,<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,<sp/>physicalDeviceMemoryProperties);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>m_depthImage.CreateImageView(ImageViewType::ImageView2D);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>VkCommandBuffer<sp/>depthCommandBuffer<sp/>=<sp/>VkCore::CreateCommandBuffer(device,<sp/>graphicsCommandPool,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>VkCore::BeginCommandBuffer(depthCommandBuffer,<sp/>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageTransition<sp/>layoutUndefined{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_UNDEFINED,<sp/>0,<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImageTransition<sp/>layoutDepth{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,<sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT<sp/>|<sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,<sp/>VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>m_depthImage.TransitionLayout(depthCommandBuffer,<sp/>layoutUndefined,<sp/>layoutDepth);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>&amp;<sp/>Wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>VkCore::FlushCommandBuffer(device,<sp/>depthCommandBuffer,<sp/>graphicsQueue,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>vkFreeCommandBuffers(device,<sp/>graphicsCommandPool,<sp/>1,<sp/>&amp;depthCommandBuffer);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkScopedSwapChain::CleanUp(VkDevice<sp/>device)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Swapchains<sp/>have<sp/>a<sp/>different<sp/>cleanup<sp/>compared<sp/>to<sp/>VkScopedImage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>image<sp/>:<sp/>m_images)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(device,<sp/>image.View(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasDepthSupport)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>m_depthImage.CleanUp();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>vkDestroySwapchainKHR(device,<sp/>m_swapChain,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">VkSwapchainKHR<sp/>VkScopedSwapChain::Real()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_swapChain;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">VkFormat<sp/>VkScopedSwapChain::GetSurfaceFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_surfaceFormat.format;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">VkFormat<sp/>VkScopedSwapChain::GetDepthFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_depthImage.GetRealFormat();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VkScopedSwapChain::HasDepthSupport()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasDepthSupport;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkExtent2D&amp;<sp/>VkScopedSwapChain::GetExtent()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_extent;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedImage&amp;<sp/>VkScopedSwapChain::GetImage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frameIdx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_images[frameIdx];</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedImage&amp;<sp/>VkScopedSwapChain::GetDepthImage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_depthImage;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;VkScopedImage&gt;&amp;<sp/>VkScopedSwapChain::GetAllImages()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_images;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Vulkan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Vulkan/VkScopedSwapChain.cpp"/>
  </compounddef>
</doxygen>
