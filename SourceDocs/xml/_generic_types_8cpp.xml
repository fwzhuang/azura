<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_generic_types_8cpp" kind="file" language="C++">
    <compoundname>GenericTypes.cpp</compoundname>
    <includes refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h" local="yes">Generic/GenericTypes.h</includes>
    <incdepgraph>
      <node id="2770">
        <label>functional</label>
      </node>
      <node id="2779">
        <label>Generic/Constants.h</label>
        <link refid="_constants_8h_source"/>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2771">
        <label>iterator</label>
      </node>
      <node id="2776">
        <label>cstdint</label>
      </node>
      <node id="2768">
        <label>cassert</label>
      </node>
      <node id="2784">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2777">
        <label>string</label>
      </node>
      <node id="2765">
        <label>Source/Azura/RenderSystem/Src/Generic/GenericTypes.cpp</label>
        <link refid="_generic_types_8cpp"/>
        <childnode refid="2766" relation="include">
        </childnode>
      </node>
      <node id="2788">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2787">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2785">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2773">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2778" relation="include">
        </childnode>
      </node>
      <node id="2767">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2771" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2778" relation="include">
        </childnode>
      </node>
      <node id="2778">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2780">
        <label>tuple</label>
      </node>
      <node id="2766">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2767" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2781" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2788" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
      </node>
      <node id="2772">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2781">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
      </node>
      <node id="2775">
        <label>cstddef</label>
      </node>
      <node id="2782">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2786">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2774">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2776" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
      </node>
      <node id="2769">
        <label>cstring</label>
      </node>
      <node id="2783">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Generic/GenericTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">ShaderRequirements::ShaderRequirements(U32<sp/>numShaders,<sp/>Memory::Allocator&amp;<sp/>allocator)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>:<sp/>m_shaders(numShaders,<sp/>allocator)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">U32<sp/>ShaderRequirements::AddShader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>m_shaders.PushBack(info);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_shaders.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">RenderPassRequirements::RenderPassRequirements(U32<sp/>numRenderTargets,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>numPasses,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>numBuffers,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>:<sp/>m_buffers(numBuffers,<sp/>alloc),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targets(numRenderTargets,<sp/>alloc),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_passSequence(numPasses,<sp/>alloc)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">U32<sp/>RenderPassRequirements::AddTarget(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderTargetCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>m_targets.PushBack(info);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_targets.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">U32<sp/>RenderPassRequirements::AddBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StructuredBufferCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>m_buffers.PushBack(info);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_buffers.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">U32<sp/>RenderPassRequirements::AddPass(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>m_passSequence.PushBack(info);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_passSequence.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">DescriptorRequirements::DescriptorRequirements(U32<sp/>numDescriptors,<sp/>U32<sp/>numSets,<sp/>Memory::Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>:<sp/>m_descriptorSlots(numDescriptors,<sp/>alloc),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorSets(numSets,<sp/>alloc),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(alloc)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">U32<sp/>DescriptorRequirements::AddDescriptor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorSlotCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_descriptorSlots.PushBack(info);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_descriptorSlots.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">U32<sp/>DescriptorRequirements::AddSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;U32&gt;&amp;<sp/>sets)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>m_descriptorSets.EmplaceBack(sets,<sp/>m_allocator);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_descriptorSets.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Generic/GenericTypes.cpp"/>
  </compounddef>
</doxygen>
