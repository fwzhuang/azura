<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_monotonic_allocator_8cpp" kind="file" language="C++">
    <compoundname>MonotonicAllocator.cpp</compoundname>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes local="no">cassert</includes>
    <includes refid="_memory_buffer_8h" local="yes">Memory/MemoryBuffer.h</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <incdepgraph>
      <node id="4275">
        <label>functional</label>
      </node>
      <node id="4278">
        <label>cstdint</label>
      </node>
      <node id="4281">
        <label>cassert</label>
      </node>
      <node id="4279">
        <label>string</label>
      </node>
      <node id="4272">
        <label>Source/Common/Src/Memory/MonotonicAllocator.cpp</label>
        <link refid="_monotonic_allocator_8cpp"/>
        <childnode refid="4273" relation="include">
        </childnode>
        <childnode refid="4281" relation="include">
        </childnode>
        <childnode refid="4282" relation="include">
        </childnode>
        <childnode refid="4280" relation="include">
        </childnode>
      </node>
      <node id="4274">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4275" relation="include">
        </childnode>
        <childnode refid="4276" relation="include">
        </childnode>
        <childnode refid="4280" relation="include">
        </childnode>
      </node>
      <node id="4280">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4277">
        <label>cstddef</label>
      </node>
      <node id="4273">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="4274" relation="include">
        </childnode>
        <childnode refid="4276" relation="include">
        </childnode>
      </node>
      <node id="4276">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="4277" relation="include">
        </childnode>
        <childnode refid="4278" relation="include">
        </childnode>
        <childnode refid="4279" relation="include">
        </childnode>
      </node>
      <node id="4282">
        <label>Memory/MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4276" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_memory">Azura::Memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryBuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Memory<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal">SizeType<sp/>AlignAhead(SizeType<sp/>size,<sp/>SizeType<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(size<sp/>+<sp/>(alignment<sp/>-<sp/>1))<sp/>&amp;<sp/>~(alignment<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">MonotonicAllocator::MonotonicAllocator(MemoryBuffer&amp;<sp/>buffer,<sp/>U32<sp/>size)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>:<sp/>Allocator(buffer.Allocate(size),<sp/>size),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>m_headPtr(BasePtr()),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sourceBuffer(buffer)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">MonotonicAllocator::~MonotonicAllocator()<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>m_sourceBuffer.Deallocate(reinterpret_cast&lt;void*&gt;(BasePtr()));</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>MonotonicAllocator::Allocate(U32<sp/>size,<sp/>U32<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Power<sp/>of<sp/>2<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>assert((alignment<sp/>&amp;<sp/>(alignment<sp/>-<sp/>1))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>alignedSize<sp/>=<sp/>AlignAhead(size,<sp/>alignment);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size()<sp/>-<sp/>(m_headPtr<sp/>-<sp/>BasePtr())<sp/>&lt;<sp/>alignedSize)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>mask<sp/><sp/><sp/><sp/><sp/>=<sp/>alignment<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UPTR<sp/>misalignment<sp/>=<sp/>(m_headPtr<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Need<sp/>to<sp/>figure<sp/>this<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AddressDiff<sp/>adjustment<sp/>=<sp/>[&amp;]()<sp/>-&gt;<sp/>AddressDiff</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(misalignment<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alignment<sp/>-<sp/>misalignment;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddressPtr(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UPTR<sp/>addr<sp/>=<sp/>m_headPtr<sp/>+<sp/>adjustment;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>m_headPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>addr<sp/>+<sp/>alignedSize;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Store<sp/>adjusment<sp/>appropriately<sp/>for<sp/>deallocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assert(adjustment<sp/>&lt;<sp/>256);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Byte*<sp/>pAlignedMem<sp/>=<sp/>reinterpret_cast&lt;Byte*&gt;(alignedAddress);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pAlignedMem[-1]<sp/>=<sp/>static_cast&lt;Byte&gt;(adjustment);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addr);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MonotonicAllocator::Deallocate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>UNUSED(address);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MonotonicAllocator::Reset()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>m_headPtr<sp/>=<sp/>BasePtr();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Src/Memory/MonotonicAllocator.cpp"/>
  </compounddef>
</doxygen>
