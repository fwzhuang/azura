<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_g_p_u_buffer_writer_8cpp" kind="file" language="C++">
    <compoundname>GPUBufferWriter.cpp</compoundname>
    <includes refid="_g_p_u_buffer_writer_8h" local="yes">Generic/GPUBufferWriter.h</includes>
    <includes refid="_log_8h" local="yes">Log/Log.h</includes>
    <includes refid="_debug_8h" local="yes">Generic/Debug.h</includes>
    <incdepgraph>
      <node id="2861">
        <label>functional</label>
      </node>
      <node id="2866">
        <label>Generic/Constants.h</label>
        <link refid="_constants_8h_source"/>
        <childnode refid="2867" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
      </node>
      <node id="2862">
        <label>iterator</label>
      </node>
      <node id="2855">
        <label>cstdint</label>
      </node>
      <node id="2851">
        <label>Generic/GPUBufferWriter.h</label>
        <link refid="_g_p_u_buffer_writer_8h_source"/>
        <childnode refid="2852" relation="include">
        </childnode>
      </node>
      <node id="2859">
        <label>cassert</label>
      </node>
      <node id="2871">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2856">
        <label>string</label>
      </node>
      <node id="2852">
        <label>Generic/GPUBuffer.h</label>
        <link refid="_g_p_u_buffer_8h_source"/>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2857" relation="include">
        </childnode>
      </node>
      <node id="2875">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2874">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2872">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2864">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2861" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2865" relation="include">
        </childnode>
      </node>
      <node id="2858">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2861" relation="include">
        </childnode>
        <childnode refid="2862" relation="include">
        </childnode>
        <childnode refid="2863" relation="include">
        </childnode>
        <childnode refid="2864" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2865" relation="include">
        </childnode>
      </node>
      <node id="2865">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2867">
        <label>tuple</label>
      </node>
      <node id="2857">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2858" relation="include">
        </childnode>
        <childnode refid="2866" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2868" relation="include">
        </childnode>
        <childnode refid="2873" relation="include">
        </childnode>
        <childnode refid="2874" relation="include">
        </childnode>
        <childnode refid="2875" relation="include">
        </childnode>
        <childnode refid="2872" relation="include">
        </childnode>
      </node>
      <node id="2877">
        <label>vector</label>
      </node>
      <node id="2878">
        <label>Generic/Debug.h</label>
        <link refid="_debug_8h_source"/>
        <childnode refid="2857" relation="include">
        </childnode>
      </node>
      <node id="2863">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2864" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
      </node>
      <node id="2876">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2877" relation="include">
        </childnode>
      </node>
      <node id="2868">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2867" relation="include">
        </childnode>
        <childnode refid="2869" relation="include">
        </childnode>
        <childnode refid="2870" relation="include">
        </childnode>
        <childnode refid="2871" relation="include">
        </childnode>
        <childnode refid="2872" relation="include">
        </childnode>
      </node>
      <node id="2854">
        <label>cstddef</label>
      </node>
      <node id="2869">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2873">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2853" relation="include">
        </childnode>
      </node>
      <node id="2853">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="2854" relation="include">
        </childnode>
        <childnode refid="2855" relation="include">
        </childnode>
        <childnode refid="2856" relation="include">
        </childnode>
      </node>
      <node id="2860">
        <label>cstring</label>
      </node>
      <node id="2850">
        <label>Source/Azura/RenderSystem/Src/Generic/GPUBufferWriter.cpp</label>
        <link refid="_g_p_u_buffer_writer_8cpp"/>
        <childnode refid="2851" relation="include">
        </childnode>
        <childnode refid="2876" relation="include">
        </childnode>
        <childnode refid="2878" relation="include">
        </childnode>
      </node>
      <node id="2870">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Generic/GPUBufferWriter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Log/Log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Debug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">U32<sp/>GPUBufferWriter::AppendRaw(MappedGPUBuffer&amp;<sp/>buffer,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescriptorType<sp/>type,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>byteSize,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>alignment,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AppendRaw(buffer,<sp/>type,<sp/>data,<sp/>byteSize,<sp/>byteSize,<sp/>alignment,<sp/>log);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">U32<sp/>GPUBufferWriter::AppendRaw(MappedGPUBuffer&amp;<sp/>buffer,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescriptorType<sp/>type,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>byteSize,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>maxSize,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>alignment,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>assert(alignment<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>assert(byteSize<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>assert(maxSize<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>assert(data<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>assert(byteSize<sp/>&lt;=<sp/>maxSize);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>LOG_DEBUG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>Descriptor<sp/>(%s)<sp/>Data<sp/>to<sp/>Buffer<sp/>as<sp/>Raw:<sp/>%d<sp/>-<sp/>%d<sp/>bytes<sp/>with<sp/>alignment<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>DescriptorTypeToString(type),<sp/>byteSize,<sp/>maxSize,<sp/>alignment);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log,<sp/>buffer.SubAllocate(maxSize,<sp/>alignment),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>SubAllocate<sp/>in<sp/>GPU<sp/>Mapped<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byteOffset<sp/>=<sp/>U32(buffer.p_dataCur<sp/>-<sp/>buffer.p_dataBeg);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::memcpy(buffer.p_dataCur,<sp/>data,<sp/>byteSize);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>buffer.p_dataCur<sp/>+=<sp/>maxSize;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>returnId<sp/>=<sp/>buffer.m_entries.GetSize();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>buffer.m_entries.EmplaceBack(byteOffset,<sp/>byteSize,<sp/>maxSize,<sp/>type);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>LOG_DEBUG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>Descriptor<sp/>(%s)<sp/>completed&quot;</highlight><highlight class="normal">,<sp/>DescriptorTypeToString(type));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returnId;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">U32<sp/>GPUBufferWriter::AppendTexture(MappedGPUBuffer&amp;<sp/>buffer,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>byteSize,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>alignment,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>currentRowPitch,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>requiredRowPitch,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Log&amp;<sp/>log)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>assert(data<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>assert(currentRowPitch<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>assert(requiredRowPitch<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>assert(alignment<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>assert(byteSize<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>numRows<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>byteSize<sp/>/<sp/>currentRowPitch;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>scaledRowPitch<sp/>=<sp/>SCALE_SIZE(currentRowPitch,<sp/>requiredRowPitch);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>requiredSize<sp/><sp/><sp/>=<sp/>scaledRowPitch<sp/>*<sp/>numRows;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>LOG_DEBUG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>Texture<sp/>Data<sp/>to<sp/>Buffer<sp/>as<sp/>Raw:<sp/>%d<sp/>bytes<sp/>with<sp/>alignment<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>byteSize,<sp/>alignment);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>LOG_DEBUG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Scaled<sp/>Texture<sp/>Row<sp/>Pitch<sp/>from<sp/>%d<sp/>to<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>currentRowPitch,<sp/>scaledRowPitch);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log,<sp/>buffer.SubAllocate(requiredSize,<sp/>alignment),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>SubAllocate<sp/>in<sp/>GPU<sp/>Mapped<sp/>Buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byteOffset<sp/>=<sp/>U32(buffer.p_dataCur<sp/>-<sp/>buffer.p_dataBeg);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>textureData<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>numRows;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(buffer.p_dataCur,<sp/>textureData,<sp/>currentRowPitch);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.p_dataCur<sp/>+=<sp/>scaledRowPitch;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>textureData<sp/>+=<sp/>currentRowPitch;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>returnId<sp/>=<sp/>buffer.m_entries.GetSize();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>buffer.m_entries.EmplaceBack(byteOffset,<sp/>byteSize,<sp/>byteSize,<sp/>DescriptorType::SampledImage);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>LOG_DEBUG(log,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>Texture<sp/>completed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returnId;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Generic/GPUBufferWriter.cpp"/>
  </compounddef>
</doxygen>
