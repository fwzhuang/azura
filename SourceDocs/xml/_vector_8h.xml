<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vector_8h" kind="file" language="C++">
    <compoundname>Vector.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <includes local="no">functional</includes>
    <includes local="no">iterator</includes>
    <includes refid="_array_8h" local="yes">Array.h</includes>
    <includes refid="_allocator_8h" local="yes">Memory/Allocator.h</includes>
    <includes refid="_types_8h" local="yes">Types.h</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <includedby refid="_compute_pool_8h" local="yes">Source/Azura/RenderSystem/Inc/Generic/ComputePool.h</includedby>
    <includedby refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h" local="yes">Source/Azura/RenderSystem/Inc/Generic/GenericTypes.h</includedby>
    <includedby refid="_drawable_8h" local="yes">Source/Azura/RenderSystem/Inc/Generic/Drawable.h</includedby>
    <includedby refid="_renderer_8h" local="yes">Source/Azura/RenderSystem/Inc/Generic/Renderer.h</includedby>
    <includedby refid="_texture_manager_8h" local="yes">Source/Azura/RenderSystem/Inc/Generic/TextureManager.h</includedby>
    <includedby refid="_vk_core_8h" local="yes">Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h</includedby>
    <includedby refid="_vk_types_8h" local="yes">Source/Azura/RenderSystem/Inc/Vulkan/VkTypes.h</includedby>
    <includedby refid="_vk_scoped_pipeline_8h" local="yes">Source/Azura/RenderSystem/Inc/Vulkan/VkScopedPipeline.h</includedby>
    <includedby refid="_vk_platform_8h" local="yes">Source/Azura/RenderSystem/Inc/Vulkan/VkPlatform.h</includedby>
    <includedby refid="_vk_renderer_8h" local="yes">Source/Azura/RenderSystem/Inc/Vulkan/VkRenderer.h</includedby>
    <includedby refid="_vk_scoped_swap_chain_8h" local="no">Source/Azura/RenderSystem/Inc/Vulkan/VkScopedSwapChain.h</includedby>
    <includedby refid="_compute_pool_8cpp" local="yes">Source/Azura/RenderSystem/Src/Generic/ComputePool.cpp</includedby>
    <includedby refid="_drawable_8cpp" local="yes">Source/Azura/RenderSystem/Src/Generic/Drawable.cpp</includedby>
    <includedby refid="_vk_drawable_pool_8cpp" local="yes">Source/Azura/RenderSystem/Src/Vulkan/VkDrawablePool.cpp</includedby>
    <includedby refid="_constraints_8h" local="no">Source/Physics/Inc/Physics/PBD/Cloth/Constraints.h</includedby>
    <includedby refid="_solving_view_8h" local="no">Source/Physics/Inc/Physics/PBD/Common/SolvingView.h</includedby>
    <includedby refid="_file_reader_8h" local="yes">Source/Platform/Inc/Utils/FileReader.h</includedby>
    <incdepgraph>
      <node id="4391">
        <label>functional</label>
      </node>
      <node id="4392">
        <label>iterator</label>
      </node>
      <node id="4397">
        <label>cstdint</label>
      </node>
      <node id="4389">
        <label>cassert</label>
      </node>
      <node id="4398">
        <label>string</label>
      </node>
      <node id="4394">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4391" relation="include">
        </childnode>
        <childnode refid="4395" relation="include">
        </childnode>
        <childnode refid="4399" relation="include">
        </childnode>
      </node>
      <node id="4388">
        <label>Source/Containers/Inc/Containers/Vector.h</label>
        <link refid="_vector_8h"/>
        <childnode refid="4389" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
        <childnode refid="4391" relation="include">
        </childnode>
        <childnode refid="4392" relation="include">
        </childnode>
        <childnode refid="4393" relation="include">
        </childnode>
        <childnode refid="4394" relation="include">
        </childnode>
        <childnode refid="4395" relation="include">
        </childnode>
        <childnode refid="4399" relation="include">
        </childnode>
      </node>
      <node id="4399">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4393">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="4389" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
        <childnode refid="4394" relation="include">
        </childnode>
        <childnode refid="4395" relation="include">
        </childnode>
      </node>
      <node id="4396">
        <label>cstddef</label>
      </node>
      <node id="4395">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="4396" relation="include">
        </childnode>
        <childnode refid="4397" relation="include">
        </childnode>
        <childnode refid="4398" relation="include">
        </childnode>
      </node>
      <node id="4390">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4439">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedSwapChain.h</label>
        <link refid="_vk_scoped_swap_chain_8h_source"/>
        <childnode refid="4438" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4404">
        <label>Source/Azura/RenderSystem/Inc/Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4405" relation="include">
        </childnode>
        <childnode refid="4413" relation="include">
        </childnode>
        <childnode refid="4414" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
        <childnode refid="4416" relation="include">
        </childnode>
      </node>
      <node id="4406">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedSwapChain.h</label>
        <link refid="_d3_d12_scoped_swap_chain_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
        <childnode refid="4410" relation="include">
        </childnode>
      </node>
      <node id="4420">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Drawable.h</label>
        <link refid="_d3_d12_drawable_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
      </node>
      <node id="4432">
        <label>Source/Azura/RenderSystem/Inc/Generic/GPUBufferWriter.h</label>
        <link refid="_g_p_u_buffer_writer_8h_source"/>
      </node>
      <node id="4441">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkShader.h</label>
        <link refid="_vk_shader_8h_source"/>
        <childnode refid="4437" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4403">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Renderer.h</label>
        <link refid="_d3_d12_renderer_8h_source"/>
      </node>
      <node id="4426">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12TypeMapping.h</label>
        <link refid="_d3_d12_type_mapping_8h_source"/>
      </node>
      <node id="4410">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedRenderPass.h</label>
        <link refid="_d3_d12_scoped_render_pass_8h_source"/>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4408" relation="include">
        </childnode>
      </node>
      <node id="4415">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkRenderer.h</label>
        <link refid="_vk_renderer_8h_source"/>
      </node>
      <node id="4436">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTypes.h</label>
        <link refid="_vk_types_8h_source"/>
        <childnode refid="4414" relation="include">
        </childnode>
      </node>
      <node id="4440">
        <label>Source/Azura/RenderSystem/Inc/Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="4425" relation="include">
        </childnode>
        <childnode refid="4441" relation="include">
        </childnode>
      </node>
      <node id="4431">
        <label>Source/Azura/RenderSystem/Inc/Generic/GPUBuffer.h</label>
        <link refid="_g_p_u_buffer_8h_source"/>
        <childnode refid="4432" relation="include">
        </childnode>
      </node>
      <node id="4414">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h</label>
        <link refid="_vk_core_8h_source"/>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4416">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTextureManager.h</label>
        <link refid="_vk_texture_manager_8h_source"/>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4445">
        <label>Source/Physics/Inc/Physics/PBD/Cloth/ClothSolvingView.h</label>
        <link refid="_cloth_solving_view_8h_source"/>
        <childnode refid="4446" relation="include">
        </childnode>
        <childnode refid="4447" relation="include">
        </childnode>
      </node>
      <node id="4428">
        <label>Source/Azura/RenderSystem/Inc/Generic/Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="4420" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4404" relation="include">
        </childnode>
        <childnode refid="4429" relation="include">
        </childnode>
        <childnode refid="4417" relation="include">
        </childnode>
        <childnode refid="4430" relation="include">
        </childnode>
      </node>
      <node id="4437">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedRenderPass.h</label>
        <link refid="_vk_scoped_render_pass_8h_source"/>
        <childnode refid="4438" relation="include">
        </childnode>
        <childnode refid="4430" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4408">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedPipeline.h</label>
        <link refid="_d3_d12_scoped_pipeline_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
      </node>
      <node id="4433">
        <label>Source/Azura/RenderSystem/Inc/Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="4434" relation="include">
        </childnode>
        <childnode refid="4413" relation="include">
        </childnode>
        <childnode refid="4435" relation="include">
        </childnode>
        <childnode refid="4416" relation="include">
        </childnode>
      </node>
      <node id="4442">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTypeMapping.h</label>
        <link refid="_vk_type_mapping_8h_source"/>
      </node>
      <node id="4407">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedComputePass.h</label>
        <link refid="_d3_d12_scoped_compute_pass_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4408" relation="include">
        </childnode>
      </node>
      <node id="4447">
        <label>Source/Physics/Inc/Physics/Geometry/ClothPlane.h</label>
        <link refid="_cloth_plane_8h_source"/>
      </node>
      <node id="4422">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedCommandBuffer.h</label>
        <link refid="_d3_d12_scoped_command_buffer_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
        <childnode refid="4410" relation="include">
        </childnode>
      </node>
      <node id="4430">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkDrawablePool.h</label>
        <link refid="_vk_drawable_pool_8h_source"/>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4400">
        <label>Source/Containers/Inc/Containers/Vector.h</label>
        <link refid="_vector_8h"/>
        <childnode refid="4401" relation="include">
        </childnode>
        <childnode refid="4418" relation="include">
        </childnode>
        <childnode refid="4428" relation="include">
        </childnode>
        <childnode refid="4404" relation="include">
        </childnode>
        <childnode refid="4433" relation="include">
        </childnode>
        <childnode refid="4414" relation="include">
        </childnode>
        <childnode refid="4436" relation="include">
        </childnode>
        <childnode refid="4438" relation="include">
        </childnode>
        <childnode refid="4443" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
        <childnode refid="4439" relation="include">
        </childnode>
        <childnode refid="4444" relation="include">
        </childnode>
        <childnode refid="4448" relation="include">
        </childnode>
        <childnode refid="4449" relation="include">
        </childnode>
      </node>
      <node id="4429">
        <label>Source/Azura/RenderSystem/Inc/Generic/PoolPrimitives.h</label>
        <link refid="_pool_primitives_8h_source"/>
      </node>
      <node id="4401">
        <label>Source/Azura/RenderSystem/Inc/Generic/ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4404" relation="include">
        </childnode>
        <childnode refid="4417" relation="include">
        </childnode>
      </node>
      <node id="4418">
        <label>Source/Azura/RenderSystem/Inc/Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="4419" relation="include">
        </childnode>
        <childnode refid="4408" relation="include">
        </childnode>
        <childnode refid="4426" relation="include">
        </childnode>
        <childnode refid="4401" relation="include">
        </childnode>
        <childnode refid="4427" relation="include">
        </childnode>
        <childnode refid="4428" relation="include">
        </childnode>
        <childnode refid="4405" relation="include">
        </childnode>
        <childnode refid="4404" relation="include">
        </childnode>
        <childnode refid="4431" relation="include">
        </childnode>
        <childnode refid="4433" relation="include">
        </childnode>
        <childnode refid="4440" relation="include">
        </childnode>
        <childnode refid="4438" relation="include">
        </childnode>
        <childnode refid="4437" relation="include">
        </childnode>
        <childnode refid="4442" relation="include">
        </childnode>
      </node>
      <node id="4443">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkPlatform.h</label>
        <link refid="_vk_platform_8h_source"/>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4446">
        <label>Source/Physics/Inc/Physics/Geometry/ClothMesh.h</label>
        <link refid="_cloth_mesh_8h_source"/>
      </node>
      <node id="4405">
        <label>Source/Azura/RenderSystem/Inc/Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4406" relation="include">
        </childnode>
        <childnode refid="4411" relation="include">
        </childnode>
      </node>
      <node id="4427">
        <label>Source/Azura/RenderSystem/Inc/Generic/Debug.h</label>
        <link refid="_debug_8h_source"/>
      </node>
      <node id="4423">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedImage.h</label>
        <link refid="_d3_d12_scoped_image_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
        <childnode refid="4410" relation="include">
        </childnode>
      </node>
      <node id="4424">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedSampler.h</label>
        <link refid="_d3_d12_scoped_sampler_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
      </node>
      <node id="4413">
        <label>Source/Azura/RenderSystem/Inc/Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
      </node>
      <node id="4434">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12TextureManager.h</label>
        <link refid="_d3_d12_texture_manager_8h_source"/>
      </node>
      <node id="4421">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedBuffer.h</label>
        <link refid="_d3_d12_scoped_buffer_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
      </node>
      <node id="4425">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedShader.h</label>
        <link refid="_d3_d12_scoped_shader_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
        <childnode refid="4408" relation="include">
        </childnode>
        <childnode refid="4410" relation="include">
        </childnode>
      </node>
      <node id="4412">
        <label>Source/Azura/RenderSystem/Inc/Generic/Windows/Win32GLFWWindow.h</label>
        <link refid="_win32_g_l_f_w_window_8h_source"/>
      </node>
      <node id="4444">
        <label>Source/Physics/Inc/Physics/PBD/Cloth/Constraints.h</label>
        <link refid="_constraints_8h_source"/>
        <childnode refid="4445" relation="include">
        </childnode>
      </node>
      <node id="4411">
        <label>Source/Azura/RenderSystem/Inc/Generic/GLFWWindow.h</label>
        <link refid="_g_l_f_w_window_8h_source"/>
        <childnode refid="4412" relation="include">
        </childnode>
      </node>
      <node id="4438">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedPipeline.h</label>
        <link refid="_vk_scoped_pipeline_8h_source"/>
        <childnode refid="4430" relation="include">
        </childnode>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4449">
        <label>Source/Platform/Inc/Utils/FileReader.h</label>
        <link refid="_file_reader_8h_source"/>
      </node>
      <node id="4448">
        <label>Source/Physics/Inc/Physics/PBD/Common/SolvingView.h</label>
        <link refid="_solving_view_8h_source"/>
        <childnode refid="4445" relation="include">
        </childnode>
      </node>
      <node id="4419">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="4402" relation="include">
        </childnode>
        <childnode refid="4420" relation="include">
        </childnode>
        <childnode refid="4409" relation="include">
        </childnode>
        <childnode refid="4403" relation="include">
        </childnode>
        <childnode refid="4421" relation="include">
        </childnode>
        <childnode refid="4422" relation="include">
        </childnode>
        <childnode refid="4407" relation="include">
        </childnode>
        <childnode refid="4423" relation="include">
        </childnode>
        <childnode refid="4410" relation="include">
        </childnode>
        <childnode refid="4424" relation="include">
        </childnode>
        <childnode refid="4425" relation="include">
        </childnode>
        <childnode refid="4406" relation="include">
        </childnode>
        <childnode refid="4426" relation="include">
        </childnode>
      </node>
      <node id="4417">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkComputePool.h</label>
        <link refid="_vk_compute_pool_8h_source"/>
        <childnode refid="4415" relation="include">
        </childnode>
      </node>
      <node id="4435">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedImage.h</label>
        <link refid="_vk_scoped_image_8h_source"/>
        <childnode refid="4436" relation="include">
        </childnode>
        <childnode refid="4430" relation="include">
        </childnode>
        <childnode refid="4437" relation="include">
        </childnode>
        <childnode refid="4439" relation="include">
        </childnode>
      </node>
      <node id="4402">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ComputePool.h</label>
        <link refid="_d3_d12_compute_pool_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
      </node>
      <node id="4409">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12DrawablePool.h</label>
        <link refid="_d3_d12_drawable_pool_8h_source"/>
        <childnode refid="4403" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_azura_1_1_containers_1_1_container_extent" prot="public">Azura::Containers::ContainerExtent</innerclass>
    <innerclass refid="class_azura_1_1_containers_1_1_vector" prot="public">Azura::Containers::Vector</innerclass>
    <innerclass refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" prot="public">Azura::Containers::Vector::Iterator</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_containers">Azura::Containers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/Allocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Containers<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="struct_azura_1_1_containers_1_1_container_extent" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>U32<sp/>m_size;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>U32<sp/>m_reserveSize;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group___containers_1gabdea46cc128f48a9fc317fd5ca797ee8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="group___containers_1gabdea46cc128f48a9fc317fd5ca797ee8" kindref="member">ContainerExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>size)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_size(size),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_reserveSize(size)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="group___containers_1ga086b568dd8be510400cd02bf146c6141" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group___containers_1ga086b568dd8be510400cd02bf146c6141" kindref="member">ContainerExtent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>reserveSize)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_size(size),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_reserveSize(reserveSize)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="111" refid="class_azura_1_1_containers_1_1_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(<ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(UINT<sp/>maxSize,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(UINT<sp/>currentSize,<sp/>UINT<sp/>maxSize,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Type&gt;&amp;<sp/>list,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref><sp/>extent,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc,<sp/>Args&amp;&amp;...<sp/>args);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a81495c5eec68f60da33123073cdde942" kindref="member">~Vector</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>other,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref><sp/>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector</ref>(<ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(Type&amp;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1aadfac4f55765e41e812160022a9a949f" kindref="member">EmplaceBack</ref>(Args<sp/>...<sp/>args);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1ad181b9dc858e1ad59fc64b39f795fb75" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a5da3557964b80e7c40a574fbbb7e24a6" kindref="member">FindFirst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a4d191b0d876f03c44c5a58e6380a07ee" kindref="member">Remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" kindref="member">Reserve</ref>(U32<sp/>requiredSize);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" kindref="member">Resize</ref>(U32<sp/>requiredSize);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a3f955f930eefbb486ff9880421bbc7a4" kindref="member">IsEmpty</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a9f350f9bbc7f5aaec6318369444d2d99" kindref="member">InsertAt</ref>(U32<sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>Type*<sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type*<sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1acf0e0039895ef1262e9060406863351e" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>operator[](U32<sp/>idx);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>operator[](U32<sp/>idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>Last();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>Last()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>U32<sp/>GetSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>U32<sp/>GetMaxSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_maxSize;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Assign(InputIt<sp/>first,<sp/>InputIt<sp/>last);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::random_access_iterator_tag;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>Type*;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>Type&amp;;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>mPtr(ptr),</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mIndex(index)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>(<ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre<sp/>Increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++mIndex;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Post<sp/>Increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator++();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre<sp/>Decrement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator--()<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--mIndex;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Post<sp/>Decrement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator--(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator--();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr<sp/>==<sp/>rhs.mPtr<sp/>&amp;&amp;<sp/>mIndex<sp/>==<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&lt;<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&lt;=<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&gt;<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&gt;=<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>(mPtr,<sp/>mIndex<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mIndex<sp/>+=<sp/>idx;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mIndex<sp/>-<sp/>idx<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>(mPtr,<sp/>mIndex<sp/>-<sp/>idx);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mIndex<sp/>-<sp/>idx<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mIndex<sp/>-=<sp/>idx;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>-<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(lhs);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy<sp/>-<sp/>rhs;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>Type&amp;<sp/>operator*()<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr-&gt;operator[](mIndex);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>Type*<sp/>operator-&gt;()<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mPtr-&gt;operator[](mIndex);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>Type&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr-&gt;operator[](mIndex<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;</ref>*<sp/>mPtr{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mIndex{-1};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a49e7eba07315528d8f75998944b0e7c5" kindref="member">Begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1aaf8c1fcfb814e8030e5520b56c094c6a" kindref="member">End</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" kindref="member">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" kindref="member">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GrowIfNeeded();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>U32<sp/>m_size{0};</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>U32<sp/>m_maxSize{0};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;Memory::Allocator&gt;<sp/>m_allocator;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>Memory::UniqueArrayPtr&lt;Type&gt;<sp/>m_base{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="625"><highlight class="normal">};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="628" refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector_1a6f3debb85587cf01eef9bddcb14c58fb" kindref="member">Vector&lt;Type&gt;::Vector</ref>(<ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>:<sp/>m_allocator(alloc)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="633" refid="class_azura_1_1_containers_1_1_vector_1a57b086de3f62679d082a086300138636" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT<sp/>maxSize,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>:<sp/>m_maxSize(maxSize),</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(alloc),</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base(m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize))<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="640" refid="class_azura_1_1_containers_1_1_vector_1af816fc5ac5a9e5060f6c88cb4e8beaa3" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Vector</ref>(UINT<sp/>currentSize,<sp/>UINT<sp/>maxSize,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size(currentSize),</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxSize(maxSize),</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(alloc),</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base(m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize))<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="649" refid="class_azura_1_1_containers_1_1_vector_1a791c8721cacac5dd785a45a98e45d4a8" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::initializer_list&lt;Type&gt;&amp;<sp/>list,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>:<sp/>m_size(U32(list.size())),</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxSize(U32(list.size())),</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(alloc),</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base(m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize))<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_trivially_copyable_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(m_base.get(),<sp/>list.begin(),<sp/>m_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type*<sp/>start<sp/>=<sp/>list.begin();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>Copy<sp/>Construct<sp/>each<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[idx])<sp/>Type(*(start<sp/>+<sp/>idx));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="669" refid="class_azura_1_1_containers_1_1_vector_1a11574d6d332a04eccebcc4f0255275b4" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Vector</ref>(<ref refid="struct_azura_1_1_containers_1_1_container_extent" kindref="compound">ContainerExtent</ref><sp/>extent,<sp/><ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc,<sp/>Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>:<sp/>m_maxSize(extent.m_reserveSize),</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size(extent.m_size),</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(alloc),</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base(m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize))<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>assert(m_size<sp/>&lt;=<sp/>m_maxSize);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[idx])<sp/>Type(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="682" refid="class_azura_1_1_containers_1_1_vector_1a81495c5eec68f60da33123073cdde942" refkind="member"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::~Vector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>MSVC<sp/>gives<sp/>a<sp/>NoDIscard<sp/>warning<sp/>here.<sp/>Not<sp/>sure<sp/>why,<sp/>but<sp/>due<sp/>to<sp/>C++17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(m_base[idx].~Type());</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal">};</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>:<sp/>m_size(other.m_size),</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxSize(other.m_maxSize),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(other.m_allocator)<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_trivially_copyable_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(m_base.get(),<sp/>other.m_base.get(),<sp/>other.m_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>Copy<sp/>Construct<sp/>each<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>other.m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[idx])<sp/>Type(other.m_base[idx]);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">Vector&lt;Type&gt;::Vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>other,<sp/>Memory::Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>:<sp/>m_size(other.m_size),</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>m_maxSize(other.m_maxSize),</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>m_allocator(alloc)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_trivially_copyable_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(m_base.get(),<sp/>other.m_base.get(),<sp/>other.m_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>Copy<sp/>Construct<sp/>each<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>other.m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[idx])<sp/>Type(other.m_base[idx]);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="normal">Vector&lt;Type&gt;::Vector(Vector&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>:<sp/>m_size(std::move(other.m_size)),</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxSize(std::move(other.m_maxSize)),</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(other.m_allocator),</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base(std::move(other.m_base))<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>other.m_base<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>other.m_size<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>other.m_maxSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">Vector&lt;Type&gt;&amp;<sp/>Vector&lt;Type&gt;::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>m_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.m_size;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>m_maxSize<sp/><sp/><sp/>=<sp/>other.m_maxSize;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>m_allocator<sp/>=<sp/>other.m_allocator;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_trivially_copyable_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(m_base.get(),<sp/>other.m_base.get(),<sp/>other.m_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>Copy<sp/>Construct<sp/>each<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>other.m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[idx])<sp/>Type(other.m_base[idx]);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">Vector&lt;Type&gt;&amp;<sp/>Vector&lt;Type&gt;::operator=(Vector&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>m_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(other.m_size);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>m_maxSize<sp/><sp/><sp/>=<sp/>std::move(other.m_maxSize);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>m_allocator<sp/>=<sp/>other.m_allocator;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>m_base<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(other.m_base);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>other.m_base<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>other.m_size<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>other.m_maxSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector&lt;Type&gt;::GrowIfNeeded()<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_size<sp/>&lt;<sp/>m_maxSize)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;===<sp/>Debug<sp/>Warning:<sp/>Vector<sp/>was<sp/>not<sp/>initialized<sp/>with<sp/>any<sp/>size.<sp/>Set<sp/>a<sp/>size<sp/>using<sp/>the<sp/>ctor<sp/>or<sp/>Reserve()<sp/>or<sp/>Resize().<sp/>===\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>Reserve(1);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;===<sp/>Debug<sp/>Warning:<sp/>Vector<sp/>Growing<sp/>in<sp/>Size.<sp/>This<sp/>is<sp/>underperformant<sp/>--<sp/>consider<sp/>setting<sp/>the<sp/>initial<sp/>size.<sp/>===\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>m_maxSize<sp/>=<sp/>2<sp/>*<sp/>m_maxSize;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Grow<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newDataHandle<sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_trivially_copyable_v&lt;Type&gt;)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memmove(newDataHandle.get(),<sp/>m_base.get(),<sp/>m_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>Move<sp/>Construct<sp/>each<sp/>item<sp/>into<sp/>new<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;newDataHandle[idx])<sp/>Type(std::move(m_base[idx]));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>MSVC<sp/>gives<sp/>a<sp/>NoDiscard<sp/>warning<sp/>here.<sp/>Not<sp/>sure<sp/>why,<sp/>but<sp/>due<sp/>to<sp/>C++17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UNUSED(m_base[idx].~Type());</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>std::move(newDataHandle);</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="825" refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::PushBack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>GrowIfNeeded();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[m_size])<sp/>Type(data);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>++m_size;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="833" refid="class_azura_1_1_containers_1_1_vector_1af55839be4b5b355ed020a09201713935" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::PushBack</ref>(Type&amp;&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>GrowIfNeeded();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[m_size])<sp/>Type(std::move(data));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>++m_size;</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="842" refid="class_azura_1_1_containers_1_1_vector_1aadfac4f55765e41e812160022a9a949f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::EmplaceBack</ref>(Args<sp/>...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>GrowIfNeeded();</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;m_base[m_size])<sp/>Type(args...);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>++m_size;</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="850" refid="class_azura_1_1_containers_1_1_vector_1ad181b9dc858e1ad59fc64b39f795fb75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::PopBack</ref>()<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>assert(m_size<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>targetId<sp/>=<sp/>m_size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>m_base[targetId].~Type();</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>--m_size;</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="859" refid="class_azura_1_1_containers_1_1_vector_1a5da3557964b80e7c40a574fbbb7e24a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::FindFirst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>itr<sp/>=<sp/>0;<sp/>itr<sp/>&lt;<sp/>m_size;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>m_base[itr])<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>itr;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="873" refid="class_azura_1_1_containers_1_1_vector_1a4d191b0d876f03c44c5a58e6380a07ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>FindFirst(data);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>itr<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>idx<sp/>+<sp/>1;<sp/>itr<sp/>&lt;<sp/>m_size;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_base[itr<sp/>-<sp/>1]<sp/>=<sp/>m_base[itr];</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>--m_size;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="886" refid="class_azura_1_1_containers_1_1_vector_1af53da95e8dee524b3b12f2208079741f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Reserve</ref>(U32<sp/>requiredSize)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>m_maxSize<sp/>=<sp/>requiredSize;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>m_base<sp/><sp/><sp/><sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="892" refid="class_azura_1_1_containers_1_1_vector_1a6d651ba60555cf392c766eb77758bd81" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Resize</ref>(U32<sp/>requiredSize)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>m_maxSize<sp/>=<sp/>requiredSize;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>m_size<sp/><sp/><sp/><sp/>=<sp/>requiredSize;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>m_base<sp/><sp/><sp/><sp/>=<sp/>m_allocator.get().RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="899" refid="class_azura_1_1_containers_1_1_vector_1a3f955f930eefbb486ff9880421bbc7a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::IsEmpty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="904" refid="class_azura_1_1_containers_1_1_vector_1a9f350f9bbc7f5aaec6318369444d2d99" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::InsertAt</ref>(U32<sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;=<sp/>m_size);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>itr<sp/><sp/>=<sp/>m_size;<sp/>itr<sp/>&gt;<sp/>idx;<sp/>--itr)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base[itr]<sp/>=<sp/>m_base[itr<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>m_base[idx]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="915" refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" refkind="member"><highlight class="normal">Type*<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Data</ref>()<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base.get();</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="920" refid="class_azura_1_1_containers_1_1_vector_1a512f49e419efb7f312d0a08ddfc675b7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type*<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base.get();</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="925" refid="class_azura_1_1_containers_1_1_vector_1a9a0fe84cbf357050432a0f851f8a8daa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="930" refid="class_azura_1_1_containers_1_1_vector_1acf0e0039895ef1262e9060406863351e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">Type&amp;<sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&lt;<sp/>m_size);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[idx];</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">Type&amp;<sp/>Vector&lt;Type&gt;::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&lt;<sp/>m_size);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[idx];</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="947"><highlight class="normal">Type&amp;<sp/>Vector&lt;Type&gt;::Last()<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[m_size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">Type&amp;<sp/>Vector&lt;Type&gt;::Last()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[m_size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector&lt;Type&gt;::Assign(InputIt<sp/>first,<sp/>InputIt<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>U32<sp/>count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itr<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>first;<sp/>itr<sp/>!=<sp/>last;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>operator[](count)<sp/>=<sp/>*itr;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="967" refid="class_azura_1_1_containers_1_1_vector_1a49e7eba07315528d8f75998944b0e7c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Vector&lt;Type&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::Begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iterator(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="972" refid="class_azura_1_1_containers_1_1_vector_1aaf8c1fcfb814e8030e5520b56c094c6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Vector&lt;Type&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::End</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Iterator(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_size);</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="977" refid="class_azura_1_1_containers_1_1_vector_1a324d28755f053b4a83c89982eebeee93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Vector&lt;Type&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Begin();</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="982" refid="class_azura_1_1_containers_1_1_vector_1a364c485414869aa9d6de832f2af0f46f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector_1_1_iterator" kindref="compound">Vector&lt;Type&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Type&gt;::end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>End();</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Containers/Inc/Containers/Vector.h"/>
  </compounddef>
</doxygen>
