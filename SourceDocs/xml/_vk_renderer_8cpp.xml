<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vk_renderer_8cpp" kind="file" language="C++">
    <compoundname>VkRenderer.cpp</compoundname>
    <includes refid="_vk_renderer_8h" local="yes">Vulkan/VkRenderer.h</includes>
    <includes refid="_window_8h" local="yes">Generic/Window.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <includes refid="_vk_shader_8h" local="yes">Vulkan/VkShader.h</includes>
    <includes refid="_vk_type_mapping_8h" local="yes">Vulkan/VkTypeMapping.h</includes>
    <includes refid="_vk_macros_8h" local="yes">Vulkan/VkMacros.h</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="3258">
        <label>Vulkan/VkScopedSwapChain.h</label>
        <link refid="_vk_scoped_swap_chain_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3248" relation="include">
        </childnode>
      </node>
      <node id="3221">
        <label>functional</label>
      </node>
      <node id="3231">
        <label>Constants.h</label>
        <link refid="_constants_8h_source"/>
        <childnode refid="3232" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3230">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="3231" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3233" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3235" relation="include">
        </childnode>
        <childnode refid="3243" relation="include">
        </childnode>
      </node>
      <node id="3222">
        <label>iterator</label>
      </node>
      <node id="3274">
        <label>VkDebug.h</label>
        <link refid="_vk_debug_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
      </node>
      <node id="3227">
        <label>cstdint</label>
      </node>
      <node id="3215">
        <label>Source/Azura/RenderSystem/Src/Vulkan/VkRenderer.cpp</label>
        <link refid="_vk_renderer_8cpp"/>
        <childnode refid="3216" relation="include">
        </childnode>
        <childnode refid="3266" relation="include">
        </childnode>
        <childnode refid="3268" relation="include">
        </childnode>
        <childnode refid="3253" relation="include">
        </childnode>
        <childnode refid="3229" relation="include">
        </childnode>
        <childnode refid="3260" relation="include">
        </childnode>
        <childnode refid="3270" relation="include">
        </childnode>
        <childnode refid="3272" relation="include">
        </childnode>
        <childnode refid="3275" relation="include">
        </childnode>
      </node>
      <node id="3255">
        <label>Vulkan/VkScopedBuffer.h</label>
        <link refid="_vk_scoped_buffer_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3260">
        <label>VkShader.h</label>
        <link refid="_vk_shader_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3257" relation="include">
        </childnode>
        <childnode refid="3261" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3219">
        <label>cassert</label>
      </node>
      <node id="3269">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="3219" relation="include">
        </childnode>
        <childnode refid="3252" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3229" relation="include">
        </childnode>
      </node>
      <node id="3238">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="3273">
        <label>stdexcept</label>
      </node>
      <node id="3216">
        <label>Vulkan/VkRenderer.h</label>
        <link refid="_vk_renderer_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3230" relation="include">
        </childnode>
        <childnode refid="3244" relation="include">
        </childnode>
        <childnode refid="3254" relation="include">
        </childnode>
        <childnode refid="3255" relation="include">
        </childnode>
        <childnode refid="3256" relation="include">
        </childnode>
        <childnode refid="3260" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
        <childnode refid="3262" relation="include">
        </childnode>
        <childnode refid="3264" relation="include">
        </childnode>
        <childnode refid="3258" relation="include">
        </childnode>
        <childnode refid="3259" relation="include">
        </childnode>
        <childnode refid="3265" relation="include">
        </childnode>
      </node>
      <node id="3245">
        <label>VkTypes.h</label>
        <link refid="_vk_types_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3246" relation="include">
        </childnode>
        <childnode refid="3247" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3248" relation="include">
        </childnode>
      </node>
      <node id="3228">
        <label>string</label>
      </node>
      <node id="3257">
        <label>map</label>
      </node>
      <node id="3261">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="3234" relation="include">
        </childnode>
      </node>
      <node id="3244">
        <label>VkCore.h</label>
        <link refid="_vk_core_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3230" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3245" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3264">
        <label>Vulkan/VkTextureManager.h</label>
        <link refid="_vk_texture_manager_8h_source"/>
        <childnode refid="3250" relation="include">
        </childnode>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3230" relation="include">
        </childnode>
      </node>
      <node id="3275">
        <label>fstream</label>
      </node>
      <node id="3267">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="3233">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3235" relation="include">
        </childnode>
      </node>
      <node id="3259">
        <label>Vulkan/VkScopedRenderPass.h</label>
        <link refid="_vk_scoped_render_pass_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3248" relation="include">
        </childnode>
        <childnode refid="3260" relation="include">
        </childnode>
      </node>
      <node id="3242">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="3241">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="3239">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="3250">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3251" relation="include">
        </childnode>
        <childnode refid="3253" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3270">
        <label>Vulkan/VkTypeMapping.h</label>
        <link refid="_vk_type_mapping_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3271" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3235" relation="include">
        </childnode>
      </node>
      <node id="3262">
        <label>Vulkan/VkDrawablePool.h</label>
        <link refid="_vk_drawable_pool_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3233" relation="include">
        </childnode>
        <childnode refid="3255" relation="include">
        </childnode>
        <childnode refid="3256" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
        <childnode refid="3248" relation="include">
        </childnode>
        <childnode refid="3263" relation="include">
        </childnode>
        <childnode refid="3259" relation="include">
        </childnode>
      </node>
      <node id="3224">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="3221" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3229" relation="include">
        </childnode>
      </node>
      <node id="3218">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="3219" relation="include">
        </childnode>
        <childnode refid="3220" relation="include">
        </childnode>
        <childnode refid="3221" relation="include">
        </childnode>
        <childnode refid="3222" relation="include">
        </childnode>
        <childnode refid="3223" relation="include">
        </childnode>
        <childnode refid="3224" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3229" relation="include">
        </childnode>
      </node>
      <node id="3229">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="3232">
        <label>tuple</label>
      </node>
      <node id="3243">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3271">
        <label>optional</label>
      </node>
      <node id="3234">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3231" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3235" relation="include">
        </childnode>
        <childnode refid="3240" relation="include">
        </childnode>
        <childnode refid="3241" relation="include">
        </childnode>
        <childnode refid="3242" relation="include">
        </childnode>
        <childnode refid="3239" relation="include">
        </childnode>
      </node>
      <node id="3247">
        <label>vector</label>
      </node>
      <node id="3254">
        <label>Vulkan/VkPlatform.h</label>
        <link refid="_vk_platform_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3266">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="3221" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3230" relation="include">
        </childnode>
        <childnode refid="3267" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3223">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="3219" relation="include">
        </childnode>
        <childnode refid="3220" relation="include">
        </childnode>
        <childnode refid="3224" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3246">
        <label>array</label>
      </node>
      <node id="3249">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3247" relation="include">
        </childnode>
      </node>
      <node id="3268">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="3269" relation="include">
        </childnode>
        <childnode refid="3251" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3272">
        <label>Vulkan/VkMacros.h</label>
        <link refid="_vk_macros_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3273" relation="include">
        </childnode>
        <childnode refid="3274" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3251">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="3252" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3235">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3232" relation="include">
        </childnode>
        <childnode refid="3236" relation="include">
        </childnode>
        <childnode refid="3237" relation="include">
        </childnode>
        <childnode refid="3238" relation="include">
        </childnode>
        <childnode refid="3239" relation="include">
        </childnode>
      </node>
      <node id="3217">
        <label>vulkan/vulkan_core.h</label>
      </node>
      <node id="3226">
        <label>cstddef</label>
      </node>
      <node id="3236">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="3253">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="3224" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3256">
        <label>Vulkan/VkScopedPipeline.h</label>
        <link refid="_vk_scoped_pipeline_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3257" relation="include">
        </childnode>
        <childnode refid="3218" relation="include">
        </childnode>
        <childnode refid="3234" relation="include">
        </childnode>
        <childnode refid="3258" relation="include">
        </childnode>
        <childnode refid="3259" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3240">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3225">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="3226" relation="include">
        </childnode>
        <childnode refid="3227" relation="include">
        </childnode>
        <childnode refid="3228" relation="include">
        </childnode>
      </node>
      <node id="3265">
        <label>Vulkan/VkComputePool.h</label>
        <link refid="_vk_compute_pool_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3233" relation="include">
        </childnode>
        <childnode refid="3243" relation="include">
        </childnode>
      </node>
      <node id="3248">
        <label>VkScopedImage.h</label>
        <link refid="_vk_scoped_image_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3225" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
        <childnode refid="3250" relation="include">
        </childnode>
      </node>
      <node id="3252">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="3225" relation="include">
        </childnode>
      </node>
      <node id="3220">
        <label>cstring</label>
      </node>
      <node id="3263">
        <label>VkScopedSampler.h</label>
        <link refid="_vk_scoped_sampler_8h_source"/>
        <childnode refid="3217" relation="include">
        </childnode>
        <childnode refid="3249" relation="include">
        </childnode>
      </node>
      <node id="3237">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_vulkan">Azura::Vulkan</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Window.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkShader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkTypeMapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Vulkan/VkMacros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>-<sp/>Freedom<sp/>to<sp/>use<sp/>using<sp/>namespace<sp/>in<sp/>CPP<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Vulkan<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">VkRenderer::VkRenderer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationInfo&amp;<sp/>appInfo,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DeviceRequirements&amp;<sp/>deviceRequirements,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationRequirements&amp;<sp/>appRequirements,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainRequirements&amp;<sp/>swapChainRequirement,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderPassRequirements&amp;<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorRequirements&amp;<sp/>descriptorRequirements,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderRequirements&amp;<sp/>shaderRequirements,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>drawAllocator,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window&amp;<sp/>window)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>:<sp/>Renderer(appInfo,<sp/>deviceRequirements,<sp/>appRequirements,<sp/>swapChainRequirement,<sp/>descriptorRequirements,<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drawAllocator,<sp/>window),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>log_VulkanRenderSystem(Log(</highlight><highlight class="stringliteral">&quot;VulkanRenderSystem&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>m_perFrameBuffer(4096),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_perFrameAllocator(m_perFrameBuffer,<sp/>4096),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawablePools(renderPassRequirements.m_maxPools,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>m_computePools(renderPassRequirements.m_maxPools,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapChain(mainAllocator,<sp/>log_VulkanRenderSystem),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPasses(renderPassRequirements.m_passSequence.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorSetLayouts(mainAllocator),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>m_imageAvailableSemaphores(mainAllocator),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderFinishedSemaphores(mainAllocator),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m_inFlightFences(mainAllocator),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaders(shaderRequirements.m_shaders.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPassAttachmentImages(renderPassRequirements.m_targets.GetSize(),<sp/>mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>16384);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;const char*&gt;</ref><sp/>extensions(4,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>VkPlatform::GetInstanceExtensions(extensions);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_instance<sp/>=<sp/>VkCore::CreateInstance(GetApplicationInfo(),<sp/>extensions,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_callback<sp/>=<sp/>VkCore::SetupDebug(m_instance,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>m_surface<sp/>=<sp/>VkPlatform::CreateSurface(m_window.get().GetHandle(),<sp/>m_instance,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>m_physicalDevice<sp/>=<sp/>VkCore::SelectPhysicalDevice(m_instance,<sp/>m_surface,<sp/>GetDeviceRequirements(),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>m_queueIndices<sp/>=<sp/>VkCore::FindQueueFamiliesInDevice(m_physicalDevice,<sp/>m_surface,<sp/>GetDeviceRequirements(),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>m_device<sp/>=<sp/>VkCore::CreateLogicalDevice(m_physicalDevice,<sp/>m_queueIndices,<sp/>GetDeviceRequirements(),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>vkGetPhysicalDeviceProperties(m_physicalDevice,<sp/>&amp;m_physicalDeviceProperties);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shaderCreateInfo<sp/>:<sp/>shaderRequirements.m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderer::AddShader(shaderCreateInfo);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>m_graphicsQueue<sp/>=<sp/>VkCore::GetQueueFromDevice(m_device,<sp/>m_queueIndices.m_graphicsFamily);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_presentQueue<sp/><sp/>=<sp/>VkCore::GetQueueFromDevice(m_device,<sp/>m_queueIndices.m_presentFamily);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainDeviceSupport<sp/>swapChainDeviceSupport<sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::QuerySwapChainSupport(m_physicalDevice,<sp/>m_surface,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queueIndices.m_isTransferQueueRequired)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m_transferQueue<sp/>=<sp/>VkCore::GetQueueFromDevice(m_device,<sp/>m_queueIndices.m_transferFamily);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>m_graphicsCommandPool<sp/>=<sp/>VkCore::CreateCommandPool(m_device,<sp/>m_queueIndices.m_graphicsFamily,<sp/>0,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queueIndices.m_isTransferQueueRequired)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_transferCommandPool<sp/>=</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VkCore::CreateCommandPool(m_device,<sp/>m_queueIndices.m_transferFamily,<sp/>VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>VkPhysicalDeviceMemoryProperties<sp/>memProperties;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(m_physicalDevice,<sp/>&amp;memProperties);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>m_swapChain.Create(m_device,<sp/>m_physicalDevice,<sp/>m_graphicsQueue,<sp/>m_graphicsCommandPool,<sp/>m_surface,<sp/>m_queueIndices,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapChainDeviceSupport,<sp/>swapChainRequirement,<sp/>memProperties);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bufferCreateInfo<sp/>:<sp/>renderPassRequirements.m_targets)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureDesc<sp/>desc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_format<sp/><sp/><sp/><sp/>=<sp/>bufferCreateInfo.m_format;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_bounds<sp/><sp/><sp/><sp/>=<sp/>Bounds3D{m_swapChain.GetExtent().width,<sp/>m_swapChain.GetExtent().height,<sp/>1};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageUsageFlags<sp/>usageFlags<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT<sp/>|<sp/>VK_IMAGE_USAGE_SAMPLED_BIT;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthComponent(bufferCreateInfo.m_format)<sp/>||<sp/>HasStencilComponent(bufferCreateInfo.m_format))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usageFlags<sp/>=<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT<sp/>|<sp/>VK_IMAGE_USAGE_SAMPLED_BIT;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Attachment<sp/>Input<sp/>at:<sp/>%d<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>m_renderPassAttachmentImages.</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetSize(),<sp/>ToString(bufferCreateInfo.m_format).c_str());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPassAttachmentImages.PushBack(VkScopedImage(m_device,<sp/>desc,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usageFlags,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memProperties,<sp/>log_VulkanRenderSystem));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPassAttachmentImages.Last().CreateImageView(ImageViewType::ImageView2D);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>U32<sp/>passCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>passCreateInfo<sp/>:<sp/>renderPassRequirements.m_passSequence)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>VkScopedRenderPass<sp/>renderPass<sp/>=<sp/>VkScopedRenderPass(m_renderPasses.GetSize(),<sp/>mainAllocator,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCount<sp/>!=<sp/>(renderPassRequirements.m_passSequence.GetSize()<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.Create(m_device,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_graphicsCommandPool,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passCreateInfo,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRequirements.m_targets,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPassAttachmentImages,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapChain);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.CreateForSwapChain(m_device,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_graphicsCommandPool,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passCreateInfo,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapChain);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPasses.PushBack(renderPass);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>++passCount;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>CreateDescriptorInfo();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>syncCount<sp/>=<sp/>swapChainRequirement.m_framesInFlight;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>m_imageAvailableSemaphores.Resize(syncCount);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>m_renderFinishedSemaphores.Resize(syncCount);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>m_inFlightFences.Resize(syncCount);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>VkCore::CreateSemaphores(m_device,<sp/>syncCount,<sp/>m_imageAvailableSemaphores,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>VkCore::CreateSemaphores(m_device,<sp/>syncCount,<sp/>m_renderFinishedSemaphores,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>VkCore::CreateFences(m_device,<sp/>syncCount,<sp/>VK_FENCE_CREATE_SIGNALED_BIT,<sp/>m_inFlightFences,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">VkRenderer::~VkRenderer()<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>vkDeviceWaitIdle(m_device);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>VkCore::DestroyDebugReportCallbackEXT(m_instance,<sp/>m_callback,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>semaphore<sp/>:<sp/>m_imageAvailableSemaphores)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(m_device,<sp/>semaphore,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>semaphore<sp/>:<sp/>m_renderFinishedSemaphores)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(m_device,<sp/>semaphore,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fences<sp/>:<sp/>m_inFlightFences)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyFence(m_device,<sp/>fences,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pool<sp/>:<sp/>m_drawablePools)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.CleanUp();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shader<sp/>:<sp/>m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>shader.CleanUp(m_device);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>setLayout<sp/>:<sp/>m_descriptorSetLayouts)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorSetLayout(m_device,<sp/>setLayout,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>vkDestroyPipelineLayout(m_device,<sp/>m_pipelineLayout,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>vkDestroyDescriptorPool(m_device,<sp/>m_descriptorPool,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>m_swapChain.CleanUp(m_device);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attachments<sp/>:<sp/>m_renderPassAttachmentImages)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>attachments.CleanUp();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>:<sp/>m_renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPass.CleanUp(m_device,<sp/>m_graphicsCommandPool);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>vkDestroyCommandPool(m_device,<sp/>m_graphicsCommandPool,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_queueIndices.m_isTransferQueueRequired)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyCommandPool(m_device,<sp/>m_transferCommandPool,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>vkDestroySurfaceKHR(m_instance,<sp/>m_surface,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>vkDestroyDevice(m_device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Queues<sp/>are<sp/>also<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>vkDestroyInstance(m_instance,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>m_device<sp/>also<sp/>Deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">DrawablePool&amp;<sp/>VkRenderer::CreateDrawablePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>2048);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>VkPhysicalDeviceMemoryProperties<sp/>memProperties;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(m_physicalDevice,<sp/>&amp;memProperties);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>This<sp/>isn&apos;t<sp/>as<sp/>performance<sp/>optimized<sp/>as<sp/>it<sp/>should<sp/>be.<sp/>We<sp/>can<sp/>probably<sp/>find<sp/>a<sp/>way<sp/>to<sp/>insert<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer<sp/>inside<sp/>each<sp/>pool?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>using<sp/>default<sp/>Viewport.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>VkDrawablePool<sp/>pool<sp/>=<sp/>VkDrawablePool(createInfo,<sp/>m_device,<sp/>m_graphicsQueue,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_BUFFER_USAGE_INDEX_BUFFER_BIT<sp/>|<sp/>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT<sp/>|</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_graphicsCommandPool,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pipelineLayout,<sp/>m_descriptorPool,<sp/>m_descriptorSetLayouts,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPasses,<sp/>m_renderPassAttachmentImages,<sp/>m_shaders,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetApplicationRequirements(),<sp/>m_window.get().GetViewport(),<sp/>memProperties,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_physicalDeviceProperties,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapChain,<sp/>m_descriptorSlots,<sp/>m_descriptorCount,<sp/>m_drawPoolAllocator,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mainAllocator,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>m_drawablePools.PushBack(std::move(pool));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_drawablePools.Last();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">ComputePool&amp;<sp/>VkRenderer::CreateComputePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>VkComputePool<sp/>pool<sp/>=<sp/>VkComputePool(createInfo,<sp/>m_descriptorCount,<sp/>m_mainAllocator);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>m_computePools.PushBack(std::move(pool));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_computePools.Last();</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">VkDevice<sp/>VkRenderer::GetDevice()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_device;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">String<sp/>VkRenderer::GetRenderingAPI()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Vulkan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::Submit()<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>4096);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vector&lt;VkCommandBuffer&gt;</ref>&gt;<sp/>secondaryCmdBuffers(m_renderPasses.GetSize(),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkCommandBuffer&gt;</ref><sp/>poolCmdBuffers(m_drawablePools.GetSize(),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>secondaryCmdBuffers.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(poolCmdBuffers);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawablePool<sp/>:<sp/>m_drawablePools)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>drawablePool.Submit();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawablePool<sp/>:<sp/>m_drawablePools)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;std::pair&lt;U32, VkCommandBuffer&gt;</ref>&gt;<sp/>drawableBuffer(allocatorTemporary);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>drawablePool.GetCommandBuffers(drawableBuffer);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bufferPair<sp/>:<sp/>drawableBuffer)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>secondaryCmdBuffers[bufferPair.first].PushBack(bufferPair.second);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>call<sp/>last<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize()<sp/>-<sp/>1;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>=<sp/>m_renderPasses[idx];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPass.Begin(m_swapChain);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cmdBuffers<sp/>=<sp/>secondaryCmdBuffers[renderPass.GetId()];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdExecuteCommands(renderPass.GetCommandBuffer(0),<sp/>cmdBuffers.GetSize(),<sp/>cmdBuffers.Data());</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPass.End();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lastPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_renderPasses.Last();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>lastPassCommands<sp/>=<sp/>secondaryCmdBuffers.Last();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>lastPass.Begin(m_swapChain);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>lastPass.GetFrameBufferCount();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdExecuteCommands(lastPass.GetCommandBuffer(idx),<sp/>lastPassCommands.GetSize(),<sp/>lastPassCommands.Data());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>lastPass.End();</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::CreateDescriptorInfo()<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>4096);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>bindingSetSizes{m_descriptorSlots.GetSize(),<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastSet<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>slot<sp/>:<sp/>m_descriptorSlots)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSet<sp/>==<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(slot.m_setIdx))<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindingSetSizes.Last()<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>lastSet<sp/>=<sp/>int(slot.m_setIdx);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>bindingSetSizes.PushBack(1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>m_descriptorSetLayouts.Reserve(bindingSetSizes.GetSize()<sp/>+<sp/>m_renderPasses.GetSize());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bindingSize<sp/>:<sp/>bindingSetSizes)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkDescriptorSetLayoutBinding&gt;</ref><sp/>currentBindings(bindingSize,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>offset;<sp/>idx<sp/>&lt;<sp/>offset<sp/>+<sp/>bindingSize;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>slot<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_descriptorSlots[idx];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>combinedShaderFlagBits<sp/>=<sp/>GetCombinedShaderStageFlag(slot.m_stages);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bindingId<sp/>=<sp/>U32(idx<sp/>-<sp/>offset);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(slot.m_type)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::UniformBuffer:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCore::CreateUniformBufferBinding(currentBindings,<sp/>bindingId,<sp/>1,<sp/>combinedShaderFlagBits);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::Sampler:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCore::CreateSamplerBinding(currentBindings,<sp/>bindingId,<sp/>1,<sp/>combinedShaderFlagBits);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::SampledImage:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkCore::CreateSampledImageBinding(currentBindings,<sp/>bindingId,<sp/>1,<sp/>combinedShaderFlagBits);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::PushConstant:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::CombinedImageSampler:</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_ERR(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Descriptor<sp/>Type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorSetLayouts.</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PushBack(VkCore::CreateDescriptorSetLayout(m_device,<sp/>currentBindings,<sp/>log_VulkanRenderSystem));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>+=<sp/>bindingSize;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>:<sp/>m_renderPasses)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>setLayout<sp/>=<sp/>renderPass.GetDescriptorSetLayout();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setLayout<sp/>!=<sp/>VK_NULL_HANDLE)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.SetDescriptorSetId(m_descriptorSetLayouts.GetSize());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSetLayouts.PushBack(setLayout);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>m_pipelineLayout<sp/>=<sp/>VkCore::CreatePipelineLayout(m_device,<sp/>m_descriptorSetLayouts,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkDescriptorPoolSize&gt;</ref><sp/>descriptorPoolSizes(MAX_DESCRIPTOR_TYPE_COUNT,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[DESCRIPTOR]:<sp/>How<sp/>to<sp/>use<sp/>Uniform<sp/>Buffer<sp/>Arrays?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>VkDescriptorPoolSize<sp/>uniformPoolSize<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>uniformPoolSize.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>uniformPoolSize.descriptorCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_descriptorCount.m_numUniformSlots;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>descriptorPoolSizes.PushBack(uniformPoolSize);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_descriptorCount.m_numSamplerSlots<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolSize<sp/>samplerPoolSize<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerPoolSize.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_DESCRIPTOR_TYPE_SAMPLER;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>samplerPoolSize.descriptorCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_descriptorCount.m_numSamplerSlots;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorPoolSizes.PushBack(samplerPoolSize);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_descriptorCount.m_numSampledImageSlots<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPoolSize<sp/>sampledImagePoolSize<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>sampledImagePoolSize.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>sampledImagePoolSize.descriptorCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_descriptorCount.m_numSampledImageSlots;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorPoolSizes.PushBack(sampledImagePoolSize);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[DESCRIPTOR]:<sp/>1<sp/>Set<sp/>per<sp/>Drawable?<sp/>Need<sp/>to<sp/>Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>VkDescriptorPoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>poolInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>poolInfo.poolSizeCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorPoolSizes.GetSize();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>poolInfo.pPoolSizes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorPoolSizes.Data();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[DESCRIPTORS]:<sp/>Max<sp/>Sets<sp/>issue!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>poolInfo.maxSets<sp/>=<sp/>m_drawablePools.GetMaxSize()<sp/>*<sp/>m_descriptorSetLayouts.GetSize();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkCreateDescriptorPool(m_device,<sp/>&amp;poolInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;m_descriptorPool),</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>Descriptor<sp/>Pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::RenderFrame()<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EnterRenderFrame();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>currentFrame<sp/>=<sp/>GetCurrentFrame();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>vkWaitForFences(m_device,<sp/>1,<sp/>&amp;m_inFlightFences[currentFrame],<sp/>VK_TRUE,<sp/>std::numeric_limits&lt;uint64_t&gt;::max());</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>vkResetFences(m_device,<sp/>1,<sp/>&amp;m_inFlightFences[currentFrame]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>U32<sp/>imageIndex;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkResult<sp/>result<sp/>=<sp/>vkAcquireNextImageKHR(m_device,<sp/>m_swapChain.Real(),<sp/>std::numeric_limits&lt;uint64_t&gt;::max(),</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_imageAvailableSemaphores[currentFrame],<sp/>VK_NULL_HANDLE,<sp/>&amp;imageIndex);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[RESIZE]:<sp/>Recreate<sp/>Swapchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RecreateSwapChain();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_VulkanRenderSystem,<sp/>result<sp/>==<sp/>VK_SUCCESS<sp/>||<sp/>result<sp/>==<sp/>VK_SUBOPTIMAL_KHR,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>acquire<sp/>swap<sp/>chain<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::array&lt;VkSemaphore,<sp/>1&gt;<sp/>initialWaitSemaphores<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::array&lt;VkSemaphore,<sp/>1&gt;<sp/>finalSignalSemaphores<sp/>=<sp/>{m_renderFinishedSemaphores[currentFrame]};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::array&lt;VkPipelineStageFlags,<sp/>1&gt;<sp/>waitStages<sp/>=<sp/>{VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>=<sp/>m_renderPasses[idx];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>passBuffer;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence<sp/>waitFence<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkSemaphore&gt;</ref><sp/>waitSemaphores(2,<sp/>m_perFrameAllocator);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkPipelineStageFlags&gt;</ref><sp/>waitStages(2,<sp/>m_perFrameAllocator);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkSemaphore&gt;</ref><sp/>signalSemaphores(2,<sp/>m_perFrameAllocator);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>of<sp/>Render</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waitSemaphores.PushBack(m_imageAvailableSemaphores[currentFrame]);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waitStages.PushBack(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>!=<sp/>m_renderPasses.GetSize()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nextPass<sp/>=<sp/>m_renderPasses[idx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signalSemaphores.PushBack(nextPass.GetRenderSemaphore());</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Somewhere<sp/>in<sp/>Middle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>m_renderPasses.GetSize()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nextPass<sp/>=<sp/>m_renderPasses[idx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waitSemaphores.PushBack(renderPass.GetRenderSemaphore());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waitStages.PushBack(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signalSemaphores.PushBack(nextPass.GetRenderSemaphore());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>passBuffer<sp/>=<sp/>renderPass.GetCommandBuffer(0);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>Render</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>==<sp/>m_renderPasses.GetSize()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitSemaphores.PushBack(renderPass.GetRenderSemaphore());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitStages.PushBack(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signalSemaphores.PushBack(m_renderFinishedSemaphores[currentFrame]);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passBuffer<sp/>=<sp/>renderPass.GetCommandBuffer(imageIndex);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>waitFence<sp/><sp/>=<sp/>m_inFlightFences[currentFrame];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SUCCESS<sp/>OR<sp/>SUBOPTIMAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSubmitInfo<sp/>submitInfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.waitSemaphoreCount<sp/><sp/><sp/>=<sp/>waitSemaphores.GetSize();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pWaitSemaphores<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>waitSemaphores.Data();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pWaitDstStageMask<sp/><sp/><sp/><sp/>=<sp/>waitStages.Data();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.commandBufferCount<sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pCommandBuffers<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;passBuffer;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.signalSemaphoreCount<sp/>=<sp/>signalSemaphores.GetSize();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>submitInfo.pSignalSemaphores<sp/><sp/><sp/><sp/>=<sp/>signalSemaphores.Data();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkQueueSubmit(m_graphicsQueue,<sp/>1,<sp/>&amp;submitInfo,<sp/>waitFence),</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>submit<sp/>draw<sp/>command<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;VkSemaphore&gt;</ref><sp/>presentWaitSemaphores({m_renderFinishedSemaphores[currentFrame]},<sp/>m_perFrameAllocator);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>VkPresentInfoKHR<sp/>presentInfo<sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>presentInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>presentInfo.waitSemaphoreCount<sp/>=<sp/>presentWaitSemaphores.GetSize();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>presentInfo.pWaitSemaphores<sp/><sp/><sp/><sp/>=<sp/>presentWaitSemaphores.<ref refid="class_azura_1_1_containers_1_1_vector_1a6e3fd44d2821bb97f170b6e5443ec57e" kindref="member">Data</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>std::array&lt;VkSwapchainKHR,<sp/>1&gt;<sp/>swapChains<sp/>=<sp/>{m_swapChain.Real()};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>presentInfo.swapchainCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>U32(swapChains.size());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>presentInfo.pSwapchains<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>swapChains.data();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>presentInfo.pImageIndices<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;imageIndex;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>presentInfo.pResults<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>vkQueuePresentKHR(m_presentQueue,<sp/>&amp;presentInfo);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>m_perFrameAllocator.<ref refid="class_azura_1_1_memory_1_1_monotonic_allocator_1a5c31a835742876a7e041b6f46df17aa1" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>ExitRenderFrame();</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::SnapshotFrame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>exportPath)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh):[TEXTURE]:<sp/>VkScopedImage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>VkDeviceMemory<sp/>dstMemory;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[SNAPSHOT]:<sp/>Use<sp/>same<sp/>format<sp/>as<sp/>Swap<sp/>Chain<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawStorageFormat<sp/>storageFormat<sp/>=<sp/>GetSwapchainRequirements().m_format;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>supportsBlit<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>storageFormat]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vkFormat<sp/>=<sp/>ToVkFormat(storageFormat);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_VulkanRenderSystem,<sp/>vkFormat,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Vk<sp/>Format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormatProperties<sp/>formatProps;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(m_physicalDevice,<sp/>m_swapChain.GetSurfaceFormat(),<sp/>&amp;formatProps);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((formatProps.optimalTilingFeatures<sp/>&amp;<sp/>VK_FORMAT_FEATURE_BLIT_SRC_BIT)<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG_WRN(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Swapchain<sp/>Format<sp/>doesn&apos;t<sp/>support<sp/>Blit,<sp/>Will<sp/>use<sp/>Image<sp/>Copy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(m_physicalDevice,<sp/>vkFormat.value(),<sp/>&amp;formatProps);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((formatProps.linearTilingFeatures<sp/>&amp;<sp/>VK_FORMAT_FEATURE_BLIT_DST_BIT)<sp/>==<sp/>0u)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LOG_WRN(log_VulkanRenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Destination<sp/>Image<sp/>Format<sp/>doesn&apos;t<sp/>support<sp/>linear<sp/>blit,<sp/>Will<sp/>use<sp/>Image<sp/>Copy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>currentFrame<sp/>=<sp/>GetCurrentFrame();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh):[TEXTURE]:<sp/>VkScopedImage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh):[LINT]:<sp/>Remove<sp/>Lint<sp/>overrides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkScopedImage&amp;<sp/>srcImage<sp/>=<sp/>m_swapChain.GetImage(currentFrame);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>swapChainExtent<sp/>=<sp/>m_swapChain.GetExtent();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkImage<sp/>dstImage<sp/><sp/><sp/><sp/><sp/>=<sp/>VkCore::CreateImage(m_device,<sp/>storageFormat,<sp/>ImageType::Image2D,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bounds2D{swapChainExtent.width,<sp/>swapChainExtent.height},<sp/>1,<sp/>1,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_TILING_LINEAR,<sp/>VK_IMAGE_USAGE_TRANSFER_DST_BIT,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>VkMemoryRequirements<sp/>memRequirements;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>vkGetImageMemoryRequirements(m_device,<sp/>dstImage,<sp/>&amp;memRequirements);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>VkPhysicalDeviceMemoryProperties<sp/>memProperties;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(m_physicalDevice,<sp/>&amp;memProperties);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>VkMemoryAllocateInfo<sp/>allocInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>allocInfo.sType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>allocInfo.allocationSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>memRequirements.size;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>allocInfo.memoryTypeIndex<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VkCore::FindMemoryType(memRequirements.memoryTypeBits,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,<sp/>memProperties);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkAllocateMemory(m_device,<sp/>&amp;allocInfo,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;dstMemory),</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Snapshot:<sp/>Unable<sp/>to<sp/>allocate<sp/>Texture<sp/>Memory<sp/>for<sp/>snapshot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>VERIFY_VK_OP(log_VulkanRenderSystem,<sp/>vkBindImageMemory(m_device,<sp/>dstImage,<sp/>dstMemory,<sp/>0),</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Snapshot:<sp/>Failed<sp/>to<sp/>bind<sp/>Image<sp/>and<sp/>Image<sp/>Memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>VkCommandBuffer<sp/>snapshotCmdBuffer<sp/>=<sp/>VkCore::CreateCommandBuffer(m_device,<sp/>m_graphicsCommandPool,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>VkCore::BeginCommandBuffer(snapshotCmdBuffer,<sp/>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>VkCore::TransitionImageLayout(</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snapshotCmdBuffer,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstImage,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_TRANSFER_WRITE_BIT,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_UNDEFINED,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageSubresourceRange{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1});</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Transition<sp/>swapchain<sp/>image<sp/>from<sp/>present<sp/>to<sp/>transfer<sp/>source<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>VkCore::TransitionImageLayout(</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snapshotCmdBuffer,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcImage.Real(),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_MEMORY_READ_BIT,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_TRANSFER_READ_BIT,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageSubresourceRange{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(supportsBlit)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::ImageBlit(snapshotCmdBuffer,<sp/>srcImage.Real(),<sp/>dstImage,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bounds3D{swapChainExtent.width,<sp/>swapChainExtent.height,<sp/>1});</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCore::ImageCopy(snapshotCmdBuffer,<sp/>srcImage.Real(),<sp/>dstImage,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{swapChainExtent.width,<sp/>swapChainExtent.height,<sp/>1});</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>VkCore::TransitionImageLayout(</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snapshotCmdBuffer,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dstImage,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_TRANSFER_WRITE_BIT,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_MEMORY_READ_BIT,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_GENERAL,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageSubresourceRange{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Transition<sp/>source<sp/>image<sp/>back<sp/>to<sp/>its<sp/>original<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>VkCore::TransitionImageLayout(</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snapshotCmdBuffer,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcImage.Real(),</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_TRANSFER_READ_BIT,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_MEMORY_READ_BIT,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageSubresourceRange{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>VkCore::FlushCommandBuffer(m_device,<sp/>snapshotCmdBuffer,<sp/>m_graphicsQueue,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>vkFreeCommandBuffers(m_device,<sp/>m_graphicsCommandPool,<sp/>1,<sp/>&amp;snapshotCmdBuffer);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>layout<sp/>of<sp/>the<sp/>image<sp/>(including<sp/>row<sp/>pitch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>VkImageSubresource<sp/>subResource{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>VkSubresourceLayout<sp/>subResourceLayout;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>vkGetImageSubresourceLayout(m_device,<sp/>dstImage,<sp/>&amp;subResource,<sp/>&amp;subResourceLayout);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>vkMapMemory(m_device,<sp/>dstMemory,<sp/>0,<sp/>VK_WHOLE_SIZE,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;data);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>data<sp/>+=<sp/>subResourceLayout.offset;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>imageSize<sp/>=<sp/>swapChainExtent.width<sp/>*<sp/>swapChainExtent.height<sp/>*<sp/>(GetFormatSize(storageFormat));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>std::vector&lt;char&gt;<sp/>imageData(imageSize);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>memcpy(imageData.data(),<sp/>data,<sp/>imageSize);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>file(exportPath,<sp/>std::ios::out<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>file.write(&amp;imageData[0],<sp/>imageData.size());</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>vkUnmapMemory(m_device,<sp/>dstMemory);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>vkFreeMemory(m_device,<sp/>dstMemory,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>vkDestroyImage(m_device,<sp/>dstImage,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>LOG_INF(log_VulkanRenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Snapshot<sp/>Saved:<sp/>Size:<sp/>%d<sp/>x<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>swapChainExtent.width,<sp/>swapChainExtent.</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>height);</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::BindRenderTarget(U32<sp/>renderTargetId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc&amp;<sp/>desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>UNUSED(renderTargetId);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>UNUSED(desc);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>UNUSED(buffer);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::BindBufferTarget(U32<sp/>bufferTargetId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>UNUSED(bufferTargetId);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>UNUSED(buffer);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VkRenderer::AddShader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[ASSETS]:<sp/>Manage<sp/>assets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>fullPath<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Shaders/&quot;</highlight><highlight class="normal"><sp/>+<sp/>VkRenderer::GetRenderingAPI()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>info.m_shaderFileName;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>m_shaders.EmplaceBack(m_device,<sp/>fullPath,<sp/>log_VulkanRenderSystem);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>m_shaders.Last().SetStage(info.m_stage);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Vulkan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Vulkan/VkRenderer.cpp"/>
  </compounddef>
</doxygen>
