<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_stack_memory_buffer_8h" kind="file" language="C++">
    <compoundname>StackMemoryBuffer.h</compoundname>
    <includes local="no">cassert</includes>
    <includes refid="_memory_buffer_8h" local="yes">MemoryBuffer.h</includes>
    <includes refid="_types_8h" local="yes">Types.h</includes>
    <includes refid="_macros_8h" local="yes">Utils/Macros.h</includes>
    <includedby refid="_vk_core_8cpp" local="yes">Source/Azura/RenderSystem/Src/Vulkan/VkCore.cpp</includedby>
    <includedby refid="_memory_factory_8h" local="yes">Source/Common/Inc/Memory/MemoryFactory.h</includedby>
    <incdepgraph>
      <node id="4042">
        <label>cstdint</label>
      </node>
      <node id="4038">
        <label>cassert</label>
      </node>
      <node id="4037">
        <label>Source/Common/Inc/Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h"/>
        <childnode refid="4038" relation="include">
        </childnode>
        <childnode refid="4039" relation="include">
        </childnode>
        <childnode refid="4040" relation="include">
        </childnode>
        <childnode refid="4044" relation="include">
        </childnode>
      </node>
      <node id="4043">
        <label>string</label>
      </node>
      <node id="4044">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4041">
        <label>cstddef</label>
      </node>
      <node id="4040">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="4041" relation="include">
        </childnode>
        <childnode refid="4042" relation="include">
        </childnode>
        <childnode refid="4043" relation="include">
        </childnode>
      </node>
      <node id="4039">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4040" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4045">
        <label>Source/Common/Inc/Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h"/>
        <childnode refid="4046" relation="include">
        </childnode>
      </node>
      <node id="4046">
        <label>Source/Common/Inc/Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_azura_1_1_memory_1_1_stack_memory_buffer" prot="public">Azura::Memory::StackMemoryBuffer</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_memory">Azura::Memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MemoryBuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Memory<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;U32<sp/>Size&gt;</highlight></codeline>
<codeline lineno="13" refid="class_azura_1_1_memory_1_1_stack_memory_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>~<ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disabled<sp/>Copy<sp/>Ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disabled<sp/>Copy<sp/>Assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>(<ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Allocate(U32<sp/>size)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Deallocate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>UPTR<sp/>AllocateRaw(U32<sp/>size);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>U8<sp/>m_buffer[Size];</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;U32<sp/>Size&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="class_azura_1_1_memory_1_1_stack_memory_buffer" kindref="compound">StackMemoryBuffer&lt;Size&gt;::StackMemoryBuffer</ref>()<sp/>:<sp/><ref refid="class_azura_1_1_memory_1_1_memory_buffer" kindref="compound">MemoryBuffer</ref>(Size,<sp/>reinterpret_cast&lt;AddressPtr&gt;(m_buffer)),<sp/>m_buffer{}<sp/>{}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;U32<sp/>Size&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>StackMemoryBuffer&lt;Size&gt;::Allocate(U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AddressPtr<sp/>addr<sp/>=<sp/>AllocateRaw(size);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(addr);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;U32<sp/>Size&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StackMemoryBuffer&lt;Size&gt;::Deallocate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>address)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>UNUSED(address);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;U32<sp/>Size&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">UPTR<sp/>StackMemoryBuffer&lt;Size&gt;::AllocateRaw(U32<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Available<sp/>&lt;<sp/>Size,<sp/>Can&apos;t<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_size<sp/>-<sp/>(m_currentPosition<sp/>-<sp/>m_memoryBlock)<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AddressPtr<sp/>addr<sp/>=<sp/>m_currentPosition;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>m_currentPosition<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Inc/Memory/StackMemoryBuffer.h"/>
  </compounddef>
</doxygen>
