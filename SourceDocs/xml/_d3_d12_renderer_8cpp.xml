<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_d3_d12_renderer_8cpp" kind="file" language="C++">
    <compoundname>D3D12Renderer.cpp</compoundname>
    <includes refid="_d3_d12_renderer_8h" local="yes">D3D12/D3D12Renderer.h</includes>
    <includes refid="_d3_d12_macros_8h" local="yes">D3D12/D3D12Macros.h</includes>
    <includes refid="d3dx12_8h" local="yes">D3D12/d3dx12.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes local="no">array</includes>
    <includes refid="_log_8h" local="yes">Log/Log.h</includes>
    <incdepgraph>
      <node id="2040">
        <label>d3dx12.h</label>
        <link refid="d3dx12_8h_source"/>
        <childnode refid="2030" relation="include">
        </childnode>
      </node>
      <node id="2007">
        <label>functional</label>
      </node>
      <node id="1998">
        <label>Source/Azura/RenderSystem/Src/D3D12/D3D12Renderer.cpp</label>
        <link refid="_d3_d12_renderer_8cpp"/>
        <childnode refid="1999" relation="include">
        </childnode>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2040" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
      </node>
      <node id="2029">
        <label>windows.h</label>
      </node>
      <node id="2008">
        <label>iterator</label>
      </node>
      <node id="2042">
        <label>D3D12/D3D12ScopedImage.h</label>
        <link refid="_d3_d12_scoped_image_8h_source"/>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
      </node>
      <node id="2019">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2057">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2000">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="2001" relation="include">
        </childnode>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="2012" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2014" relation="include">
        </childnode>
        <childnode refid="2022" relation="include">
        </childnode>
      </node>
      <node id="2028">
        <label>D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="2029" relation="include">
        </childnode>
        <childnode refid="2030" relation="include">
        </childnode>
        <childnode refid="2031" relation="include">
        </childnode>
        <childnode refid="2032" relation="include">
        </childnode>
        <childnode refid="2033" relation="include">
        </childnode>
        <childnode refid="2034" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
      </node>
      <node id="2014">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2002" relation="include">
        </childnode>
        <childnode refid="2015" relation="include">
        </childnode>
        <childnode refid="2016" relation="include">
        </childnode>
        <childnode refid="2017" relation="include">
        </childnode>
        <childnode refid="2018" relation="include">
        </childnode>
      </node>
      <node id="2053">
        <label>D3D12/D3D12ComputePool.h</label>
        <link refid="_d3_d12_compute_pool_8h_source"/>
        <childnode refid="2022" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2035" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2042" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
      </node>
      <node id="2030">
        <label>d3d12.h</label>
      </node>
      <node id="2046">
        <label>D3D12/D3D12ScopedBuffer.h</label>
        <link refid="_d3_d12_scoped_buffer_8h_source"/>
        <childnode refid="2039" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
      </node>
      <node id="2052">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2010">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2007" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2011" relation="include">
        </childnode>
      </node>
      <node id="2020">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2005">
        <label>cassert</label>
      </node>
      <node id="2017">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2033">
        <label>wrl.h</label>
      </node>
      <node id="2056">
        <label>stdexcept</label>
      </node>
      <node id="2013">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="2001" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2014" relation="include">
        </childnode>
        <childnode refid="2019" relation="include">
        </childnode>
        <childnode refid="2020" relation="include">
        </childnode>
        <childnode refid="2021" relation="include">
        </childnode>
        <childnode refid="2018" relation="include">
        </childnode>
      </node>
      <node id="2051">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2036">
        <label>map</label>
      </node>
      <node id="2035">
        <label>D3D12/D3D12ScopedPipeline.h</label>
        <link refid="_d3_d12_scoped_pipeline_8h_source"/>
        <childnode refid="2036" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2037" relation="include">
        </childnode>
        <childnode refid="2041" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
      </node>
      <node id="2037">
        <label>D3D12/D3D12ScopedShader.h</label>
        <link refid="_d3_d12_scoped_shader_8h_source"/>
        <childnode refid="2038" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2039" relation="include">
        </childnode>
        <childnode refid="2040" relation="include">
        </childnode>
      </node>
      <node id="2058">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2011" relation="include">
        </childnode>
      </node>
      <node id="2011">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2049">
        <label>D3D12/D3D12ScopedSampler.h</label>
        <link refid="_d3_d12_scoped_sampler_8h_source"/>
        <childnode refid="2028" relation="include">
        </childnode>
      </node>
      <node id="2032">
        <label>D3Dcompiler.h</label>
      </node>
      <node id="1999">
        <label>D3D12/D3D12Renderer.h</label>
        <link refid="_d3_d12_renderer_8h_source"/>
        <childnode refid="2000" relation="include">
        </childnode>
        <childnode refid="2023" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2027" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2037" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2041" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
      </node>
      <node id="2021">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2041">
        <label>D3D12/D3D12ScopedRenderPass.h</label>
        <link refid="_d3_d12_scoped_render_pass_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2042" relation="include">
        </childnode>
        <childnode refid="2037" relation="include">
        </childnode>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2044" relation="include">
        </childnode>
      </node>
      <node id="2001">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2002" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2018">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2024">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="2044">
        <label>D3D12/D3D12ScopedSwapChain.h</label>
        <link refid="_d3_d12_scoped_swap_chain_8h_source"/>
        <childnode refid="2023" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
      </node>
      <node id="2002">
        <label>tuple</label>
      </node>
      <node id="2009">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2006" relation="include">
        </childnode>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2054">
        <label>D3D12/D3D12Macros.h</label>
        <link refid="_d3_d12_macros_8h_source"/>
        <childnode refid="2055" relation="include">
        </childnode>
        <childnode refid="2056" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2047">
        <label>optional</label>
      </node>
      <node id="2050">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2026">
        <label>vector</label>
      </node>
      <node id="2004">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2006" relation="include">
        </childnode>
        <childnode refid="2007" relation="include">
        </childnode>
        <childnode refid="2008" relation="include">
        </childnode>
        <childnode refid="2009" relation="include">
        </childnode>
        <childnode refid="2010" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2011" relation="include">
        </childnode>
      </node>
      <node id="2025">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2026" relation="include">
        </childnode>
      </node>
      <node id="2048">
        <label>D3D12/D3D12Drawable.h</label>
        <link refid="_d3_d12_drawable_8h_source"/>
        <childnode refid="2012" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2040" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
      </node>
      <node id="2059">
        <label>array</label>
      </node>
      <node id="2031">
        <label>dxgi1_4.h</label>
      </node>
      <node id="2039">
        <label>wrl/client.h</label>
      </node>
      <node id="2012">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2014" relation="include">
        </childnode>
      </node>
      <node id="2015">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2027">
        <label>D3D12/D3D12DrawablePool.h</label>
        <link refid="_d3_d12_drawable_pool_8h_source"/>
        <childnode refid="2012" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2035" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2042" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2041" relation="include">
        </childnode>
      </node>
      <node id="2003">
        <label>Types.h</label>
      </node>
      <node id="2055">
        <label>winerror.h</label>
      </node>
      <node id="2023">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="2007" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2000" relation="include">
        </childnode>
        <childnode refid="2024" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
      </node>
      <node id="2043">
        <label>D3D12/D3D12ScopedCommandBuffer.h</label>
        <link refid="_d3_d12_scoped_command_buffer_8h_source"/>
        <childnode refid="2028" relation="include">
        </childnode>
      </node>
      <node id="2022">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="2013" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
      </node>
      <node id="2045">
        <label>D3D12/D3D12ScopedComputePass.h</label>
        <link refid="_d3_d12_scoped_compute_pass_8h_source"/>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="2025" relation="include">
        </childnode>
        <childnode refid="2028" relation="include">
        </childnode>
        <childnode refid="2042" relation="include">
        </childnode>
        <childnode refid="2037" relation="include">
        </childnode>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
      </node>
      <node id="2006">
        <label>cstring</label>
      </node>
      <node id="2034">
        <label>shellapi.h</label>
      </node>
      <node id="2038">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="2013" relation="include">
        </childnode>
      </node>
      <node id="2016">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_d3_d12">Azura::D3D12</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Renderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/d3dx12.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Log/Log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_microsoft_1_1_w_r_l" kindref="compound">Microsoft::WRL</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">D3D12<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">D3D12Renderer::D3D12Renderer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationInfo&amp;<sp/>appInfo,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DeviceRequirements&amp;<sp/>deviceRequirements,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationRequirements&amp;<sp/>appRequirements,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SwapChainRequirements&amp;<sp/>swapChainRequirements,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RenderPassRequirements&amp;<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorRequirements&amp;<sp/>descriptorRequirements,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderRequirements&amp;<sp/>shaderRequirements,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>drawAllocator,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window&amp;<sp/>window)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>:<sp/>Renderer(appInfo,<sp/>deviceRequirements,<sp/>appRequirements,<sp/>swapChainRequirements,<sp/>descriptorRequirements,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mainAllocator,<sp/>drawAllocator,<sp/>window),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>log_D3D12RenderSystem(Log(</highlight><highlight class="stringliteral">&quot;D3D12RenderSystem&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>m_perFrameBuffer(8192),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>m_perFrameAllocator(m_perFrameBuffer,<sp/>8192),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>m_initBuffer(0x400000),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>m_initAllocator(m_initBuffer,<sp/>0x400000),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderSequence(renderPassRequirements.m_passSequence.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderTargetUpdates(renderPassRequirements.m_targets.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bufferTargetUpdates(renderPassRequirements.m_buffers.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetImages(renderPassRequirements.m_targets.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetBuffers(renderPassRequirements.m_buffers.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderPasses(renderPassRequirements.m_passSequence.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m_computePasses(renderPassRequirements.m_passSequence.GetSize(),<sp/>mainAllocator),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawablePools(renderPassRequirements.m_maxPools,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>m_computePools(renderPassRequirements.m_maxPools,<sp/>drawAllocator),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaders(shaderRequirements.m_shaders.GetSize(),<sp/>mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>viewportDimensions<sp/>=<sp/>window.GetViewport();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>m_viewport<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CD3DX12_VIEWPORT(0.0f,<sp/>0.0f,<sp/>viewportDimensions.m_width,<sp/>viewportDimensions.m_height);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>m_scissorRect<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CD3DX12_RECT(0,<sp/>0,<sp/>static_cast&lt;LONG&gt;(viewportDimensions.m_width),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;LONG&gt;(viewportDimensions.m_height));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>UINT<sp/>dxgiFactoryFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>ComPtr&lt;ID3D12Debug&gt;<sp/>debugController;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ComPtr&lt;ID3D12Debug1&gt;<sp/>debugController1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SUCCEEDED(D3D12GetDebugInterface(IID_PPV_ARGS(&amp;debugController))))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>debugController-&gt;EnableDebugLayer();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>debugController-&gt;QueryInterface(IID_PPV_ARGS(&amp;debugController1));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>debugController1-&gt;SetEnableGPUBasedValidation(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>additional<sp/>debug<sp/>layers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>dxgiFactoryFlags<sp/>|=<sp/>DXGI_CREATE_FACTORY_DEBUG;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(BUILD_RELEASE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT<sp/>dxgiFactoryFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ComPtr&lt;IDXGIFactory4&gt;<sp/>factory;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>CreateDXGIFactory2(dxgiFactoryFlags,<sp/>IID_PPV_ARGS(&amp;factory)),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>DXGI<sp/>Factory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>ComPtr&lt;IDXGIAdapter1&gt;<sp/>hardwareAdapter;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>D3D12Core::GetHardwareAdapter(factory.Get(),<sp/>&amp;hardwareAdapter,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ComPtr&lt;IDXGIAdapter&gt;<sp/>warpAdapter;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>factory-&gt;EnumWarpAdapter(IID_PPV_ARGS(&amp;warpAdapter)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Warp<sp/>adapter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>D3D12CreateDevice(hardwareAdapter.Get(),<sp/>D3D_FEATURE_LEVEL_11_0,<sp/>IID_PPV_ARGS(&amp;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>m_device)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>D3D12<sp/>Device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describe<sp/>and<sp/>create<sp/>the<sp/>command<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>D3D12_COMMAND_QUEUE_DESC<sp/>queueDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>queueDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_COMMAND_QUEUE_FLAG_NONE;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>queueDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_device-&gt;CreateCommandQueue(&amp;queueDesc,<sp/>IID_PPV_ARGS(&amp;m_mainGraphicsCommandQueue)),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>command<sp/>Queue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>D3D12_COMMAND_QUEUE_DESC<sp/>computeQueueDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>computeQueueDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_COMMAND_QUEUE_FLAG_NONE;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>computeQueueDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_COMMAND_LIST_TYPE_COMPUTE;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_device-&gt;CreateCommandQueue(&amp;computeQueueDesc,<sp/>IID_PPV_ARGS(&amp;m_mainComputeCommandQueue)),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>command<sp/>Queue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>m_swapChain.Create(factory,<sp/>m_mainGraphicsCommandQueue,<sp/>m_window.get(),<sp/>swapChainRequirements,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>SetCurrentFrame(m_swapChain.RealComPtr()-&gt;GetCurrentBackBufferIndex());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>m_stagingBuffer.Create(m_device,<sp/>CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),<sp/>GetApplicationRequirements().m_renderer.m_stagingBufferSize,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>m_stagingBuffer.Map();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shaderCreateInfo<sp/>:<sp/>shaderRequirements.m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12Renderer::AddShader(shaderCreateInfo);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderTarget<sp/>:<sp/>renderPassRequirements.m_targets)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureDesc<sp/>desc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_format<sp/><sp/><sp/><sp/>=<sp/>renderTarget.m_format;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_bounds<sp/><sp/><sp/><sp/>=<sp/>Bounds3D{swapChainRequirements.m_extent.m_width,<sp/>swapChainRequirements.m_extent.m_height,<sp/>1};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(renderTarget.m_width<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>renderTarget.m_height<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>renderTarget.m_depth<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>desc.m_bounds<sp/>=<sp/>Bounds3D{U32(renderTarget.m_width),<sp/>U32(renderTarget.m_height),<sp/>U32(renderTarget.m_depth)};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>Attachment<sp/>Input<sp/>at:<sp/>%d<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>m_targetImages.</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetSize(),<sp/>ToString(renderTarget.m_format).c_str());</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_RESOURCE_STATES<sp/>resourceState<sp/>=<sp/>D3D12_RESOURCE_STATE_COMMON;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_RESOURCE_FLAGS<sp/>resourceFlags<sp/>=<sp/>D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET<sp/>|<sp/>D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthComponent(desc.m_format)<sp/>||<sp/>HasStencilComponent(desc.m_format))<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resourceFlags<sp/>=<sp/>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetImages.PushBack(D3D12ScopedImage());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetImages.Last().Create(m_device,<sp/>resourceState,<sp/>resourceFlags,<sp/>desc,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bufferTarget<sp/>:<sp/>renderPassRequirements.m_buffers)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_RESOURCE_STATES<sp/>resourceState<sp/>=<sp/>D3D12_RESOURCE_STATE_COMMON;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_RESOURCE_FLAGS<sp/>resourceFlags<sp/>=<sp/>D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetBuffers.PushBack(D3D12ScopedBuffer());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetBuffers.Last().Create(m_device,<sp/>CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),<sp/>bufferTarget.m_size,<sp/>resourceState,<sp/>resourceFlags,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>m_targetBuffers.Last().SetStride(bufferTarget.m_stride);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapChainRequirements.m_depthFormat<sp/>!=<sp/>RawStorageFormat::UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureDesc<sp/>desc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_format<sp/>=<sp/>swapChainRequirements.m_depthFormat;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>desc.m_bounds<sp/>=<sp/>Bounds3D{<sp/>swapChainRequirements.m_extent.m_width,<sp/>swapChainRequirements.m_extent.m_height,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_RESOURCE_STATES<sp/>resourceState<sp/>=<sp/>D3D12_RESOURCE_STATE_DEPTH_WRITE;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12_RESOURCE_FLAGS<sp/>resourceFlags<sp/>=<sp/>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>m_depthTexture.Create(m_device,<sp/>resourceState,<sp/>resourceFlags,<sp/>desc,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>m_rtvDescriptorSize<sp/>=<sp/>m_device-&gt;GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_RTV);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>m_dsvDescriptorSize<sp/>=<sp/>m_device-&gt;GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_DSV);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>U32<sp/>passCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>passCreateInfo<sp/>:<sp/>renderPassRequirements.m_passSequence)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCreateInfo.m_type<sp/>==<sp/>RenderPassType::Graphics)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D3D12ScopedRenderPass<sp/>renderPass<sp/>=<sp/>D3D12ScopedRenderPass(passCount,<sp/>m_renderPasses.GetSize(),<sp/>m_swapChain,<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCount<sp/>!=<sp/>(renderPassRequirements.m_passSequence.GetSize()<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.Create(m_device,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passCreateInfo,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRequirements.m_targets,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_targetImages,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSlots,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSetTable,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rtvDescriptorSize,<sp/>m_dsvDescriptorSize);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.CreateForSwapChain(m_device,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passCreateInfo,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRequirements.m_targets,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_targetImages,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_depthTexture,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSlots,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSetTable,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rtvDescriptorSize,<sp/>m_dsvDescriptorSize);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPasses.PushBack(renderPass);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderSequence.PushBack(std::make_pair(m_renderPasses.GetSize()<sp/>-<sp/>1,<sp/>passCreateInfo.m_type));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passCreateInfo.m_type<sp/>==<sp/>RenderPassType::Compute)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D3D12ScopedComputePass<sp/>computePass<sp/>=<sp/>D3D12ScopedComputePass(passCount,<sp/>m_computePasses.GetSize(),<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computePass.Create(m_device,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passCreateInfo,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPassRequirements.m_targets,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_targetImages,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_targetBuffers,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSlots,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSetTable,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_computePasses.PushBack(computePass);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderSequence.PushBack(std::make_pair(m_computePasses.GetSize()<sp/>-<sp/>1,<sp/>passCreateInfo.m_type));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>++passCount;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">String<sp/>D3D12Renderer::GetRenderingAPI()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;D3D12&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">DrawablePool&amp;<sp/>D3D12Renderer::CreateDrawablePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DrawablePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>D3D12DrawablePool<sp/>pool<sp/>=<sp/>D3D12DrawablePool(m_device,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>createInfo,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorCount,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_descriptorSlots,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPasses,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_targetBuffers,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mainGraphicsCommandQueue,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawPoolAllocator,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_initAllocator,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>m_drawablePools.PushBack(std::move(pool));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_drawablePools.Last();</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">ComputePool&amp;<sp/>D3D12Renderer::CreateComputePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputePoolCreateInfo&amp;<sp/>createInfo)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>D3D12ComputePool<sp/>pool<sp/>=<sp/>D3D12ComputePool(m_device,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorCount,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>m_descriptorSlots,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shaders,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>m_computePasses,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainComputeCommandQueue,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainGraphicsCommandQueue,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawPoolAllocator,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>m_initAllocator,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>m_computePools.PushBack(std::move(pool));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_computePools.Last();</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::Submit()<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Submitting<sp/>Renderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>8192);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haveSubmits<sp/>=<sp/>m_renderTargetUpdates.GetSize()<sp/>&gt;<sp/>0<sp/>||<sp/>m_bufferTargetUpdates.GetSize()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveSubmits)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeSubmitBuffer<sp/>=<sp/>D3D12ScopedCommandBuffer(m_device,<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>oneTimeSubmitBuffer.CreateGraphicsCommandList(m_device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneTimeCommandList<sp/>=<sp/>oneTimeSubmitBuffer.GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Updating<sp/>Render<sp/>Targets<sp/>with<sp/>Initial<sp/>Data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderTargetUpdate<sp/>:<sp/>m_renderTargetUpdates)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[STATES]:<sp/>Get<sp/>current<sp/>state<sp/>and<sp/>don&apos;t<sp/>hardcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetImage<sp/>=<sp/>m_targetImages[renderTargetUpdate.m_binding];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.CopyFromBuffer(m_device,<sp/>oneTimeCommandList,<sp/>m_stagingBuffer,<sp/>renderTargetUpdate.m_offset);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetImage.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Updating<sp/>Buffer<sp/>Targets<sp/>with<sp/>Initial<sp/>Data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bufferTargetUpdate<sp/>:<sp/>m_bufferTargetUpdates)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetBuffer<sp/>=<sp/>m_targetBuffers[bufferTargetUpdate.m_binding];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COPY_DEST,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D3D12Core::CopyBuffer(oneTimeCommandList,<sp/>targetBuffer,<sp/>0,<sp/>m_stagingBuffer,<sp/>bufferTargetUpdate.m_offset,<sp/>bufferTargetUpdate.m_byteSize);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>targetBuffer.Transition(oneTimeCommandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>oneTimeCommandList-&gt;Close();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>oneTimeSubmitBuffer.Execute(m_device,<sp/>m_mainGraphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>oneTimeSubmitBuffer.WaitForComplete(m_mainGraphicsCommandQueue.Get(),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawablePool<sp/>:<sp/>m_drawablePools)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>drawablePool.Submit();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;Vector&lt;D3D12RenderPassRecordEntry&gt;</ref>&gt;<sp/>renderPassEntries(m_renderPasses.GetSize(),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;D3D12RenderPassRecordEntry&gt;</ref><sp/>poolEntries(m_drawablePools.GetSize(),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassEntries.<ref refid="class_azura_1_1_containers_1_1_vector_1aadc803b734b7481d9d7f2e9f86891ce4" kindref="member">PushBack</ref>(poolEntries);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>U32<sp/>poolIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>drawablePool<sp/>:<sp/>m_drawablePools)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;std::pair&lt;U32, D3D12RenderPassRecordEntry&gt;</ref>&gt;<sp/>poolEntries(allocatorTemporary);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>drawablePool.GetRecordEntries(poolEntries);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bufferPair<sp/>:<sp/>poolEntries)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPassEntries[bufferPair.first].PushBack(bufferPair.second);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPassEntries[bufferPair.first].Last().m_poolIdx<sp/>=<sp/>poolIdx;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>++poolIdx;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_renderPasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPass<sp/>=<sp/>m_renderPasses[idx];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLast<sp/>=<sp/>idx<sp/>==<sp/>m_renderPasses.GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>commandBuffers<sp/>=<sp/>renderPass.GetCommandBufferCount();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>cIdx<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>cIdx<sp/>&lt;<sp/>commandBuffers;<sp/>++cIdx)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>commandList<sp/>=<sp/>renderPass.GetPrimaryGraphicsCommandList(cIdx);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLast)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordImageAcquireBarrier(commandList,<sp/>cIdx);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordResourceBarriersForOutputsStart(commandList);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordResourceBarriersForInputsStart(commandList);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;RSSetViewports(1,<sp/>&amp;m_viewport);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;RSSetScissorRects(1,<sp/>&amp;m_scissorRect);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.SetRenderTargets(commandList,<sp/>cIdx,<sp/>m_rtvDescriptorSize);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>renderPassRecords<sp/>=<sp/>renderPassEntries[idx];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;SetGraphicsRootSignature(renderPass.GetRootSignature());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>recordEntry<sp/>:<sp/>renderPassRecords)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetPool<sp/>=<sp/>m_drawablePools[recordEntry.m_poolIdx];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;SetPipelineState(recordEntry.m_pso);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>allHeaps<sp/>=<sp/>targetPool.GetAllDescriptorHeaps();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;SetDescriptorHeaps(UINT(allHeaps.GetSize()),<sp/>allHeaps.Data());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;ExecuteBundle(recordEntry.m_bundle);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordResourceBarriersForOutputsEnd(commandList);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordResourceBarriersForInputsEnd(commandList);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isLast)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPass.RecordPresentBarrier(commandList,<sp/>cIdx);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commandList-&gt;Close();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>COMPUTE<sp/>SUBMIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>computePool<sp/>:<sp/>m_computePools)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>computePool.Submit();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Begin<sp/>Recording<sp/>-<sp/>Open<sp/>all<sp/>command<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_computePasses.GetSize();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>computePass<sp/>=<sp/>m_computePasses[idx];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Begin<sp/>Recording<sp/>Compute<sp/>Pass:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>commandList<sp/>=<sp/>computePass.GetPrimaryComputeCommandList(0);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>computePass.RecordResourceBarriersForOutputsStart(commandList);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>computePass.RecordResourceBarriersForInputsStart(commandList);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>Pool<sp/>Wise<sp/>-<sp/>Pass<sp/>Wise<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>computePool<sp/>:<sp/>m_computePools)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computePool.Record(computePass.GetId());</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>computePass.RecordResourceBarriersForOutputsEnd(commandList);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>computePass.RecordResourceBarriersForInputsEnd(commandList);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>commandList-&gt;Close();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;End<sp/>Recording<sp/>Compute<sp/>Pass:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>idx);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Submit<sp/>Complete<sp/>-<sp/>All<sp/>Render<sp/>Passes<sp/>recorded&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::RenderFrame()<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EnterRenderFrame();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>currentFrame<sp/>=<sp/>GetCurrentFrame();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>U32<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pass<sp/>:<sp/>m_renderSequence)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>m_renderSequence.GetSize()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>do<sp/>last<sp/>render<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>pass.first;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass.second<sp/>==<sp/>RenderPassType::Graphics)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;ID3D12CommandList*,<sp/>1&gt;<sp/>list<sp/>=<sp/>{<sp/>m_renderPasses[idx].GetPrimaryGraphicsCommandList(0)<sp/>};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_mainGraphicsCommandQueue-&gt;ExecuteCommandLists(UINT(list.size()),<sp/>list.data());</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderPasses[idx].WaitForGPU(m_mainGraphicsCommandQueue.Get());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass.second<sp/>==<sp/>RenderPassType::Compute)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;ID3D12CommandList*,<sp/>1&gt;<sp/>list<sp/>=<sp/>{<sp/>m_computePasses[idx].GetPrimaryComputeCommandList(0)<sp/>};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_mainComputeCommandQueue-&gt;ExecuteCommandLists(UINT(list.size()),<sp/>list.data());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_computePasses[idx].WaitForGPU(m_mainComputeCommandQueue.Get());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>std::array&lt;ID3D12CommandList*,<sp/>1&gt;<sp/>swapChainList<sp/>=<sp/>{m_renderPasses.Last().GetPrimaryGraphicsCommandList(currentFrame)};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>m_mainGraphicsCommandQueue-&gt;ExecuteCommandLists(UINT(swapChainList.size()),<sp/>swapChainList.data());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Present<sp/>and<sp/>update<sp/>the<sp/>frame<sp/>index<sp/>for<sp/>the<sp/>next<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_swapChain.RealComPtr()-&gt;Present(1,<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;Present<sp/>Failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>m_renderPasses.Last().WaitForGPU(m_mainGraphicsCommandQueue.Get());</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>m_perFrameAllocator.Reset();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>ExitRenderFrame();</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::SnapshotFrame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>exportPath)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Exporting<sp/>Screenshot:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>exportPath.c_str());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>UNUSED(exportPath);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::AddShader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShaderCreateInfo&amp;<sp/>info)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>fullPath<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Shaders/&quot;</highlight><highlight class="normal"><sp/>+<sp/>D3D12Renderer::GetRenderingAPI()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>info.m_shaderFileName;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>D3D12ScopedShader<sp/>shader<sp/>=<sp/>D3D12ScopedShader(fullPath,<sp/>m_initAllocator,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>m_shaders.PushBack(std::move(shader));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>m_shaders.Last().SetStage(info.m_stage);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::BindRenderTarget(U32<sp/>renderTargetId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc&amp;<sp/>desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Target:<sp/>Updating<sp/>Render<sp/>Target:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>renderTargetId,<sp/>desc.m_size);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>size<sp/>=<sp/>desc.m_size;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>textureWidthBytes<sp/>=<sp/>desc.m_bounds.m_width<sp/>*<sp/>GetFormatSize(desc.m_format);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendTextureData(buffer,<sp/>size,<sp/>512,<sp/>textureWidthBytes,<sp/>D3D12_TEXTURE_DATA_PITCH_ALIGNMENT,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>TextureBufferInfo<sp/>info<sp/>=<sp/>TextureBufferInfo();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>info.m_desc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>desc;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>renderTargetId;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>info.m_set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>m_renderTargetUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12Renderer::BindBufferTarget(U32<sp/>bufferTargetId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>size<sp/>=<sp/>m_targetBuffers[bufferTargetId].GetSize();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Target:<sp/>Updating<sp/>Buffer<sp/>Target:<sp/>%d<sp/>of<sp/>Size:<sp/>%d<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>bufferTargetId,<sp/>size);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[INPUT]:<sp/>Could<sp/>be<sp/>an<sp/>issue<sp/>with<sp/>sizeof(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>offset<sp/>=<sp/>m_stagingBuffer.AppendData(buffer,<sp/>size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>BufferTargetInfo<sp/>info<sp/>=<sp/>BufferTargetInfo();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>info.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>info.m_offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>info.m_binding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>bufferTargetId;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>info.m_set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>m_bufferTargetUpdates.PushBack(info);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>D3D12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/D3D12/D3D12Renderer.cpp"/>
  </compounddef>
</doxygen>
