<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_app_renderer_8_cloth_8cpp" kind="file" language="C++">
    <compoundname>AppRenderer.Cloth.cpp</compoundname>
    <includes refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h" local="yes">TestZone/AppRenderer.h</includes>
    <includes refid="_raw_storage_format_8h" local="yes">Core/RawStorageFormat.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <includes refid="_icosphere_8h" local="yes">Math/Icosphere.h</includes>
    <includes refid="_plane_8h" local="yes">Math/Plane.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">random</includes>
    <incdepgraph>
      <node id="6032">
        <label>Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6021" relation="include">
        </childnode>
      </node>
      <node id="6027">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6028" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6004">
        <label>functional</label>
      </node>
      <node id="6005">
        <label>iterator</label>
      </node>
      <node id="6016">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6043">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6044" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="5997">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="5998" relation="include">
        </childnode>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="6009" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
        <childnode refid="6019" relation="include">
        </childnode>
      </node>
      <node id="6011">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="5999" relation="include">
        </childnode>
        <childnode refid="6012" relation="include">
        </childnode>
        <childnode refid="6013" relation="include">
        </childnode>
        <childnode refid="6014" relation="include">
        </childnode>
        <childnode refid="6015" relation="include">
        </childnode>
      </node>
      <node id="6024">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6039">
        <label>boost/container_hash/hash.hpp</label>
      </node>
      <node id="6026">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6007">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6004" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
      </node>
      <node id="6017">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6002">
        <label>cassert</label>
      </node>
      <node id="6014">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6010">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="5998" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
        <childnode refid="6016" relation="include">
        </childnode>
        <childnode refid="6017" relation="include">
        </childnode>
        <childnode refid="6018" relation="include">
        </childnode>
        <childnode refid="6015" relation="include">
        </childnode>
      </node>
      <node id="6025">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6026" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6044">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6002" relation="include">
        </childnode>
        <childnode refid="6026" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
      </node>
      <node id="6008">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6040">
        <label>TestZone/ImportedClothMesh.h</label>
        <link refid="_imported_cloth_mesh_8h_source"/>
        <childnode refid="6037" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
      </node>
      <node id="6036">
        <label>TestZone/ClothMesh.h</label>
        <link refid="_samples_20___test_zone_2_inc_2_test_zone_2_cloth_mesh_8h_source"/>
        <childnode refid="6037" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
      </node>
      <node id="6018">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="5998">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="5999" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6015">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6035">
        <label>random</label>
      </node>
      <node id="6021">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="5999">
        <label>tuple</label>
      </node>
      <node id="6006">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6002" relation="include">
        </childnode>
        <childnode refid="6003" relation="include">
        </childnode>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6030">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6023">
        <label>vector</label>
      </node>
      <node id="6001">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6002" relation="include">
        </childnode>
        <childnode refid="6003" relation="include">
        </childnode>
        <childnode refid="6004" relation="include">
        </childnode>
        <childnode refid="6005" relation="include">
        </childnode>
        <childnode refid="6006" relation="include">
        </childnode>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
      </node>
      <node id="5994">
        <label>TestZone/AppRenderer.h</label>
        <link refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h_source"/>
        <childnode refid="5995" relation="include">
        </childnode>
        <childnode refid="5996" relation="include">
        </childnode>
        <childnode refid="5997" relation="include">
        </childnode>
        <childnode refid="6020" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6029" relation="include">
        </childnode>
        <childnode refid="6031" relation="include">
        </childnode>
        <childnode refid="6033" relation="include">
        </childnode>
        <childnode refid="6035" relation="include">
        </childnode>
        <childnode refid="6036" relation="include">
        </childnode>
        <childnode refid="6040" relation="include">
        </childnode>
      </node>
      <node id="6022">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6034">
        <label>Math/Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
      </node>
      <node id="6009">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
      </node>
      <node id="6037">
        <label>TestZone/ClothCommon.h</label>
        <link refid="_cloth_common_8h_source"/>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
        <childnode refid="6038" relation="include">
        </childnode>
        <childnode refid="6039" relation="include">
        </childnode>
      </node>
      <node id="6045">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="6027" relation="include">
        </childnode>
      </node>
      <node id="6012">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6038">
        <label>unordered_map</label>
      </node>
      <node id="6000">
        <label>Types.h</label>
      </node>
      <node id="6041">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="5997" relation="include">
        </childnode>
        <childnode refid="6029" relation="include">
        </childnode>
      </node>
      <node id="6028">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6020">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6004" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="5997" relation="include">
        </childnode>
        <childnode refid="6021" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
      </node>
      <node id="6046">
        <label>Math/Icosphere.h</label>
        <link refid="_icosphere_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="5993">
        <label>Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp</label>
        <link refid="_app_renderer_8_cloth_8cpp"/>
        <childnode refid="5994" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
        <childnode refid="6041" relation="include">
        </childnode>
        <childnode refid="6042" relation="include">
        </childnode>
        <childnode refid="6043" relation="include">
        </childnode>
        <childnode refid="6030" relation="include">
        </childnode>
        <childnode refid="6045" relation="include">
        </childnode>
        <childnode refid="6046" relation="include">
        </childnode>
        <childnode refid="6033" relation="include">
        </childnode>
        <childnode refid="6047" relation="include">
        </childnode>
        <childnode refid="6035" relation="include">
        </childnode>
      </node>
      <node id="6031">
        <label>Camera/PolarCamera.h</label>
        <link refid="_polar_camera_8h_source"/>
        <childnode refid="6032" relation="include">
        </childnode>
      </node>
      <node id="5996">
        <label>set</label>
      </node>
      <node id="6033">
        <label>Math/Plane.h</label>
        <link refid="_plane_8h_source"/>
        <childnode refid="6027" relation="include">
        </childnode>
        <childnode refid="6034" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
      </node>
      <node id="6019">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6047">
        <label>algorithm</label>
      </node>
      <node id="6029">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6000" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="6030" relation="include">
        </childnode>
        <childnode refid="6001" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
      </node>
      <node id="6003">
        <label>cstring</label>
      </node>
      <node id="5995">
        <label>memory</label>
      </node>
      <node id="6042">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="6010" relation="include">
        </childnode>
      </node>
      <node id="6013">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_app_renderer_8_cloth_8cpp_1a9f070c24d1bcd5d92601a9e4bc5b2239" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float m_pos[4]</definition>
        <argsstring>[4]</argsstring>
        <name>m_pos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" line="19" column="1" bodyfile="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_app_renderer_8_cloth_8cpp_1abacfef300a31bbd96e041d2139f6a589" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float m_col[4]</definition>
        <argsstring>[4]</argsstring>
        <name>m_col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" line="20" column="1" bodyfile="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_app_renderer_8_cloth_8cpp_1aa8f87e87e5449f1c7a46b53abdc033e8" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float m_uv[2]</definition>
        <argsstring>[2]</argsstring>
        <name>m_uv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" line="25" column="1" bodyfile="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_app_renderer_8_cloth_8cpp_1ab0e812335faf45458fb0aeaa849b3556" prot="public" static="no" mutable="no">
        <type>Vector4f</type>
        <definition>Vector4f m_lightPos</definition>
        <argsstring></argsstring>
        <name>m_lightPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" line="29" column="1" bodyfile="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TestZone/AppRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Core/RawStorageFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Icosphere.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Plane.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Containers;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Math;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_col[4];</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_uv[2];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LightData<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector4f<sp/>m_lightPos;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>constexpr<sp/>U32<sp/>CLOTH_DIV_X<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>constexpr<sp/>U32<sp/>CLOTH_DIV_Y<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">AppRenderer::AppRenderer()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>:<sp/>m_mainBuffer(16384),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainAllocator(m_mainBuffer,<sp/>8192),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawableAllocator(m_mainBuffer,<sp/>8192),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>m_camera(1280,<sp/>720),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothPlane(Vector2f(-3.0f,<sp/>-3.0f),<sp/>Vector2f(3.0f,<sp/>3.0f),<sp/>Vector2u(CLOTH_DIV_X,<sp/>CLOTH_DIV_Y)),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>log_AppRenderer(Log(</highlight><highlight class="stringliteral">&quot;AppRenderer&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Init<sp/>of<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>16384);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>m_window<sp/>=<sp/>RenderSystem::CreateApplicationWindow(</highlight><highlight class="stringliteral">&quot;TestZone&quot;</highlight><highlight class="normal">,<sp/>1280,<sp/>720);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>m_window-&gt;SetUpdateCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deltaTime)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>WindowUpdate(deltaTime);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>m_window-&gt;SetKeyEventCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](KeyEvent<sp/>evt)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>m_camera.OnKeyEvent(evt);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>m_window-&gt;SetMouseEventCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](MouseEvent<sp/>evt)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>UNUSED(evt);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>as<sp/>it<sp/>has<sp/>bugs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_camera.OnMouseEvent(e);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>m_camera.SetZoom(10);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>m_camera.RotateAboutRight(-30);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>m_window-&gt;Initialize(),<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>Initialize<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TestZone&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>m_camera.Recompute();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>m_clothUBO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>m_clothUBO.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::FromTranslationVector(Vector3f(0,<sp/>3,<sp/>0));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>m_clothUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>m_clothUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_clothUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>m_clothUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>m_clothUBO.m_modelInvTranspose<sp/>=<sp/>m_clothUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>m_sphereUBO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_modelInvTranspose<sp/>=<sp/>m_sphereUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>LightData<sp/>lightData<sp/><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>lightData.m_lightPos<sp/>=<sp/>Vector4f(0.0f,<sp/>15.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[Q]:Allocator?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;<sp/></highlight><highlight class="comment">//<sp/>4MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(2,<sp/>2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>LIGHT_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/><sp/><sp/>=<sp/>descriptorRequirements.AddSet({UBO_SLOT});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>LIGHT_SET<sp/>=<sp/>descriptorRequirements.AddSet({LIGHT_SLOT});</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;Cloth.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;Cloth.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(1,<sp/>2,<sp/>0,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>renderPassRequirements.m_maxPools<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SINGLE_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputTargets{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::InputBuffers{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Outputs{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>LIGHT_SET},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearData{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_window-&gt;GetSwapChainRequirements(),<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_drawableAllocator,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_window);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>IcoSphere<sp/>sphere(4);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>m_clothVertexVel.resize(m_clothPlane.GetVertices().size());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>m_clothProjectedPos.resize(m_clothPlane.GetVertices().size());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>totalConstraints<sp/>=<sp/>m_clothPlane.GetEdgeConstraints().size()<sp/>+<sp/>m_clothPlane.GetBendingConstraints().size();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(SizeType<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>totalConstraints;<sp/>++i)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothConstraintsIdx.push_back(i);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>velocity<sp/>:<sp/>m_clothVertexVel)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>velocity<sp/>=<sp/>Vector4f(0,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.TotalDataSize()<sp/>+<sp/>m_clothPlane.TotalDataSize()<sp/>+<sp/>0x400000;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>poolInfo.m_renderPasses<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{{SINGLE_PASS},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT}}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NORMAL_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferUsageRate::PerVertex,<sp/>{{</highlight><highlight class="stringliteral">&quot;NORMAL&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32_FLOAT}}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>DrawablePool&amp;<sp/>pool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_clothUBO);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sphereUBO<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_sphereUBO);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lightDataBuffer<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;lightData);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_clothPlane.GetVertexCount();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_clothPlane.GetIndexCount();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clothId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>pool.BindVertexData(clothId,<sp/>VERTEX_SLOT,<sp/>m_clothPlane.VertexData(),<sp/>m_clothPlane.VertexDataSize());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>pool.BindVertexData(clothId,<sp/>NORMAL_SLOT,<sp/>m_clothPlane.NormalData(),<sp/>m_clothPlane.NormalDataSize());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>pool.SetIndexData(clothId,<sp/>m_clothPlane.IndexData(),<sp/>m_clothPlane.IndexDataSize());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>pool.BindUniformData(clothId,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SceneUBO));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>pool.BindUniformData(clothId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(LightData));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>DrawableCreateInfo<sp/>sphereDrawableInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>sphereDrawableInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetVertexCount();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>sphereDrawableInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetIndexCount();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>sphereDrawableInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>sphereDrawableInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sphere.GetIndexFormat();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sphereId<sp/>=<sp/>pool.CreateDrawable(sphereDrawableInfo);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>pool.BindVertexData(sphereId,<sp/>VERTEX_SLOT,<sp/>sphere.VertexData(),<sp/>sphere.VertexDataSize());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>pool.BindVertexData(sphereId,<sp/>NORMAL_SLOT,<sp/>sphere.NormalData(),<sp/>sphere.NormalDataSize());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>pool.SetIndexData(sphereId,<sp/>sphere.IndexData(),<sp/>sphere.IndexDataSize());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>pool.BindUniformData(sphereId,<sp/>UBO_SLOT,<sp/>sphereUBO,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SceneUBO));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>pool.BindUniformData(sphereId,<sp/>LIGHT_SLOT,<sp/>lightDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(LightData));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>m_renderPass.m_vertexSlot<sp/>=<sp/>VERTEX_SLOT;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>m_renderPass.m_normalSlot<sp/>=<sp/>NORMAL_SLOT;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>m_renderPass.m_sceneUBOSlot<sp/>=<sp/>UBO_SLOT;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>m_renderPass.m_clothId<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>clothId;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>m_renderPass.m_sphereId<sp/><sp/><sp/><sp/><sp/>=<sp/>sphereId;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>m_mainPool<sp/>=<sp/>&amp;pool;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::WindowUpdate(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeDelta)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>m_camera.Update(timeDelta);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>clothVertices<sp/>=<sp/>m_clothPlane.GetVertices();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Projected<sp/>Positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>std::memcpy(m_clothProjectedPos.data(),<sp/>clothVertices.data(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Vector4f)<sp/>*<sp/>clothVertices.size());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector4f<sp/>gravity<sp/>=<sp/>{0.0f,<sp/>-0.8f,<sp/>0.0f,<sp/>0.0f};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>numEntries<sp/>=<sp/>U32(clothVertices.size());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::random_device<sp/>rd;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::mt19937<sp/>randomizer(rd());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>solverIterations<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceStiffness<sp/>=<sp/>0.8f;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceStiffnessPrime<sp/>=<sp/>1.0f<sp/>-<sp/>std::pow(1.0f<sp/>-<sp/>distanceStiffness,<sp/>1.0f<sp/>/<sp/>solverIterations);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bendingStiffness<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bendingStiffnessPrime<sp/>=<sp/>1.0f<sp/>-<sp/>std::pow(1.0f<sp/>-<sp/>bendingStiffness,<sp/>1.0f<sp/>/<sp/>solverIterations);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>anchoredPts<sp/>=<sp/>m_clothPlane.GetAnchorIds();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>edgeConstraints<sp/>=<sp/>m_clothPlane.GetEdgeConstraints();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bendConstraints<sp/>=<sp/>m_clothPlane.GetBendingConstraints();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>External<sp/>Force<sp/>Update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>numEntries;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(anchoredPts.begin(),<sp/>anchoredPts.end(),<sp/>idx)<sp/>!=<sp/>anchoredPts.end())</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothVertexVel[idx]<sp/>=<sp/>m_clothVertexVel[idx]<sp/>+<sp/>timeDelta<sp/>*<sp/>1.0f<sp/>*<sp/>gravity;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Damp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Projected<sp/>Positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>numEntries;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothProjectedPos[idx]<sp/>=<sp/>m_clothProjectedPos[idx]<sp/>+<sp/>m_clothVertexVel[idx]<sp/>*<sp/>timeDelta;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>totalConstraints<sp/>=<sp/>m_clothPlane.GetEdgeConstraints().size()<sp/>+<sp/>m_clothPlane.GetBendingConstraints().size();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>solverItr<sp/>=<sp/>0;<sp/>solverItr<sp/>&lt;<sp/>solverIterations;<sp/>++solverItr)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::shuffle(m_clothConstraintsIdx.begin(),<sp/>m_clothConstraintsIdx.end(),<sp/>randomizer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>idx<sp/>:<sp/>m_clothConstraintsIdx)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>m_clothPlane.GetEdgeConstraints().size())<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deltaX1<sp/>=<sp/>edgeConstraints[idx].ComputeDeltaX1(m_clothProjectedPos,<sp/>distanceStiffnessPrime);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deltaX2<sp/>=<sp/>edgeConstraints[idx].ComputeDeltaX2(m_clothProjectedPos,<sp/>distanceStiffnessPrime);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[edgeConstraints[idx].m_indexA]<sp/>+=<sp/>deltaX1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[edgeConstraints[idx].m_indexB]<sp/>+=<sp/>deltaX2;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SizeType<sp/>bendIdx<sp/>=<sp/>idx<sp/>-<sp/>m_clothPlane.GetEdgeConstraints().size();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bendingConstraint<sp/>=<sp/>bendConstraints[bendIdx];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>deltas<sp/>=<sp/>bendingConstraint.Compute(m_clothProjectedPos,<sp/>bendingStiffnessPrime);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[bendingConstraint.m_indexX0]<sp/>+=<sp/>deltas[0];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[bendingConstraint.m_indexX1]<sp/>+=<sp/>deltas[1];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[bendingConstraint.m_indexX2]<sp/>+=<sp/>deltas[2];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clothProjectedPos[bendingConstraint.m_indexX3]<sp/>+=<sp/>deltas[3];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>numEntries;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clothVertexVel[idx]<sp/>=<sp/>(m_clothProjectedPos[idx]<sp/>-<sp/>clothVertices[idx])<sp/>/<sp/>timeDelta;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>clothVertices[idx]<sp/>=<sp/>m_clothProjectedPos[idx];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>m_clothUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>m_clothUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>m_clothUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>m_clothUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>m_clothUBO.m_modelInvTranspose<sp/>=<sp/>m_clothUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewMatrix();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetViewProjMatrix();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_invViewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetInvViewProjMatrix();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_invProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>m_camera.GetProjMatrix().Inverse();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>m_sphereUBO.m_modelInvTranspose<sp/>=<sp/>m_sphereUBO.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vbStart<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(clothVertices.data());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_clothUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sphereDataBuffer<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;m_sphereUBO);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;BeginUpdates();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>Cloth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_renderPass.m_clothId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SceneUBO));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;UpdateVertexData(m_renderPass.m_clothId,<sp/>m_renderPass.m_vertexSlot,<sp/>vbStart,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32(clothVertices.size())<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Vector4f));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>Sphere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;UpdateUniformData(m_renderPass.m_sphereId,<sp/>m_renderPass.m_sceneUBOSlot,<sp/>sphereDataBuffer,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SceneUBO));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>m_mainPool-&gt;SubmitUpdates();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>m_window-&gt;StartListening();</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Destroy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>m_window-&gt;Destroy();</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Samples/0_TestZone/Src/AppRenderer.Cloth.cpp"/>
  </compounddef>
</doxygen>
