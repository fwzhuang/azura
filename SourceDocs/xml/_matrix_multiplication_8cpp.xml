<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_matrix_multiplication_8cpp" kind="file" language="C++">
    <compoundname>MatrixMultiplication.cpp</compoundname>
    <includes refid="_matrix_multiplication_8h" local="yes">PowerBench/MatrixMultiplication.h</includes>
    <incdepgraph>
      <node id="5186">
        <label>Source/PowerBench/Src/MatrixMultiplication.cpp</label>
        <link refid="_matrix_multiplication_8cpp"/>
        <childnode refid="5187" relation="include">
        </childnode>
      </node>
      <node id="5187">
        <label>PowerBench/MatrixMultiplication.h</label>
        <link refid="_matrix_multiplication_8h_source"/>
        <childnode refid="5188" relation="include">
        </childnode>
        <childnode refid="5189" relation="include">
        </childnode>
      </node>
      <node id="5190">
        <label>random</label>
      </node>
      <node id="5188">
        <label>benchmark/benchmark.h</label>
      </node>
      <node id="5191">
        <label>vector</label>
      </node>
      <node id="5189">
        <label>PowerBench/Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="5190" relation="include">
        </childnode>
        <childnode refid="5191" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_matrix_multiplication_8cpp_1a44debf68d4a7d7a62dd54f3e235b1b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(MatrixMultiplicationFixture, BM_MMNaive)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref></type>
        </param>
        <param>
          <type>BM_MMNaive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/PowerBench/Src/MatrixMultiplication.cpp" line="5" column="1" bodyfile="Source/PowerBench/Src/MatrixMultiplication.cpp" bodystart="5" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_multiplication_8cpp_1a1d7d5619dc74048806bebd4b7fabdc8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(MatrixMultiplicationFixture, BM_MMNaive) -&gt; RangeMultiplier(2) -&gt;Range(256, 256&lt;&lt; 3)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref></type>
        </param>
        <param>
          <type>BM_MMNaive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/PowerBench/Src/MatrixMultiplication.cpp" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_multiplication_8cpp_1a8cd060c14cda87e2b438239d6fd197b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(MatrixMultiplicationFixture, BM_MMCacheOptimized)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref></type>
        </param>
        <param>
          <type>BM_MMCacheOptimized</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/PowerBench/Src/MatrixMultiplication.cpp" line="28" column="1" bodyfile="Source/PowerBench/Src/MatrixMultiplication.cpp" bodystart="28" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_multiplication_8cpp_1a2a169416b9edebb19732b376c5943cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(MatrixMultiplicationFixture, BM_MMCacheOptimized) -&gt; RangeMultiplier(2) -&gt;Range(256, 256&lt;&lt; 3)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref></type>
        </param>
        <param>
          <type>BM_MMCacheOptimized</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/PowerBench/Src/MatrixMultiplication.cpp" line="63" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PowerBench/MatrixMultiplication.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_utils" kindref="compound">Utils</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref>,<sp/>BM_MMNaive)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>st.PauseTiming();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>Utils::ClearCache();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>st.ResumeTiming();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>st.range(0);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>size;<sp/>++k)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_result[i<sp/>*<sp/>size<sp/>+<sp/>j]<sp/>+=<sp/>m_data1[i<sp/>*<sp/>size<sp/>+<sp/>k]<sp/>*<sp/>m_data2[k<sp/>*<sp/>size<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref>,<sp/>BM_MMNaive)-&gt;RangeMultiplier(2)-&gt;Range(256,<sp/>256<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref>,<sp/>BM_MMCacheOptimized)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>st.PauseTiming();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>Utils::ClearCache();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>st.ResumeTiming();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>st.range(0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rres;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rmul1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>rmul2;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i2,<sp/>j2,<sp/>k2;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i<sp/>+=<sp/>ELEMENTS_PER_LINE)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j<sp/>+=<sp/>ELEMENTS_PER_LINE)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>size;<sp/>k<sp/>+=<sp/>ELEMENTS_PER_LINE)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i2<sp/>=<sp/>0,<sp/>rres<sp/>=<sp/>&amp;m_result[i<sp/>*<sp/>size<sp/>+<sp/>j],<sp/>rmul1<sp/>=<sp/>&amp;m_data1[i<sp/>*<sp/>size<sp/>+<sp/>k];<sp/>i2<sp/>&lt;<sp/>ELEMENTS_PER_LINE;<sp/>++i2,<sp/>rres<sp/>+=<sp/>size,<sp/>rmul1<sp/>+=<sp/>size)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k2<sp/>=<sp/>0,<sp/>rmul2<sp/>=<sp/>&amp;m_data2[k<sp/>*<sp/>size<sp/>+<sp/>j];<sp/>k2<sp/>&lt;<sp/>ELEMENTS_PER_LINE;<sp/>++k2,<sp/>rmul2<sp/>+=<sp/>size)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j2<sp/>=<sp/>0;<sp/>j2<sp/>&lt;<sp/>ELEMENTS_PER_LINE;<sp/>++j2)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rres[j2]<sp/>+=<sp/>rmul1[k2]<sp/>*<sp/>rmul2[j2];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_matrix_multiplication_fixture" kindref="compound">MatrixMultiplicationFixture</ref>,<sp/>BM_MMCacheOptimized)-&gt;RangeMultiplier(2)-&gt;Range(256,<sp/>256<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
    </programlisting>
    <location file="Source/PowerBench/Src/MatrixMultiplication.cpp"/>
  </compounddef>
</doxygen>
