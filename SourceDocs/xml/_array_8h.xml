<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_array_8h" kind="file" language="C++">
    <compoundname>Array.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <includes refid="_allocator_8h" local="yes">Memory/Allocator.h</includes>
    <includes refid="_types_8h" local="yes">Types.h</includes>
    <includedby refid="_array_batch_8h" local="yes">Source/Containers/Inc/Containers/ArrayBatch.h</includedby>
    <includedby refid="_vector_8h" local="yes">Source/Containers/Inc/Containers/Vector.h</includedby>
    <incdepgraph>
      <node id="4317">
        <label>functional</label>
      </node>
      <node id="4320">
        <label>cstdint</label>
      </node>
      <node id="4314">
        <label>cassert</label>
      </node>
      <node id="4321">
        <label>string</label>
      </node>
      <node id="4316">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4317" relation="include">
        </childnode>
        <childnode refid="4318" relation="include">
        </childnode>
        <childnode refid="4322" relation="include">
        </childnode>
      </node>
      <node id="4322">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4313">
        <label>Source/Containers/Inc/Containers/Array.h</label>
        <link refid="_array_8h"/>
        <childnode refid="4314" relation="include">
        </childnode>
        <childnode refid="4315" relation="include">
        </childnode>
        <childnode refid="4316" relation="include">
        </childnode>
        <childnode refid="4318" relation="include">
        </childnode>
      </node>
      <node id="4319">
        <label>cstddef</label>
      </node>
      <node id="4318">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="4319" relation="include">
        </childnode>
        <childnode refid="4320" relation="include">
        </childnode>
        <childnode refid="4321" relation="include">
        </childnode>
      </node>
      <node id="4315">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4364">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedSwapChain.h</label>
        <link refid="_vk_scoped_swap_chain_8h_source"/>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4329">
        <label>Source/Azura/RenderSystem/Inc/Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4330" relation="include">
        </childnode>
        <childnode refid="4338" relation="include">
        </childnode>
        <childnode refid="4339" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
        <childnode refid="4341" relation="include">
        </childnode>
      </node>
      <node id="4331">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedSwapChain.h</label>
        <link refid="_d3_d12_scoped_swap_chain_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
      </node>
      <node id="4345">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Drawable.h</label>
        <link refid="_d3_d12_drawable_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
      </node>
      <node id="4357">
        <label>Source/Azura/RenderSystem/Inc/Generic/GPUBufferWriter.h</label>
        <link refid="_g_p_u_buffer_writer_8h_source"/>
      </node>
      <node id="4366">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkShader.h</label>
        <link refid="_vk_shader_8h_source"/>
        <childnode refid="4362" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4328">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Renderer.h</label>
        <link refid="_d3_d12_renderer_8h_source"/>
      </node>
      <node id="4351">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12TypeMapping.h</label>
        <link refid="_d3_d12_type_mapping_8h_source"/>
      </node>
      <node id="4335">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedRenderPass.h</label>
        <link refid="_d3_d12_scoped_render_pass_8h_source"/>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4333" relation="include">
        </childnode>
      </node>
      <node id="4340">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkRenderer.h</label>
        <link refid="_vk_renderer_8h_source"/>
      </node>
      <node id="4361">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTypes.h</label>
        <link refid="_vk_types_8h_source"/>
        <childnode refid="4339" relation="include">
        </childnode>
      </node>
      <node id="4365">
        <label>Source/Azura/RenderSystem/Inc/Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="4350" relation="include">
        </childnode>
        <childnode refid="4366" relation="include">
        </childnode>
      </node>
      <node id="4356">
        <label>Source/Azura/RenderSystem/Inc/Generic/GPUBuffer.h</label>
        <link refid="_g_p_u_buffer_8h_source"/>
        <childnode refid="4357" relation="include">
        </childnode>
      </node>
      <node id="4339">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkCore.h</label>
        <link refid="_vk_core_8h_source"/>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4324">
        <label>Source/Containers/Inc/Containers/ArrayBatch.h</label>
        <link refid="_array_batch_8h_source"/>
      </node>
      <node id="4341">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTextureManager.h</label>
        <link refid="_vk_texture_manager_8h_source"/>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4370">
        <label>Source/Physics/Inc/Physics/PBD/Cloth/ClothSolvingView.h</label>
        <link refid="_cloth_solving_view_8h_source"/>
        <childnode refid="4371" relation="include">
        </childnode>
        <childnode refid="4372" relation="include">
        </childnode>
      </node>
      <node id="4353">
        <label>Source/Azura/RenderSystem/Inc/Generic/Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="4345" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4329" relation="include">
        </childnode>
        <childnode refid="4354" relation="include">
        </childnode>
        <childnode refid="4342" relation="include">
        </childnode>
        <childnode refid="4355" relation="include">
        </childnode>
      </node>
      <node id="4362">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedRenderPass.h</label>
        <link refid="_vk_scoped_render_pass_8h_source"/>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4355" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4333">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedPipeline.h</label>
        <link refid="_d3_d12_scoped_pipeline_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
      </node>
      <node id="4358">
        <label>Source/Azura/RenderSystem/Inc/Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="4359" relation="include">
        </childnode>
        <childnode refid="4338" relation="include">
        </childnode>
        <childnode refid="4360" relation="include">
        </childnode>
        <childnode refid="4341" relation="include">
        </childnode>
      </node>
      <node id="4367">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkTypeMapping.h</label>
        <link refid="_vk_type_mapping_8h_source"/>
      </node>
      <node id="4332">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedComputePass.h</label>
        <link refid="_d3_d12_scoped_compute_pass_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4333" relation="include">
        </childnode>
      </node>
      <node id="4372">
        <label>Source/Physics/Inc/Physics/Geometry/ClothPlane.h</label>
        <link refid="_cloth_plane_8h_source"/>
      </node>
      <node id="4347">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedCommandBuffer.h</label>
        <link refid="_d3_d12_scoped_command_buffer_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
      </node>
      <node id="4355">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkDrawablePool.h</label>
        <link refid="_vk_drawable_pool_8h_source"/>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4325">
        <label>Source/Containers/Inc/Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="4326" relation="include">
        </childnode>
        <childnode refid="4343" relation="include">
        </childnode>
        <childnode refid="4353" relation="include">
        </childnode>
        <childnode refid="4329" relation="include">
        </childnode>
        <childnode refid="4358" relation="include">
        </childnode>
        <childnode refid="4339" relation="include">
        </childnode>
        <childnode refid="4361" relation="include">
        </childnode>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4368" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
        <childnode refid="4364" relation="include">
        </childnode>
        <childnode refid="4369" relation="include">
        </childnode>
        <childnode refid="4373" relation="include">
        </childnode>
        <childnode refid="4374" relation="include">
        </childnode>
      </node>
      <node id="4354">
        <label>Source/Azura/RenderSystem/Inc/Generic/PoolPrimitives.h</label>
        <link refid="_pool_primitives_8h_source"/>
      </node>
      <node id="4326">
        <label>Source/Azura/RenderSystem/Inc/Generic/ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4329" relation="include">
        </childnode>
        <childnode refid="4342" relation="include">
        </childnode>
      </node>
      <node id="4343">
        <label>Source/Azura/RenderSystem/Inc/Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="4344" relation="include">
        </childnode>
        <childnode refid="4333" relation="include">
        </childnode>
        <childnode refid="4351" relation="include">
        </childnode>
        <childnode refid="4326" relation="include">
        </childnode>
        <childnode refid="4352" relation="include">
        </childnode>
        <childnode refid="4353" relation="include">
        </childnode>
        <childnode refid="4330" relation="include">
        </childnode>
        <childnode refid="4329" relation="include">
        </childnode>
        <childnode refid="4356" relation="include">
        </childnode>
        <childnode refid="4358" relation="include">
        </childnode>
        <childnode refid="4365" relation="include">
        </childnode>
        <childnode refid="4363" relation="include">
        </childnode>
        <childnode refid="4362" relation="include">
        </childnode>
        <childnode refid="4367" relation="include">
        </childnode>
      </node>
      <node id="4368">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkPlatform.h</label>
        <link refid="_vk_platform_8h_source"/>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4371">
        <label>Source/Physics/Inc/Physics/Geometry/ClothMesh.h</label>
        <link refid="_cloth_mesh_8h_source"/>
      </node>
      <node id="4330">
        <label>Source/Azura/RenderSystem/Inc/Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4331" relation="include">
        </childnode>
        <childnode refid="4336" relation="include">
        </childnode>
      </node>
      <node id="4352">
        <label>Source/Azura/RenderSystem/Inc/Generic/Debug.h</label>
        <link refid="_debug_8h_source"/>
      </node>
      <node id="4348">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedImage.h</label>
        <link refid="_d3_d12_scoped_image_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
      </node>
      <node id="4349">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedSampler.h</label>
        <link refid="_d3_d12_scoped_sampler_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
      </node>
      <node id="4323">
        <label>Source/Containers/Inc/Containers/Array.h</label>
        <link refid="_array_8h"/>
        <childnode refid="4324" relation="include">
        </childnode>
        <childnode refid="4325" relation="include">
        </childnode>
      </node>
      <node id="4338">
        <label>Source/Azura/RenderSystem/Inc/Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
      </node>
      <node id="4359">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12TextureManager.h</label>
        <link refid="_d3_d12_texture_manager_8h_source"/>
      </node>
      <node id="4346">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedBuffer.h</label>
        <link refid="_d3_d12_scoped_buffer_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
      </node>
      <node id="4350">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ScopedShader.h</label>
        <link refid="_d3_d12_scoped_shader_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4333" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
      </node>
      <node id="4337">
        <label>Source/Azura/RenderSystem/Inc/Generic/Windows/Win32GLFWWindow.h</label>
        <link refid="_win32_g_l_f_w_window_8h_source"/>
      </node>
      <node id="4369">
        <label>Source/Physics/Inc/Physics/PBD/Cloth/Constraints.h</label>
        <link refid="_constraints_8h_source"/>
        <childnode refid="4370" relation="include">
        </childnode>
      </node>
      <node id="4336">
        <label>Source/Azura/RenderSystem/Inc/Generic/GLFWWindow.h</label>
        <link refid="_g_l_f_w_window_8h_source"/>
        <childnode refid="4337" relation="include">
        </childnode>
      </node>
      <node id="4363">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedPipeline.h</label>
        <link refid="_vk_scoped_pipeline_8h_source"/>
        <childnode refid="4355" relation="include">
        </childnode>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4374">
        <label>Source/Platform/Inc/Utils/FileReader.h</label>
        <link refid="_file_reader_8h_source"/>
      </node>
      <node id="4373">
        <label>Source/Physics/Inc/Physics/PBD/Common/SolvingView.h</label>
        <link refid="_solving_view_8h_source"/>
        <childnode refid="4370" relation="include">
        </childnode>
      </node>
      <node id="4344">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="4327" relation="include">
        </childnode>
        <childnode refid="4345" relation="include">
        </childnode>
        <childnode refid="4334" relation="include">
        </childnode>
        <childnode refid="4328" relation="include">
        </childnode>
        <childnode refid="4346" relation="include">
        </childnode>
        <childnode refid="4347" relation="include">
        </childnode>
        <childnode refid="4332" relation="include">
        </childnode>
        <childnode refid="4348" relation="include">
        </childnode>
        <childnode refid="4335" relation="include">
        </childnode>
        <childnode refid="4349" relation="include">
        </childnode>
        <childnode refid="4350" relation="include">
        </childnode>
        <childnode refid="4331" relation="include">
        </childnode>
        <childnode refid="4351" relation="include">
        </childnode>
      </node>
      <node id="4342">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkComputePool.h</label>
        <link refid="_vk_compute_pool_8h_source"/>
        <childnode refid="4340" relation="include">
        </childnode>
      </node>
      <node id="4360">
        <label>Source/Azura/RenderSystem/Inc/Vulkan/VkScopedImage.h</label>
        <link refid="_vk_scoped_image_8h_source"/>
        <childnode refid="4361" relation="include">
        </childnode>
        <childnode refid="4355" relation="include">
        </childnode>
        <childnode refid="4362" relation="include">
        </childnode>
        <childnode refid="4364" relation="include">
        </childnode>
      </node>
      <node id="4327">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12ComputePool.h</label>
        <link refid="_d3_d12_compute_pool_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
      </node>
      <node id="4334">
        <label>Source/Azura/RenderSystem/Inc/D3D12/D3D12DrawablePool.h</label>
        <link refid="_d3_d12_drawable_pool_8h_source"/>
        <childnode refid="4328" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_azura_1_1_containers_1_1_array" prot="public">Azura::Containers::Array</innerclass>
    <innerclass refid="class_azura_1_1_containers_1_1_array_1_1_iterator" prot="public">Azura::Containers::Array::Iterator</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_containers">Azura::Containers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/Allocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Containers<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="13" refid="class_azura_1_1_containers_1_1_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Enable<sp/>When<sp/>NewDeleteAllocator<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>Array(U32<sp/>maxSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>(<ref refid="class_azura_1_1_memory_1_1_allocator" kindref="compound">Memory::Allocator</ref>&amp;<sp/>alloc);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>~<ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>Ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>(<ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a2ba41cb0847f98adc56d52a84935fc1d" kindref="member">PushBack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>Type<sp/><ref refid="class_azura_1_1_containers_1_1_array_1a09bff62fce6b350e7e09b6c237f65258" kindref="member">Pop</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1aedce5aff495e80bebe1ec5cf44e2052e" kindref="member">FindFirst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a62009e8ab3e0a69edcfe3c018e41cab1" kindref="member">Remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1ac0126bd751769fc11c80b99f6b6a1d39" kindref="member">IsEmpty</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a72ac4554c6c84656569ed04ce6d5f94d" kindref="member">InsertAt</ref>(U32<sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>operator[](U32<sp/>idx);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>Type&amp;<sp/>operator[](U32<sp/>idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>Type*<sp/>Data();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>U32<sp/>GetSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>U32<sp/>GetMaxSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_maxSize;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_azura_1_1_containers_1_1_array_1_1_iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::random_access_iterator_tag;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/><sp/><sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Type*;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Type&amp;;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>:<sp/>mPtr(ptr),<sp/>mIndex(index)<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(<ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator=(<ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre<sp/>Increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++mIndex;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Post<sp/>Increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator++();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre<sp/>Decrement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator--()<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--mIndex;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Post<sp/>Decrement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator--(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator--();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr<sp/>==<sp/>rhs.mPtr<sp/>&amp;&amp;<sp/>mIndex<sp/>==<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&lt;<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&lt;=<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&gt;<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>&gt;=<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(mPtr,<sp/>mIndex<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mIndex<sp/>+=<sp/>idx;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mIndex<sp/>-<sp/>idx<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(mPtr,<sp/>mIndex<sp/>-<sp/>idx);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mIndex<sp/>-<sp/>idx<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mIndex<sp/>-=<sp/>idx;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(mPtr<sp/>==<sp/>rhs.mPtr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mIndex<sp/>-<sp/>rhs.mIndex;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/>copy(lhs);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy<sp/>-<sp/>rhs;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Type&amp;<sp/>operator*()<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr-&gt;operator[](mIndex);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Type*<sp/>operator-&gt;()<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mPtr-&gt;operator[](mIndex);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Type&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mPtr-&gt;operator[](mIndex<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array</ref>*<sp/>mPtr{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mIndex{-1};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a8999510e1a643c608c1805c28e01186e" kindref="member">Begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a72784503a762fe27bf765863e9881a23" kindref="member">End</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_UNIT_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>Type*<sp/>GetBackPtr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mBack;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>Type*<sp/>GetBasePtr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>U32<sp/>m_size{0};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>U32<sp/>m_maxSize{MaxSize};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>Memory::Allocator&amp;<sp/>m_allocator;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>Memory::UniqueArrayPtr&lt;Type&gt;<sp/>m_base{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Enable<sp/>When<sp/>NewDeleteAllocator<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;typename<sp/>Type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Array&lt;Type,<sp/>MaxSize&gt;::Array(const<sp/>U32<sp/>maxSize)<sp/>:<sp/>m_maxSize(maxSize),<sp/>m_allocator(alloc),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>m_base(m_allocator-&gt;NewObjects&lt;Type&gt;(maxSize))<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;::Array(Memory::Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_allocator(alloc),<sp/>m_base(m_allocator.RawNewArray&lt;Type&gt;(MaxSize))<sp/>{}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;::~Array()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>error<sp/>with<sp/>non<sp/>trivial<sp/>types<sp/>need<sp/>something<sp/>similar<sp/>to<sp/>typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::enable_if&lt;!std::is_fundamental&lt;Type&gt;::value&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;::Array(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>other)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_size(other.m_size),<sp/>m_maxSize(other.m_maxSize),<sp/>m_allocator(other.m_allocator)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>m_allocator.RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::memcpy(m_base.get(),<sp/>other.m_base.get(),<sp/>m_maxSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;::Array(Array&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_size(std::move(other.m_size)),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxSize(std::move(other.m_maxSize)),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_allocator(other.m_allocator),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_base(std::move(other.m_base))<sp/>{}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>error<sp/>with<sp/>non<sp/>trivial<sp/>types<sp/>need<sp/>something<sp/>similar<sp/>to<sp/>typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::enable_if&lt;!std::is_fundamental&lt;Type&gt;::value&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;&amp;<sp/>Array&lt;Type,<sp/>MaxSize&gt;::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>m_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.m_size;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>m_maxSize<sp/><sp/><sp/>=<sp/>other.m_maxSize;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>m_allocator<sp/>=<sp/>other.m_allocator;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>Memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>m_base<sp/>=<sp/>m_allocator.RawNewArray&lt;Type&gt;(m_maxSize);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>Contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>std::memcpy(m_base.get(),<sp/>other.m_base.get(),<sp/>m_maxSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Type));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">Array&lt;Type,<sp/>MaxSize&gt;&amp;<sp/>Array&lt;Type,<sp/>MaxSize&gt;::operator=(Array&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>m_size<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(other.m_size);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>m_maxSize<sp/><sp/><sp/>=<sp/>std::move(other.m_maxSize);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>m_allocator<sp/>=<sp/>other.m_allocator;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>m_base<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::move(other.m_base);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="295" refid="class_azura_1_1_containers_1_1_array_1a2ba41cb0847f98adc56d52a84935fc1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a2ba41cb0847f98adc56d52a84935fc1d" kindref="member">Array&lt;Type, MaxSize&gt;::PushBack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>assert(m_size<sp/>&lt;<sp/>m_maxSize);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>m_base[m_size]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>++m_size;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="303" refid="class_azura_1_1_containers_1_1_array_1a09bff62fce6b350e7e09b6c237f65258" refkind="member"><highlight class="normal">Type<sp/><ref refid="class_azura_1_1_containers_1_1_array_1a09bff62fce6b350e7e09b6c237f65258" kindref="member">Array&lt;Type, MaxSize&gt;::Pop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>assert(m_size<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>Type<sp/>data<sp/>=<sp/>m_base[m_size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>--m_size;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="313" refid="class_azura_1_1_containers_1_1_array_1aedce5aff495e80bebe1ec5cf44e2052e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1aedce5aff495e80bebe1ec5cf44e2052e" kindref="member">Array&lt;Type, MaxSize&gt;::FindFirst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>itr<sp/>=<sp/>0;<sp/>itr<sp/>&lt;<sp/>m_size;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>m_base[itr])<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>itr;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="327" refid="class_azura_1_1_containers_1_1_array_1a62009e8ab3e0a69edcfe3c018e41cab1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a62009e8ab3e0a69edcfe3c018e41cab1" kindref="member">Array&lt;Type, MaxSize&gt;::Remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/><ref refid="class_azura_1_1_containers_1_1_array_1aedce5aff495e80bebe1ec5cf44e2052e" kindref="member">FindFirst</ref>(data);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>itr<sp/>=<sp/>idx<sp/>+<sp/>1;<sp/>itr<sp/>&lt;<sp/>m_size;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_base[itr<sp/>-<sp/>1]<sp/>=<sp/>m_base[itr];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>--m_size;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="340" refid="class_azura_1_1_containers_1_1_array_1ac0126bd751769fc11c80b99f6b6a1d39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1ac0126bd751769fc11c80b99f6b6a1d39" kindref="member">Array&lt;Type, MaxSize&gt;::IsEmpty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="345" refid="class_azura_1_1_containers_1_1_array_1a72ac4554c6c84656569ed04ce6d5f94d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a72ac4554c6c84656569ed04ce6d5f94d" kindref="member">Array&lt;Type, MaxSize&gt;::InsertAt</ref>(U32<sp/>idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;=<sp/>m_size);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itr<sp/>=<sp/>m_size;<sp/>itr<sp/>&gt;<sp/>idx;<sp/>--itr)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>m_base[itr]<sp/>=<sp/>m_base[itr<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>m_base[idx]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">Type&amp;<sp/><ref refid="class_azura_1_1_containers_1_1_array" kindref="compound">Array&lt;Type, MaxSize&gt;::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&lt;<sp/>m_size);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[idx];</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">Type&amp;<sp/>Array&lt;Type,<sp/>MaxSize&gt;::operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>assert(idx<sp/>&lt;<sp/>m_size);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base[idx];</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">Type*<sp/>Array&lt;Type,<sp/>MaxSize&gt;::Data()<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_base.get();</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="373" refid="class_azura_1_1_containers_1_1_array_1a8999510e1a643c608c1805c28e01186e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Array&lt;Type, MaxSize&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a8999510e1a643c608c1805c28e01186e" kindref="member">Array&lt;Type, MaxSize&gt;::Begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>U32<sp/>MaxSize&gt;</highlight></codeline>
<codeline lineno="378" refid="class_azura_1_1_containers_1_1_array_1a72784503a762fe27bf765863e9881a23" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Array&lt;Type, MaxSize&gt;::Iterator</ref><sp/><ref refid="class_azura_1_1_containers_1_1_array_1a72784503a762fe27bf765863e9881a23" kindref="member">Array&lt;Type, MaxSize&gt;::End</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_array_1_1_iterator" kindref="compound">Iterator</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_size);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Containers/Inc/Containers/Array.h"/>
  </compounddef>
</doxygen>
