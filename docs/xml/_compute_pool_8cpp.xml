<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_compute_pool_8cpp" kind="file" language="C++">
    <compoundname>ComputePool.cpp</compoundname>
    <includes refid="_compute_pool_8h" local="yes">Generic/ComputePool.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="_log_8h" local="yes">Log/Log.h</includes>
    <includes refid="_texture_manager_8h" local="yes">Generic/TextureManager.h</includes>
    <includes refid="_vector_8h" local="yes">Containers/Vector.h</includes>
    <incdepgraph>
      <node id="2580">
        <label>functional</label>
      </node>
      <node id="2581">
        <label>iterator</label>
      </node>
      <node id="2594">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2589">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2588" relation="include">
        </childnode>
        <childnode refid="2590" relation="include">
        </childnode>
        <childnode refid="2591" relation="include">
        </childnode>
        <childnode refid="2592" relation="include">
        </childnode>
        <childnode refid="2593" relation="include">
        </childnode>
      </node>
      <node id="2602">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2583">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2580" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2585" relation="include">
        </childnode>
      </node>
      <node id="2595">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2578">
        <label>cassert</label>
      </node>
      <node id="2592">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2586">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2577" relation="include">
        </childnode>
        <childnode refid="2587" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2589" relation="include">
        </childnode>
        <childnode refid="2594" relation="include">
        </childnode>
        <childnode refid="2595" relation="include">
        </childnode>
        <childnode refid="2596" relation="include">
        </childnode>
        <childnode refid="2593" relation="include">
        </childnode>
      </node>
      <node id="2601">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="2602" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2585">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2596">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2587">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2588" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2593">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2588">
        <label>tuple</label>
      </node>
      <node id="2582">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2578" relation="include">
        </childnode>
        <childnode refid="2579" relation="include">
        </childnode>
        <childnode refid="2583" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2603">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="2583" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2599">
        <label>vector</label>
      </node>
      <node id="2577">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2578" relation="include">
        </childnode>
        <childnode refid="2579" relation="include">
        </childnode>
        <childnode refid="2580" relation="include">
        </childnode>
        <childnode refid="2581" relation="include">
        </childnode>
        <childnode refid="2582" relation="include">
        </childnode>
        <childnode refid="2583" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2585" relation="include">
        </childnode>
      </node>
      <node id="2575">
        <label>Source/Azura/RenderSystem/Src/Generic/ComputePool.cpp</label>
        <link refid="_compute_pool_8cpp"/>
        <childnode refid="2576" relation="include">
        </childnode>
        <childnode refid="2597" relation="include">
        </childnode>
        <childnode refid="2598" relation="include">
        </childnode>
        <childnode refid="2600" relation="include">
        </childnode>
        <childnode refid="2577" relation="include">
        </childnode>
      </node>
      <node id="2598">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2599" relation="include">
        </childnode>
      </node>
      <node id="2590">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2584">
        <label>Types.h</label>
      </node>
      <node id="2576">
        <label>Generic/ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="2577" relation="include">
        </childnode>
        <childnode refid="2586" relation="include">
        </childnode>
        <childnode refid="2584" relation="include">
        </childnode>
      </node>
      <node id="2597">
        <label>algorithm</label>
      </node>
      <node id="2600">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="2584" relation="include">
        </childnode>
        <childnode refid="2601" relation="include">
        </childnode>
        <childnode refid="2603" relation="include">
        </childnode>
        <childnode refid="2577" relation="include">
        </childnode>
        <childnode refid="2586" relation="include">
        </childnode>
        <childnode refid="2598" relation="include">
        </childnode>
      </node>
      <node id="2579">
        <label>cstring</label>
      </node>
      <node id="2591">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Generic/ComputePool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Log/Log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/TextureManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Containers/Vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">ComputePoolCreateInfo::ComputePoolCreateInfo(Memory::Allocator&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>:<sp/>m_computePasses(alloc)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">ComputePool::ComputePool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComputePoolCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescriptorCount<sp/>descriptorCount,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>allocator)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>:<sp/>m_descriptorCount(descriptorCount),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_computePasses(createInfo.m_computePasses,<sp/>allocator),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_uniformBufferInfos(descriptorCount.m_numUniformSlots,<sp/>allocator),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>m_textureBufferInfos(allocator),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>m_samplerInfos(allocator),</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bufferUpdates(allocator),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>m_launchDims(createInfo.m_launchDims),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>m_byteSize(createInfo.m_byteSize),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allocator(allocator)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>m_bufferUpdates.Reserve(m_descriptorCount.m_numSampledImageSlots<sp/>+<sp/>m_descriptorCount.m_numUniformSlots);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>m_textureBufferInfos.Reserve(m_descriptorCount.m_numSampledImageSlots);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>m_samplerInfos.Reserve(m_descriptorCount.m_numSamplerSlots);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputePool::BindUniformData(SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;U8&gt;&amp;<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>BindUniformData(slot,<sp/>buffer.Data(),<sp/>buffer.GetSize());</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputePool::UpdateUniformData(SlotID<sp/>slot,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;U8&gt;&amp;<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>UpdateUniformData(slot,<sp/>buffer.Data(),<sp/>buffer.GetSize());</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">U32<sp/>ComputePool::GetSingleUniformBufferInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorSlot&amp;<sp/>slot)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ubInfo<sp/>:<sp/>m_uniformBufferInfos)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ubInfo.m_binding<sp/>==<sp/>slot.m_bindIdx<sp/>&amp;&amp;<sp/>ubInfo.m_set<sp/>==<sp/>slot.m_setIdx)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>Update<sp/>Slot<sp/>that<sp/>was<sp/>never<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">U32<sp/>ComputePool::GetSingleTextureBufferInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorSlot&amp;<sp/>slot)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>U32<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>textureBufferInfo<sp/>:<sp/>m_textureBufferInfos)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textureBufferInfo.m_binding<sp/>==<sp/>slot.m_bindIdx<sp/>&amp;&amp;<sp/>textureBufferInfo.m_set<sp/>==<sp/>slot.m_setIdx)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>++idx;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>Update<sp/>Slot<sp/>that<sp/>was<sp/>never<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">U32<sp/>ComputePool::GetSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_byteSize;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">Memory::Allocator&amp;<sp/>ComputePool::GetAllocator()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allocator;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ComputePool::CanRenderInPass(U32<sp/>renderPassId)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pass<sp/>:<sp/>m_computePasses)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass<sp/>==<sp/>renderPassId)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Generic/ComputePool.cpp"/>
  </compounddef>
</doxygen>
