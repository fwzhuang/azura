<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_range_allocator__test_8cpp" kind="file" language="C++">
    <compoundname>RangeAllocator_test.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes refid="_range_allocator__test_8h" local="yes">RangeAllocator_test.h</includes>
    <includes local="yes">Types.h</includes>
    <incdepgraph>
      <node id="4393">
        <label>functional</label>
      </node>
      <node id="4386">
        <label>limits</label>
      </node>
      <node id="4391">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="4392" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
        <childnode refid="4395" relation="include">
        </childnode>
      </node>
      <node id="4384">
        <label>Source/Common/Test/RangeAllocator_test.cpp</label>
        <link refid="_range_allocator__test_8cpp"/>
        <childnode refid="4385" relation="include">
        </childnode>
        <childnode refid="4386" relation="include">
        </childnode>
        <childnode refid="4387" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
      </node>
      <node id="4389">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4390" relation="include">
        </childnode>
      </node>
      <node id="4392">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4393" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
        <childnode refid="4394" relation="include">
        </childnode>
      </node>
      <node id="4388">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="4389" relation="include">
        </childnode>
        <childnode refid="4390" relation="include">
        </childnode>
      </node>
      <node id="4394">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4395">
        <label>vector</label>
      </node>
      <node id="4396">
        <label>gtest/gtest.h</label>
      </node>
      <node id="4385">
        <label>iostream</label>
      </node>
      <node id="4390">
        <label>Types.h</label>
      </node>
      <node id="4387">
        <label>RangeAllocator_test.h</label>
        <link refid="_range_allocator__test_8h_source"/>
        <childnode refid="4388" relation="include">
        </childnode>
        <childnode refid="4391" relation="include">
        </childnode>
        <childnode refid="4396" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_sample" prot="public">Sample</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_range_allocator__test_8cpp_1ac6678fb997768bedeee9a14e90e7565e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeAllocatorTest, Constructs)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref></type>
        </param>
        <param>
          <type>Constructs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/RangeAllocator_test.cpp" line="17" column="1" bodyfile="Source/Common/Test/RangeAllocator_test.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="_range_allocator__test_8cpp_1a581708342a1e155be0b73853defab73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeAllocatorTest, AllocateNormalData)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref></type>
        </param>
        <param>
          <type>AllocateNormalData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/RangeAllocator_test.cpp" line="22" column="1" bodyfile="Source/Common/Test/RangeAllocator_test.cpp" bodystart="22" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="_range_allocator__test_8cpp_1a338f5bcc00abc5a8fe172cfdda1c0911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(RangeAllocatorTest, DeallocateNormalData)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref></type>
        </param>
        <param>
          <type>DeallocateNormalData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Common/Test/RangeAllocator_test.cpp" line="52" column="1" bodyfile="Source/Common/Test/RangeAllocator_test.cpp" bodystart="52" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RangeAllocator_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg1;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg2;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref>()<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>arg1<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>arg2<sp/>=<sp/>16.0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">TEST(<ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref>,<sp/>Constructs)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref><sp/>rangeAllocator<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">TEST(<ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref>,<sp/>AllocateNormalData)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref><sp/>rangeAllocator<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basePtr<sp/><sp/>=<sp/>rangeAllocator.GetBasePtr();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>baseSize<sp/>=<sp/>rangeAllocator.GetSize();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>rangeAllocator.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>ASSERT_NE(ptr,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>ASSERT_EQ(*ptr,<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>*ptr<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ASSERT_EQ(*ptr,<sp/>99.0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>freeRanges<sp/><sp/><sp/><sp/><sp/>=<sp/>rangeAllocator.GetFreeRanges();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>occupiedRanges<sp/>=<sp/>rangeAllocator.GetOccupiedRanges();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges.size(),<sp/>1u);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[0].m_offset,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[0].m_size,<sp/>baseSize<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ASSERT_EQ(occupiedRanges.size(),<sp/>1u);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>ASSERT_EQ(occupiedRanges[0].m_offset,<sp/>0u);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>ASSERT_EQ(occupiedRanges[0].m_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ASSERT_EQ(Azura::AddressPtr(ptr.get()),<sp/>basePtr);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">TEST(<ref refid="class_range_allocator_test" kindref="compound">RangeAllocatorTest</ref>,<sp/>DeallocateNormalData)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref><sp/>myBuffer<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_heap_memory_buffer" kindref="compound">Azura::Memory::HeapMemoryBuffer</ref>(256);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref><sp/>rangeAllocator<sp/>=<sp/><ref refid="class_azura_1_1_memory_1_1_range_allocator" kindref="compound">Azura::Memory::RangeAllocator</ref>(myBuffer,<sp/>128);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basePtr<sp/><sp/>=<sp/>rangeAllocator.GetBasePtr();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>baseSize<sp/>=<sp/>rangeAllocator.GetSize();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BLock<sp/>Allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>rangeAllocator.<ref refid="class_azura_1_1_memory_1_1_allocator_1a499fb3b777375a6b0d32cd8143e1586b" kindref="member">New</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>freeRanges<sp/><sp/><sp/><sp/><sp/>=<sp/>rangeAllocator.GetFreeRanges();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>occupiedRanges<sp/>=<sp/>rangeAllocator.GetOccupiedRanges();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges.size(),<sp/>2u);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[0].m_offset,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[0].m_size,<sp/>baseSize<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[1].m_offset,<sp/>0u);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ASSERT_EQ(freeRanges[1].m_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ASSERT_EQ(occupiedRanges.size(),<sp/>0u);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Common/Test/RangeAllocator_test.cpp"/>
  </compounddef>
</doxygen>
