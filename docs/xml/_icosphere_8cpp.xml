<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_icosphere_8cpp" kind="file" language="C++">
    <compoundname>Icosphere.cpp</compoundname>
    <includes refid="_icosphere_8h" local="yes">Math/Icosphere.h</includes>
    <includes local="no">array</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <includes refid="_raw_storage_format_8h" local="yes">Core/RawStorageFormat.h</includes>
    <incdepgraph>
      <node id="5349">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="5350" relation="include">
        </childnode>
        <childnode refid="5341" relation="include">
        </childnode>
      </node>
      <node id="5343">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="5341" relation="include">
        </childnode>
        <childnode refid="5344" relation="include">
        </childnode>
        <childnode refid="5345" relation="include">
        </childnode>
        <childnode refid="5346" relation="include">
        </childnode>
        <childnode refid="5347" relation="include">
        </childnode>
        <childnode refid="5348" relation="include">
        </childnode>
      </node>
      <node id="5347">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="5353">
        <label>map</label>
      </node>
      <node id="5348">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="5344">
        <label>tuple</label>
      </node>
      <node id="5351">
        <label>vector</label>
      </node>
      <node id="5352">
        <label>array</label>
      </node>
      <node id="5342">
        <label>Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="5341" relation="include">
        </childnode>
        <childnode refid="5343" relation="include">
        </childnode>
      </node>
      <node id="5339">
        <label>Source/Math/Src/Icosphere.cpp</label>
        <link refid="_icosphere_8cpp"/>
        <childnode refid="5340" relation="include">
        </childnode>
        <childnode refid="5352" relation="include">
        </childnode>
        <childnode refid="5351" relation="include">
        </childnode>
        <childnode refid="5353" relation="include">
        </childnode>
        <childnode refid="5354" relation="include">
        </childnode>
        <childnode refid="5343" relation="include">
        </childnode>
      </node>
      <node id="5354">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="5349" relation="include">
        </childnode>
      </node>
      <node id="5345">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="5341">
        <label>Types.h</label>
      </node>
      <node id="5350">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="5340">
        <label>Math/Icosphere.h</label>
        <link refid="_icosphere_8h_source"/>
        <childnode refid="5341" relation="include">
        </childnode>
        <childnode refid="5342" relation="include">
        </childnode>
        <childnode refid="5349" relation="include">
        </childnode>
        <childnode refid="5351" relation="include">
        </childnode>
      </node>
      <node id="5346">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_math">Azura::Math</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Math/Icosphere.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Core/RawStorageFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Math<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>Ref:<sp/>https://schneide.blog/2016/07/15/generating-an-icosphere-in-c/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>0.525731112119133606f;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Z<sp/>=<sp/>0.850650808352039932f;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawStorageFormat<sp/>VERTEX_FORMAT<sp/>=<sp/>RawStorageFormat::R32G32B32A32_FLOAT;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawStorageFormat<sp/>NORMAL_FORMAT<sp/>=<sp/>RawStorageFormat::R32G32B32_FLOAT;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawStorageFormat<sp/>INDEX_FORMAT<sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Lookup<sp/>=<sp/>std::map&lt;std::pair&lt;U32,<sp/>U32&gt;,<sp/>U32&gt;;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Vector4f,<sp/>12&gt;<sp/>BASE_VERTICES<sp/>=</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>Vector4f{-X,<sp/>N,<sp/>Z,<sp/>1.0f},<sp/>Vector4f{X,<sp/>N,<sp/>Z,<sp/>1.0f},<sp/>Vector4f{-X,<sp/>N,<sp/>-Z,<sp/>1.0f},<sp/>Vector4f{X,<sp/>N,<sp/>-Z,<sp/>1.0f},</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>Vector4f{N,<sp/>Z,<sp/>X,<sp/>1.0f},<sp/>Vector4f{N,<sp/>Z,<sp/>-X,<sp/>1.0f},<sp/>Vector4f{N,<sp/>-Z,<sp/>X,<sp/>1.0f},<sp/>Vector4f{N,<sp/>-Z,<sp/>-X,<sp/>1.0f},</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>Vector4f{Z,<sp/>X,<sp/>N,<sp/>1.0f},<sp/>Vector4f{-Z,<sp/>X,<sp/>N,<sp/>1.0f},<sp/>Vector4f{Z,<sp/>-X,<sp/>N,<sp/>1.0f},<sp/>Vector4f{-Z,<sp/>-X,<sp/>N,<sp/>1.0f}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;Vector3u,<sp/>20&gt;<sp/>BASE_TRIANGLES<sp/>=</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>Vector3u{0,<sp/>4,<sp/>1},<sp/>Vector3u{0,<sp/>9,<sp/>4},<sp/>Vector3u{9,<sp/>5,<sp/>4},<sp/>Vector3u{4,<sp/>5,<sp/>8},<sp/>Vector3u{4,<sp/>8,<sp/>1},</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>Vector3u{8,<sp/>10,<sp/>1},<sp/>Vector3u{8,<sp/>3,<sp/>10},<sp/>Vector3u{5,<sp/>3,<sp/>8},<sp/>Vector3u{5,<sp/>2,<sp/>3},<sp/>Vector3u{2,<sp/>7,<sp/>3},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>Vector3u{7,<sp/>10,<sp/>3},<sp/>Vector3u{7,<sp/>6,<sp/>10},<sp/>Vector3u{7,<sp/>11,<sp/>6},<sp/>Vector3u{11,<sp/>0,<sp/>6},<sp/>Vector3u{0,<sp/>1,<sp/>6},</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>Vector3u{6,<sp/>1,<sp/>10},<sp/>Vector3u{9,<sp/>0,<sp/>11},<sp/>Vector3u{9,<sp/>11,<sp/>2},<sp/>Vector3u{9,<sp/>2,<sp/>5},<sp/>Vector3u{7,<sp/>2,<sp/>11}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">U32<sp/>VertexForEdge(Lookup&amp;<sp/>lookup,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Vector4f&gt;&amp;<sp/>vertices,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>first,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>Lookup::key_type<sp/>key(first,<sp/>second);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key.first<sp/>&gt;<sp/>key.second)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(key.first,<sp/>key.second);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inserted<sp/>=<sp/>lookup.insert({key,<sp/>U32(vertices.size())});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inserted.second)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>edge0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertices[first];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>edge1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertices[second];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3f<sp/>data<sp/>=<sp/>Transform::Downgrade(edge0<sp/>+<sp/>edge1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point<sp/><sp/><sp/><sp/>=<sp/>mathfu::NormalizedHelper(data);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.emplace_back(point,<sp/>1.0f);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inserted.first-&gt;second;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">std::vector&lt;Vector3u&gt;<sp/>SubDivide(std::vector&lt;Vector4f&gt;&amp;<sp/>vertices,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Vector3u&gt;<sp/>triangles)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>Lookup<sp/>lookup;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::vector&lt;Vector3u&gt;<sp/>result;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>result.reserve(triangles.size()<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>each<sp/>:<sp/>triangles)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector3u<sp/>mid;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge<sp/>=<sp/>0;<sp/>edge<sp/>&lt;<sp/>3;<sp/>++edge)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mid[edge]<sp/><sp/><sp/>=<sp/>VertexForEdge(lookup,<sp/>vertices,<sp/>each[edge],<sp/>each[(edge<sp/>+<sp/>1)<sp/>%<sp/>3]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>result.emplace_back(each[0],<sp/>mid[0],<sp/>mid[2]);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>result.emplace_back(each[1],<sp/>mid[1],<sp/>mid[0]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>result.emplace_back(each[2],<sp/>mid[2],<sp/>mid[1]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>result.emplace_back(mid[0],<sp/>mid[1],<sp/>mid[2]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">IcoSphere::IcoSphere(U32<sp/>subDivisions)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>:<sp/>m_vertices(BASE_VERTICES.begin(),<sp/>BASE_VERTICES.end()),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>m_triangles(BASE_TRIANGLES.begin(),<sp/>BASE_TRIANGLES.end())<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>m_vertices.reserve(10<sp/>*<sp/>U32(std::pow(4,<sp/>subDivisions)));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>m_normals.reserve(10<sp/>*<sp/>U32(std::pow(4,<sp/>subDivisions)));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_triangles.reserve(10<sp/>*<sp/>U32(std::pow(4,<sp/>subDivisions)));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>subDivisions;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m_triangles<sp/>=<sp/>SubDivide(m_vertices,<sp/>m_triangles);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vertex:<sp/>m_vertices)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_normals.push_back(Transform::Downgrade(vertex).Normalized());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">U32<sp/>IcoSphere::VertexDataSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_vertices.size()<sp/>*<sp/>GetFormatSize(VERTEX_FORMAT));</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">U32<sp/>IcoSphere::IndexDataSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_triangles.size()<sp/>*<sp/>GetFormatSize(INDEX_FORMAT)<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">U32<sp/>IcoSphere::NormalDataSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_normals.size()<sp/>*<sp/>GetFormatSize(NORMAL_FORMAT));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>IcoSphere::VertexData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_vertices.data());</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>IcoSphere::IndexData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_triangles.data());</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>IcoSphere::NormalData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_normals.data());</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">RawStorageFormat<sp/>IcoSphere::GetVertexFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VERTEX_FORMAT;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">RawStorageFormat<sp/>IcoSphere::GetIndexFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INDEX_FORMAT;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">RawStorageFormat<sp/>IcoSphere::GetNormalFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NORMAL_FORMAT;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">U32<sp/>IcoSphere::UVDataSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Not<sp/>Implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>IcoSphere::UVData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Not<sp/>Implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">RawStorageFormat<sp/>IcoSphere::GetUVFormat()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Not<sp/>Implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RawStorageFormat::UNKNOWN;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">U32<sp/>IcoSphere::GetVertexCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_vertices.size());</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">U32<sp/>IcoSphere::GetIndexCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_triangles.size()<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">U32<sp/>IcoSphere::TotalDataSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VertexDataSize()<sp/>+<sp/>IndexDataSize()<sp/>+<sp/>NormalDataSize();</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Math/Src/Icosphere.cpp"/>
  </compounddef>
</doxygen>
