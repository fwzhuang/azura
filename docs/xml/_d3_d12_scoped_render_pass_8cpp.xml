<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_d3_d12_scoped_render_pass_8cpp" kind="file" language="C++">
    <compoundname>D3D12ScopedRenderPass.cpp</compoundname>
    <includes refid="_d3_d12_scoped_render_pass_8h" local="yes">D3D12/D3D12ScopedRenderPass.h</includes>
    <includes refid="_d3_d12_macros_8h" local="yes">D3D12/D3D12Macros.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_d3_d12_type_mapping_8h" local="yes">D3D12/D3D12TypeMapping.h</includes>
    <includes refid="_d3_d12_scoped_swap_chain_8h" local="yes">D3D12/D3D12ScopedSwapChain.h</includes>
    <includes refid="_d3_d12_scoped_image_8h" local="yes">D3D12/D3D12ScopedImage.h</includes>
    <includes refid="_d3_d12_scoped_shader_8h" local="yes">D3D12/D3D12ScopedShader.h</includes>
    <incdepgraph>
      <node id="2380">
        <label>d3dx12.h</label>
        <link refid="d3dx12_8h_source"/>
        <childnode refid="2352" relation="include">
        </childnode>
      </node>
      <node id="2361">
        <label>functional</label>
      </node>
      <node id="2351">
        <label>windows.h</label>
      </node>
      <node id="2362">
        <label>iterator</label>
      </node>
      <node id="2376">
        <label>D3D12/D3D12ScopedImage.h</label>
        <link refid="_d3_d12_scoped_image_8h_source"/>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
      </node>
      <node id="2373">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2392">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="2393" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2384">
        <label>Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="2366" relation="include">
        </childnode>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
      </node>
      <node id="2350">
        <label>D3D12/D3D12Core.h</label>
        <link refid="_d3_d12_core_8h_source"/>
        <childnode refid="2351" relation="include">
        </childnode>
        <childnode refid="2352" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
      </node>
      <node id="2368">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2367" relation="include">
        </childnode>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2370" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2352">
        <label>d3d12.h</label>
      </node>
      <node id="2394">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2364">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2374">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2359">
        <label>cassert</label>
      </node>
      <node id="2371">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2355">
        <label>wrl.h</label>
      </node>
      <node id="2390">
        <label>stdexcept</label>
      </node>
      <node id="2357">
        <label>Generic/GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
        <childnode refid="2373" relation="include">
        </childnode>
        <childnode refid="2374" relation="include">
        </childnode>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2395">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2377">
        <label>D3D12/D3D12ScopedShader.h</label>
        <link refid="_d3_d12_scoped_shader_8h_source"/>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2380" relation="include">
        </childnode>
      </node>
      <node id="2393">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2365">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2354">
        <label>D3Dcompiler.h</label>
      </node>
      <node id="2375">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2346">
        <label>D3D12/D3D12ScopedRenderPass.h</label>
        <link refid="_d3_d12_scoped_render_pass_8h_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
        <childnode refid="2382" relation="include">
        </childnode>
      </node>
      <node id="2366">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2367" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2372">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2387">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="2345">
        <label>Source/Azura/RenderSystem/Src/D3D12/D3D12ScopedRenderPass.cpp</label>
        <link refid="_d3_d12_scoped_render_pass_8cpp"/>
        <childnode refid="2346" relation="include">
        </childnode>
        <childnode refid="2388" relation="include">
        </childnode>
        <childnode refid="2391" relation="include">
        </childnode>
        <childnode refid="2392" relation="include">
        </childnode>
        <childnode refid="2396" relation="include">
        </childnode>
        <childnode refid="2382" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
      </node>
      <node id="2382">
        <label>D3D12/D3D12ScopedSwapChain.h</label>
        <link refid="_d3_d12_scoped_swap_chain_8h_source"/>
        <childnode refid="2383" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
      </node>
      <node id="2367">
        <label>tuple</label>
      </node>
      <node id="2363">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2388">
        <label>D3D12/D3D12Macros.h</label>
        <link refid="_d3_d12_macros_8h_source"/>
        <childnode refid="2389" relation="include">
        </childnode>
        <childnode refid="2390" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2397">
        <label>optional</label>
      </node>
      <node id="2391">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2349">
        <label>vector</label>
      </node>
      <node id="2358">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2362" relation="include">
        </childnode>
        <childnode refid="2363" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2348">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2353">
        <label>dxgi1_4.h</label>
      </node>
      <node id="2379">
        <label>wrl/client.h</label>
      </node>
      <node id="2385">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
      </node>
      <node id="2369">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2347">
        <label>Types.h</label>
      </node>
      <node id="2389">
        <label>winerror.h</label>
      </node>
      <node id="2383">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2384" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
      </node>
      <node id="2381">
        <label>D3D12/D3D12ScopedCommandBuffer.h</label>
        <link refid="_d3_d12_scoped_command_buffer_8h_source"/>
        <childnode refid="2350" relation="include">
        </childnode>
      </node>
      <node id="2396">
        <label>D3D12/D3D12TypeMapping.h</label>
        <link refid="_d3_d12_type_mapping_8h_source"/>
        <childnode refid="2397" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
      </node>
      <node id="2386">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
      </node>
      <node id="2360">
        <label>cstring</label>
      </node>
      <node id="2356">
        <label>shellapi.h</label>
      </node>
      <node id="2378">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="2357" relation="include">
        </childnode>
      </node>
      <node id="2370">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <innernamespace refid="namespace_azura_1_1_d3_d12">Azura::D3D12</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedRenderPass.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12Macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12TypeMapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedSwapChain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedImage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;D3D12/D3D12ScopedShader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_microsoft_1_1_w_r_l" kindref="compound">Microsoft::WRL</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">D3D12<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">D3D12ScopedRenderPass::D3D12ScopedRenderPass(U32<sp/>idx,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>internalId,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12ScopedSwapChain&amp;<sp/>swapChain,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Memory::Allocator&amp;<sp/>mainAllocator,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log<sp/>logger)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>:<sp/>log_D3D12RenderSystem(std::move(logger)),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>m_id(idx),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>m_internalId(internalId),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapChainRef(swapChain),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rootSignatureTable(mainAllocator),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderOutputInfo(mainAllocator),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>m_passShaders(mainAllocator),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>m_passInputs(mainAllocator),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allRenderInputs(mainAllocator)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::Create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;RenderTargetCreateInfo&gt;&amp;<sp/>pipelineBuffers,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedImage&gt;&amp;<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorSlot&gt;&amp;<sp/>descriptorSlots,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorTableEntry&gt;&amp;<sp/>descriptorSetTable,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedShader&gt;&amp;<sp/>allShaders,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT<sp/>rtvDescriptorSize,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT<sp/>dsvDescriptorSize)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>CreateBase(device,<sp/>createInfo,<sp/>descriptorSlots,<sp/>descriptorSetTable,<sp/>pipelineBuffers,<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allShaders);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>U32<sp/>numDSV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>U32<sp/>numRTV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>output<sp/>:<sp/>createInfo.m_outputTargets)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetBuffer<sp/>=<sp/>pipelineBuffers[output];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthOrStencilComponent(targetBuffer.m_format))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++numDSV;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>++numRTV;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>rtvHeapDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>rtvHeapDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>numRTV;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>rtvHeapDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_RTV;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>rtvHeapDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_NONE;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateDescriptorHeap(&amp;rtvHeapDesc,<sp/>IID_PPV_ARGS(&amp;m_rtvHeap)),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>RTV<sp/>Heap<sp/>for<sp/>Render<sp/>Pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>dsvHeapDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>dsvHeapDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>numDSV;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>dsvHeapDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_DSV;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>dsvHeapDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_NONE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateDescriptorHeap(&amp;dsvHeapDesc,<sp/>IID_PPV_ARGS(&amp;m_dsvHeap)),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>DSV<sp/>Heap<sp/>for<sp/>Render<sp/>Pass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>rtvHandle(m_rtvHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>dsvHandle(m_dsvHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>output<sp/>:<sp/>createInfo.m_outputTargets)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetBuffer<sp/>=<sp/>pipelineBuffers[output];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>gpuTexture<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pipelineBufferImages[output];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthOrStencilComponent(targetBuffer.m_format))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dsvDesc<sp/>=<sp/>D3D12ScopedImage::GetDSV(targetBuffer.m_format,<sp/>ImageViewType::ImageView2D,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>device-&gt;CreateDepthStencilView(gpuTexture.Real(),<sp/>&amp;dsvDesc,<sp/>dsvHandle);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dsvHandle.Offset(1,<sp/>dsvDescriptorSize);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_hasDepth<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_depthOutputs.push_back(gpuTexture);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderOutputs.push_back(gpuTexture);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rtvDesc<sp/>=<sp/>D3D12ScopedImage::GetRTV(targetBuffer.m_format,<sp/>ImageViewType::ImageView2D,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>device-&gt;CreateRenderTargetView(gpuTexture.Real(),<sp/>&amp;rtvDesc,<sp/>rtvHandle);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>rtvHandle.Offset(1,<sp/>rtvDescriptorSize);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>D3D12ScopedCommandBuffer<sp/>primaryCmdBuffer<sp/>=<sp/>D3D12ScopedCommandBuffer(device,<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>primaryCmdBuffer.CreateGraphicsCommandList(device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>m_commandBuffers.push_back(primaryCmdBuffer);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::CreateForSwapChain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;RenderTargetCreateInfo&gt;&amp;<sp/>pipelineBuffers,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedImage&gt;&amp;<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D3D12ScopedImage&amp;<sp/>depthImage,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorSlot&gt;&amp;<sp/>descriptorSlots,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorTableEntry&gt;&amp;<sp/>descriptorSetTable,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedShader&gt;&amp;<sp/>allShaders,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT<sp/>rtvDescriptorSize,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT<sp/>dsvDescriptorSize)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>UNUSED(dsvDescriptorSize);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>CreateBase(device,<sp/>createInfo,<sp/>descriptorSlots,<sp/>descriptorSetTable,<sp/>pipelineBuffers,<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allShaders);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>m_hasDepth<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>m_isTargetSwapChain<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>rtvHeapDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>rtvHeapDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GLOBAL_INFLIGHT_FRAMES;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>rtvHeapDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_RTV;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>rtvHeapDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_NONE;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateDescriptorHeap(&amp;rtvHeapDesc,<sp/>IID_PPV_ARGS(&amp;m_rtvHeap)),</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>RTV<sp/>Heap<sp/>for<sp/>Swap<sp/>Chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Frame<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>rtvHandle(m_rtvHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>RTV<sp/>for<sp/>each<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>GLOBAL_INFLIGHT_FRAMES;<sp/>idx++)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Resource&gt;<sp/>renderTarget<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_swapChainRef.get().RealComPtr()-&gt;GetBuffer(idx,<sp/>IID_PPV_ARGS(&amp;renderTarget)),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>get<sp/>swapchain<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>m_swapChainImageResources.push_back(renderTarget.Get());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>device-&gt;CreateRenderTargetView(renderTarget.Get(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rtvHandle);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>rtvHandle.Offset(1,<sp/>rtvDescriptorSize);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>idx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>GLOBAL_INFLIGHT_FRAMES;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12ScopedCommandBuffer<sp/>primaryCmdBuffer<sp/>=<sp/>D3D12ScopedCommandBuffer(device,<sp/>D3D12_COMMAND_LIST_TYPE_DIRECT,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>primaryCmdBuffer.CreateGraphicsCommandList(device,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>m_commandBuffers.push_back(primaryCmdBuffer);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Depth<sp/>View<sp/>for<sp/>Swapchain<sp/>if<sp/>Requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depthImage.GetFormat()<sp/>!=<sp/>RawStorageFormat::UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>D3D12_DESCRIPTOR_HEAP_DESC<sp/>dsvHeapDesc<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>dsvHeapDesc.NumDescriptors<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>dsvHeapDesc.Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_TYPE_DSV;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>dsvHeapDesc.Flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>D3D12_DESCRIPTOR_HEAP_FLAG_NONE;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateDescriptorHeap(&amp;dsvHeapDesc,<sp/>IID_PPV_ARGS(&amp;m_dsvHeap)),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>DSV<sp/>Heap<sp/>for<sp/>Swap<sp/>Chain&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>dsvHandle(m_dsvHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dsvDesc<sp/>=<sp/>D3D12ScopedImage::GetDSV(depthImage.GetFormat(),<sp/>ImageViewType::ImageView2D,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>device-&gt;CreateDepthStencilView(depthImage.Real(),<sp/>&amp;dsvDesc,<sp/>dsvHandle);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hasDepth<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">U32<sp/>D3D12ScopedRenderPass::GetId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_id;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">U32<sp/>D3D12ScopedRenderPass::GetInternalId()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_internalId;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">ID3D12GraphicsCommandList*<sp/>D3D12ScopedRenderPass::GetPrimaryGraphicsCommandList(U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_commandBuffers[idx].GetGraphicsCommandList();</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DescriptorCount&amp;<sp/>D3D12ScopedRenderPass::GetDescriptorCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_descriptorCount;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">ID3D12RootSignature*<sp/>D3D12ScopedRenderPass::GetRootSignature()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rootSignature.Get();</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordImageAcquireBarrier(ID3D12GraphicsCommandList*<sp/>commandList,<sp/>U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>CD3DX12_RESOURCE_BARRIER<sp/>startBarrier<sp/>=<sp/>CD3DX12_RESOURCE_BARRIER::Transition(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapChainImageResources[idx],</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_PRESENT,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_RENDER_TARGET);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>commandList-&gt;ResourceBarrier(1,<sp/>&amp;startBarrier);</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordPresentBarrier(ID3D12GraphicsCommandList*<sp/>commandList,<sp/>U32<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>CD3DX12_RESOURCE_BARRIER<sp/>endBarrier<sp/>=<sp/>CD3DX12_RESOURCE_BARRIER::Transition(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_swapChainImageResources[idx],</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_RENDER_TARGET,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_RESOURCE_STATE_PRESENT);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>commandList-&gt;ResourceBarrier(1,<sp/>&amp;endBarrier);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::SetRenderTargets(ID3D12GraphicsCommandList*<sp/>commandList,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U32<sp/>cBufferIdx,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT<sp/>rtvDescriptorSize)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>rtvHandle(m_rtvHeap-&gt;GetCPUDescriptorHandleForHeapStart(),<sp/>cBufferIdx,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtvDescriptorSize);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>numRTV<sp/>=<sp/>m_isTargetSwapChain<sp/>?<sp/>1u<sp/>:<sp/>U32(m_renderOutputs.size());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Both<sp/>Depth<sp/>&amp;<sp/>RTV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasDepth)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_CPU_DESCRIPTOR_HANDLE<sp/>dsvHandle(m_dsvHeap-&gt;GetCPUDescriptorHandleForHeapStart());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>commandList-&gt;OMSetRenderTargets(numRTV,<sp/>&amp;rtvHandle,<sp/>1,<sp/>&amp;dsvHandle);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>commandList-&gt;ClearDepthStencilView(dsvHandle,<sp/>D3D12_CLEAR_FLAG_DEPTH,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clearData.m_depth,<sp/>m_clearData.m_stencil,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Only<sp/>RTV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>commandList-&gt;OMSetRenderTargets(numRTV,<sp/>&amp;rtvHandle,<sp/>1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>commandList-&gt;ClearRenderTargetView(rtvHandle,<sp/>m_clearData.m_color,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;std::reference_wrapper&lt;const<sp/>D3D12ScopedShader&gt;&gt;&amp;<sp/>D3D12ScopedRenderPass::GetShaders()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_passShaders;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;std::reference_wrapper&lt;const RenderTargetCreateInfo&gt;</ref>&gt;&amp;<sp/>D3D12ScopedRenderPass::</highlight></codeline>
<codeline lineno="238"><highlight class="normal">GetInputInfo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_passInputs;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;std::reference_wrapper&lt;const D3D12ScopedImage&gt;</ref>&gt;&amp;<sp/>D3D12ScopedRenderPass::GetInputImages()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_allRenderInputs;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorTableEntry&gt;&amp;<sp/>D3D12ScopedRenderPass::GetRootSignatureTable()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rootSignatureTable;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordResourceBarriersForOutputsStart(ID3D12GraphicsCommandList*<sp/>commandList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rtv<sp/>:<sp/>m_renderOutputs)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>rtv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_RENDER_TARGET,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dsv<sp/>:<sp/>m_depthOutputs)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>dsv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_DEPTH_WRITE,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordResourceBarriersForOutputsEnd(ID3D12GraphicsCommandList*<sp/>commandList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rtv<sp/>:<sp/>m_renderOutputs)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>rtv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dsv<sp/>:<sp/>m_depthOutputs)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>dsv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordResourceBarriersForInputsStart(ID3D12GraphicsCommandList*<sp/>commandList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rtv<sp/>:<sp/>m_renderInputs)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>rtv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dsv<sp/>:<sp/>m_depthInputs)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>dsv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordResourceBarriersForInputsEnd(ID3D12GraphicsCommandList*<sp/>commandList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rtv<sp/>:<sp/>m_renderInputs)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>rtv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dsv<sp/>:<sp/>m_depthInputs)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>dsv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_COMMON,<sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::RecordResourceBarriersForWritingInputs(ID3D12GraphicsCommandList*<sp/>commandList)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rtv<sp/>:<sp/>m_renderInputs)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>rtv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>D3D12_RESOURCE_STATE_RENDER_TARGET,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dsv<sp/>:<sp/>m_depthInputs)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>dsv.get().Transition(commandList,<sp/>D3D12_RESOURCE_STATE_GENERIC_READ,<sp/>D3D12_RESOURCE_STATE_DEPTH_WRITE,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_D3D12RenderSystem);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::WaitForGPU(ID3D12CommandQueue*<sp/>commandQueue)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>fence<sp/>=<sp/>m_fenceValue;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>commandQueue-&gt;Signal(m_signalFence.Get(),<sp/>m_fenceValue),<sp/></highlight><highlight class="stringliteral">&quot;Fence<sp/>wait<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>m_fenceValue++;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>the<sp/>previous<sp/>frame<sp/>is<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_signalFence-&gt;GetCompletedValue()<sp/>&lt;<sp/>fence)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>m_signalFence-&gt;SetEventOnCompletion(fence,<sp/>m_fenceEvent),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>set<sp/>event<sp/>completion<sp/>on<sp/>Fence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>WaitForSingleObject(m_fenceEvent,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">U32<sp/>D3D12ScopedRenderPass::GetCommandBufferCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>U32(m_commandBuffers.size());</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::ApplyBlendToPSO(D3D12_GRAPHICS_PIPELINE_STATE_DESC&amp;<sp/>psoDesc,<sp/>U32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_blendState.m_enable)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorBlendOp<sp/>=<sp/>ToD3D12_BLEND_OP(m_blendState.m_color.m_op);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>colorBlendOp,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Blend<sp/>Op<sp/>For<sp/>Color<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaBlendOp<sp/>=<sp/>ToD3D12_BLEND_OP(m_blendState.m_alpha.m_op);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>alphaBlendOp,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Blend<sp/>Op<sp/>For<sp/>Alpha<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorSrcFactor<sp/>=<sp/>ToD3D12_BLEND(m_blendState.m_color.m_srcFactor);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>colorSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Source<sp/>Color<sp/>Factor<sp/>for<sp/>Blend<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colorDstFactor<sp/>=<sp/>ToD3D12_BLEND(m_blendState.m_color.m_dstFactor);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>colorDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Dest<sp/>Color<sp/>Factor<sp/>for<sp/>Blend<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaSrcFactor<sp/>=<sp/>ToD3D12_BLEND(m_blendState.m_alpha.m_srcFactor);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>alphaSrcFactor,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Source<sp/>Alpha<sp/>Factor<sp/>for<sp/>Blend<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alphaDstFactor<sp/>=<sp/>ToD3D12_BLEND(m_blendState.m_alpha.m_dstFactor);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>alphaDstFactor,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Dest<sp/>Alpha<sp/>Factor<sp/>for<sp/>Blend<sp/>in<sp/>Pipeline<sp/>Render<sp/>Target&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>psoDesc.BlendState<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CD3DX12_BLEND_DESC(D3D12_DEFAULT);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].BlendEnable<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">BOOL</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].BlendOp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>colorBlendOp.value();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].BlendOpAlpha<sp/><sp/><sp/>=<sp/>alphaBlendOp.value();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].SrcBlend<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>colorSrcFactor.value();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].DestBlend<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>colorDstFactor.value();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].SrcBlendAlpha<sp/><sp/>=<sp/>alphaSrcFactor.value();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>psoDesc.BlendState.RenderTarget[id].DestBlendAlpha<sp/>=<sp/>alphaDstFactor.value();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::UpdatePipelineInfo(D3D12_GRAPHICS_PIPELINE_STATE_DESC&amp;<sp/>psoDesc)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isTargetSwapChain)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>ToDXGI_FORMAT(m_swapChainRef.get().GetFormat());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>format,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Format<sp/>-<sp/>Swap<sp/>Chain<sp/>-<sp/>For<sp/>Pipeline<sp/>Render<sp/>Target<sp/>Format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_hasDepth)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>depthFormat<sp/>=<sp/>ToDXGI_FORMAT(m_swapChainRef.get().GetDepthFormat());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>depthFormat,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Depth<sp/>Format<sp/>-<sp/>Swap<sp/>Chain<sp/>-<sp/>For<sp/>Pipeline<sp/>Render<sp/>Target<sp/>Format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psoDesc.DSVFormat<sp/>=<sp/>depthFormat.value();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>psoDesc.DepthStencilState<sp/>=<sp/>CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplyBlendToPSO(psoDesc,<sp/>0);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>psoDesc.RTVFormats[0]<sp/><sp/><sp/><sp/>=<sp/>format.value();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>psoDesc.NumRenderTargets<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>U32<sp/>rtvIdx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>outputInfo<sp/>:<sp/>m_renderOutputInfo)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>ToDXGI_FORMAT(outputInfo.m_format);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_OPT(log_D3D12RenderSystem,<sp/>format,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>Format<sp/>For<sp/>Pipeline<sp/>Render<sp/>Target<sp/>Format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthOrStencilComponent(outputInfo.m_format))<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psoDesc.DSVFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>format.value();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psoDesc.DepthStencilState<sp/>=<sp/>CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplyBlendToPSO(psoDesc,<sp/>rtvIdx);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>psoDesc.RTVFormats[rtvIdx]<sp/>=<sp/>format.value();<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cppcoreguidelines-pro-bounds-constant-array-index)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>++rtvIdx;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>psoDesc.NumRenderTargets<sp/>=<sp/>m_renderOutputInfo.GetSize();</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>D3D12ScopedRenderPass::CreateBase(</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Microsoft::WRL::ComPtr&lt;ID3D12Device&gt;&amp;<sp/>device,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PipelinePassCreateInfo&amp;<sp/>createInfo,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorSlot&gt;&amp;<sp/>descriptorSlots,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;DescriptorTableEntry&gt;&amp;<sp/>descriptorSetTable,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;RenderTargetCreateInfo&gt;&amp;<sp/>pipelineBuffers,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedImage&gt;&amp;<sp/>pipelineBufferImages,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Containers::Vector&lt;D3D12ScopedShader&gt;&amp;<sp/>allShaders)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>STACK_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>2048);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateFence(0,<sp/>D3D12_FENCE_FLAG_NONE,<sp/>IID_PPV_ARGS(&amp;m_signalFence)),</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>fence&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>m_blendState<sp/>=<sp/>createInfo.m_blendState;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>m_clearData<sp/>=<sp/>createInfo.m_clearData;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>event<sp/>handle<sp/>to<sp/>use<sp/>for<sp/>frame<sp/>synchronization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>m_fenceEvent<sp/>=<sp/>CreateEvent(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>FALSE,<sp/>FALSE,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_fenceEvent<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>HRESULT_FROM_WIN32(GetLastError()),<sp/></highlight><highlight class="stringliteral">&quot;Fence<sp/>Event<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>m_passShaders.Reserve(U32(createInfo.m_shaders.size()));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>m_passInputs.Reserve(U32(createInfo.m_inputTargets.size()));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>m_renderOutputInfo.Reserve(U32(createInfo.m_outputTargets.size()));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>m_allRenderInputs.Reserve(U32(createInfo.m_inputTargets.size()));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>outputId<sp/>:<sp/>createInfo.m_outputTargets)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetBufferRef<sp/>=<sp/>pipelineBuffers[outputId];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderOutputInfo.PushBack({targetBufferRef.m_format});</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shaderId<sp/>:<sp/>createInfo.m_shaders)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shaderRef<sp/>=<sp/>allShaders[shaderId];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>m_passShaders.PushBack(shaderRef);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>inputId<sp/>:<sp/>createInfo.m_inputTargets)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[?]:<sp/>Respect<sp/>shader<sp/>stages<sp/>here<sp/>for<sp/>correct<sp/>binding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>targetBufferRef<sp/>=<sp/>pipelineBuffers[inputId.m_id];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>m_passInputs.PushBack(targetBufferRef);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HasDepthOrStencilComponent(targetBufferRef.m_format))<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_depthInputs.push_back(pipelineBufferImages[inputId.m_id]);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_renderInputs.push_back(pipelineBufferImages[inputId.m_id]);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>m_allRenderInputs.PushBack(pipelineBufferImages[inputId.m_id]);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;========<sp/>D3D12<sp/>Render<sp/>Pass:<sp/>Root<sp/>Signature<sp/>========&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;CD3DX12_ROOT_PARAMETER&gt;</ref><sp/>descriptorTables(U32(createInfo.m_descriptorSets.size()<sp/>+<sp/>1),<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>m_rootSignatureTable.Reserve(U32(createInfo.m_descriptorSets.size()));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>U32<sp/>cbvOffset<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>U32<sp/>srvOffset<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>U32<sp/>samplerOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>setId<sp/>:<sp/>createInfo.m_descriptorSets)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tableEntry<sp/>=<sp/>descriptorSetTable[setId];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>Generating<sp/>for<sp/>Set<sp/>Position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>m_rootSignatureTable</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.GetSize());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>Original<sp/>Set<sp/>Position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>setId);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>m_rootSignatureTable.PushBack(tableEntry);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;CD3DX12_DESCRIPTOR_RANGE&gt;</ref><sp/>currentRanges(tableEntry.m_count,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>slot<sp/>:<sp/>descriptorSlots)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slot.m_setIdx<sp/>!=<sp/>setId)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CD3DX12_DESCRIPTOR_RANGE<sp/>rangeData;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(slot.m_type)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::UniformBuffer:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>[%d]<sp/>Applying<sp/>Uniform<sp/>Buffer<sp/>at<sp/>Register<sp/>b(%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setId,<sp/>cbvOffset);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rangeData.Init(D3D12_DESCRIPTOR_RANGE_TYPE_CBV,<sp/>1,<sp/>cbvOffset);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRanges.PushBack(rangeData);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cbvOffset;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_descriptorCount.m_numUniformSlots;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::Sampler:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>[%d]<sp/>Applying<sp/>Sampler<sp/>Buffer<sp/>at<sp/>Register<sp/>s(%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setId,<sp/>samplerOffset);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rangeData.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER,<sp/>1,<sp/>samplerOffset);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRanges.PushBack(rangeData);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++samplerOffset;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_descriptorCount.m_numSamplerSlots;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::SampledImage:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>[%d]<sp/>Applying<sp/>Texture<sp/>Image<sp/>at<sp/>Register<sp/>t(%d)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setId,<sp/>srvOffset);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rangeData.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV,<sp/>1,<sp/>srvOffset);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentRanges.PushBack(rangeData);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++srvOffset;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_descriptorCount.m_numSampledImageSlots;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::PushConstant:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::CombinedImageSampler:</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DescriptorType::UnorderedView:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_ERR(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>Descriptor<sp/>Type<sp/>for<sp/>D3D12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>CD3DX12_ROOT_PARAMETER<sp/>rootParameter;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>rootParameter.InitAsDescriptorTable(currentRanges.GetSize(),<sp/>currentRanges.Data(),<sp/>D3D12_SHADER_VISIBILITY_ALL);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorTables.PushBack(rootParameter);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>CD3DX12_ROOT_PARAMETER<sp/>inputsRootParameter;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>CD3DX12_DESCRIPTOR_RANGE<sp/>inputRangeData;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Have<sp/>some<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!createInfo.m_inputTargets.empty())<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>Generating<sp/>for<sp/>Set<sp/>Position:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>descriptorTables.</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetSize());</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>[Attachments]<sp/>Applying<sp/>%d<sp/>Image<sp/>Attachments<sp/>as<sp/>register<sp/>t(%d)<sp/>to<sp/>t(%d)&quot;</highlight><highlight class="normal">,<sp/>createInfo.</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inputTargets.size(),<sp/>srvOffset,<sp/>srvOffset<sp/>+<sp/>createInfo.m_inputTargets.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>inputRangeData.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV,<sp/>UINT(createInfo.m_inputTargets.size()),<sp/>srvOffset);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>inputsRootParameter.InitAsDescriptorTable(1,<sp/>&amp;inputRangeData,<sp/>D3D12_SHADER_VISIBILITY_ALL);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>descriptorTables.PushBack(inputsRootParameter);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>CD3DX12_ROOT_SIGNATURE_DESC<sp/>rootSignatureDesc;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>rootSignatureDesc.Init(descriptorTables.GetSize(),<sp/>descriptorTables.Data(),<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>ComPtr&lt;ID3DBlob&gt;<sp/>signature;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>ComPtr&lt;ID3DBlob&gt;<sp/>error;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>D3D12SerializeRootSignature(&amp;rootSignatureDesc,<sp/>D3D_ROOT_SIGNATURE_VERSION_1,<sp/>&amp;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>signature,<sp/>&amp;error),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>serialize<sp/>D3D12<sp/>Root<sp/>Signature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>VERIFY_D3D_OP(log_D3D12RenderSystem,<sp/>device-&gt;CreateRootSignature(0,<sp/>signature-&gt;GetBufferPointer(),<sp/>signature-&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>GetBufferSize(),<sp/>IID_PPV_ARGS(&amp;m_rootSignature)),<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>Root<sp/>Signature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>LOG_DBG(log_D3D12RenderSystem,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;D3D12<sp/>Render<sp/>Pass:<sp/>Completed<sp/>Root<sp/>Signature&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>D3D12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/D3D12/D3D12ScopedRenderPass.cpp"/>
  </compounddef>
</doxygen>
