<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_vector__benchmark_8cpp" kind="file" language="C++">
    <compoundname>Vector_benchmark.cpp</compoundname>
    <includes refid="_vector__benchmark_8h" local="yes">Vector_benchmark.h</includes>
    <includes refid="_vector_8h" local="yes">Containers/Vector.h</includes>
    <incdepgraph>
      <node id="4451">
        <label>functional</label>
      </node>
      <node id="4454">
        <label>iterator</label>
      </node>
      <node id="4442">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="4443" relation="include">
        </childnode>
        <childnode refid="4448" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
      </node>
      <node id="4440">
        <label>Vector_benchmark.h</label>
        <link refid="_vector__benchmark_8h_source"/>
        <childnode refid="4441" relation="include">
        </childnode>
        <childnode refid="4442" relation="include">
        </childnode>
        <childnode refid="4449" relation="include">
        </childnode>
      </node>
      <node id="4445">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="4446" relation="include">
        </childnode>
      </node>
      <node id="4450">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
        <childnode refid="4447" relation="include">
        </childnode>
      </node>
      <node id="4444">
        <label>cassert</label>
      </node>
      <node id="4448">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="4445" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
      </node>
      <node id="4443">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="4444" relation="include">
        </childnode>
        <childnode refid="4445" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
        <childnode refid="4447" relation="include">
        </childnode>
      </node>
      <node id="4447">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="4455">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="4444" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4450" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
      </node>
      <node id="4441">
        <label>benchmark/benchmark.h</label>
      </node>
      <node id="4449">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="4450" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
      </node>
      <node id="4452">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="4444" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4455" relation="include">
        </childnode>
        <childnode refid="4450" relation="include">
        </childnode>
        <childnode refid="4446" relation="include">
        </childnode>
        <childnode refid="4447" relation="include">
        </childnode>
      </node>
      <node id="4439">
        <label>Source/Containers/Benchmark/Vector_benchmark.cpp</label>
        <link refid="_vector__benchmark_8cpp"/>
        <childnode refid="4440" relation="include">
        </childnode>
        <childnode refid="4452" relation="include">
        </childnode>
      </node>
      <node id="4446">
        <label>Types.h</label>
      </node>
      <node id="4453">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_complex_type" prot="public">ComplexType</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_vector__benchmark_8cpp_1ab740f0436e45de8760ecbb1da5f11066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_EmptyCreation)(benchmark</argsstring>
        <name>BENCHMARK_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_EmptyCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="80" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a8ce437907b41f9beeecc3d61c2cdc01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_EmptyCreation_ComplexType)(benchmark</argsstring>
        <name>BENCHMARK_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_EmptyCreation_ComplexType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="88" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1abff77f9106c0ee80fe86c58fe873cb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_AllocateCreation)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_AllocateCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="96" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a804346727717046026aa47cb2fc485ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_AllocateCreation) -&gt; RangeMultiplier(2) -&gt;Range(8, 8&lt;&lt; 10)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_AllocateCreation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a50e227a37faf2038bfd5f6b1b5cfaf11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_InsertWithReserve)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_InsertWithReserve</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="105" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="105" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a6dd5dcf85ca393740d381799fce431ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_InsertWithReserve) -&gt; RangeMultiplier(2) -&gt;Range(8, 8&lt;&lt; 10)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_InsertWithReserve</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1acd9e7a149dc4d4524bafd332e5fd8acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_InsertWithReserve_Heavy)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_InsertWithReserve_Heavy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="119" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="119" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a2a32762ce7d84d12ddfee532c3a10b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_InsertWithReserve_Heavy) -&gt; RangeMultiplier(2) -&gt;Range(8, 8&lt;&lt; 10)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_InsertWithReserve_Heavy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a9442ef126d558754c6219ac8bb82b4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_DEFINE_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_SetWithResize)(benchmark</argsstring>
        <name>BENCHMARK_DEFINE_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_SetWithResize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="136" column="1" bodyfile="Source/Containers/Benchmark/Vector_benchmark.cpp" bodystart="136" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="_vector__benchmark_8cpp_1a62431646a89f86db3c5a09b81056309f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BENCHMARK_REGISTER_F</definition>
        <argsstring>(VectorBenchmarkFixture, BM_SetWithResize) -&gt; RangeMultiplier(2) -&gt;Range(8, 8&lt;&lt; 10)</argsstring>
        <name>BENCHMARK_REGISTER_F</name>
        <param>
          <type><ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref></type>
        </param>
        <param>
          <type>BM_SetWithResize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Containers/Benchmark/Vector_benchmark.cpp" line="148" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vector_benchmark.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Containers/Vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura_1_1_containers" kindref="compound">Azura::Containers</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_complex_type" kindref="compound">ComplexType</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_data;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_ctorCalls;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_dtorCalls;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_copyCtorCalls;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_moveCtorCalls;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_copyAssignCalls;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_moveAssignCalls;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResetStats()<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>s_ctorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>s_dtorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>s_copyCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>s_moveCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>s_copyAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>s_moveAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):<sp/>Test<sp/>Logs<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Reset&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(data)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_ctorCalls;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>~<ref refid="class_complex_type" kindref="compound">ComplexType</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Dtor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_dtorCalls;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(other.m_data)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Copy<sp/>Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_copyCtorCalls;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_data(std::move(other.m_data))<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Move<sp/>Ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_moveCtorCalls;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Copy<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data<sp/>=<sp/>other.m_data;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_copyAssignCalls;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;<sp/>operator=(<ref refid="class_complex_type" kindref="compound">ComplexType</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Move<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data<sp/>=<sp/>std::move(other.m_data);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>++s_moveAssignCalls;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Data()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_ctorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_dtorCalls<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_copyCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_moveCtorCalls<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_copyAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComplexType::s_moveAssignCalls<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">BENCHMARK_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_EmptyCreation)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v(alloc);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">BENCHMARK_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_EmptyCreation_ComplexType)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;ComplexType&gt;</ref><sp/>v(alloc);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_AllocateCreation)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v(U32(st.range(0)),<sp/>alloc);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_AllocateCreation)-&gt;RangeMultiplier(2)-&gt;Range(8,<sp/>8<sp/>&lt;&lt;<sp/>10);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_InsertWithReserve)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v(U32(st.range(0)),<sp/>alloc);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>U32(st.range(0));<sp/>++i)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.PushBack(i);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_InsertWithReserve)-&gt;RangeMultiplier(2)-&gt;Range(8,<sp/>8<sp/>&lt;&lt;<sp/>10);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_InsertWithReserve_Heavy)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>size<sp/>=<sp/>0;<sp/>size<sp/>&lt;<sp/>U32(st.range(0));<sp/>++size)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v(size,<sp/>alloc);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.PushBack(i);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_InsertWithReserve_Heavy)-&gt;RangeMultiplier(2)-&gt;Range(8,<sp/>8<sp/>&lt;&lt;<sp/>10);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">BENCHMARK_DEFINE_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_SetWithResize)(benchmark::State&amp;<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_<sp/>:<sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_azura_1_1_containers_1_1_vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>v(U32(st.range(0)),<sp/>U32(st.range(0)),<sp/>alloc);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(U32<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>U32(st.range(0));<sp/>++i)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc.Reset();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">BENCHMARK_REGISTER_F(<ref refid="class_vector_benchmark_fixture" kindref="compound">VectorBenchmarkFixture</ref>,<sp/>BM_SetWithResize)-&gt;RangeMultiplier(2)-&gt;Range(8,<sp/>8<sp/>&lt;&lt;<sp/>10);</highlight></codeline>
    </programlisting>
    <location file="Source/Containers/Benchmark/Vector_benchmark.cpp"/>
  </compounddef>
</doxygen>
