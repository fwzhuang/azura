<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_stack_allocator_8h" kind="file" language="C++">
    <compoundname>StackAllocator.h</compoundname>
    <includes local="yes">Types.h</includes>
    <includedby refid="_stack_allocator_8cpp" local="yes">Source/Common/Src/Memory/StackAllocator.cpp</includedby>
    <incdepgraph>
      <node id="4016">
        <label>Source/Common/Inc/Memory/StackAllocator.h</label>
        <link refid="_stack_allocator_8h"/>
        <childnode refid="4017" relation="include">
        </childnode>
      </node>
      <node id="4017">
        <label>Types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_azura_1_1_stack_allocator" prot="public">Azura::StackAllocator</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stack<sp/>Allocator<sp/>based<sp/>on<sp/>a<sp/>header<sp/>file<sp/>template<sp/>provided<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Game<sp/>Engine<sp/>Architecture<sp/>-<sp/>Jason<sp/>Gregory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_azura_1_1_stack_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_azura_1_1_stack_allocator" kindref="compound">StackAllocator</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Marker<sp/>=<sp/>UPTR;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>pool<sp/>of<sp/>memory<sp/>for<sp/>the<sp/>stack<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_azura_1_1_stack_allocator" kindref="compound">StackAllocator</ref>(U32<sp/>stackSizeInBytes);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocates<sp/>the<sp/>pool<sp/>of<sp/>memory<sp/>which<sp/>was<sp/>being<sp/>used<sp/>by<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>~<ref refid="class_azura_1_1_stack_allocator" kindref="compound">StackAllocator</ref>();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocates<sp/>a<sp/>block<sp/>a<sp/>memory<sp/>as<sp/>long<sp/>as<sp/>it<sp/>can<sp/>fit<sp/>in<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>returns<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Allocate(U32<sp/>bytesToAllocate);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Frees<sp/>memory<sp/>till<sp/>a<sp/>marker.<sp/>use<sp/>getMarker()<sp/>to<sp/>get<sp/>the<sp/>memory<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>later<sp/>free<sp/>to<sp/>it<sp/>when<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreeToMarker(Marker<sp/>marker);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>memory<sp/>pointer<sp/>in<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>Marker<sp/>GetMarker()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>the<sp/>stack<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>Marker<sp/>mCurrentMarker;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>Marker<sp/>mBaseMarker;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>U32<sp/>mSize;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Common/Inc/Memory/StackAllocator.h"/>
  </compounddef>
</doxygen>
