<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_texture_manager_8cpp" kind="file" language="C++">
    <compoundname>TextureManager.cpp</compoundname>
    <includes refid="_texture_manager_8h" local="yes">Generic/TextureManager.h</includes>
    <includes local="yes">stb_image.h</includes>
    <incdepgraph>
      <node id="2847">
        <label>functional</label>
      </node>
      <node id="2852">
        <label>iterator</label>
      </node>
      <node id="2862">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2857">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2856" relation="include">
        </childnode>
        <childnode refid="2858" relation="include">
        </childnode>
        <childnode refid="2859" relation="include">
        </childnode>
        <childnode refid="2860" relation="include">
        </childnode>
        <childnode refid="2861" relation="include">
        </childnode>
      </node>
      <node id="2844">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2846">
        <label>Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="2847" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2848" relation="include">
        </childnode>
      </node>
      <node id="2863">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="2850">
        <label>cassert</label>
      </node>
      <node id="2860">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="2854">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="2849" relation="include">
        </childnode>
        <childnode refid="2855" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2857" relation="include">
        </childnode>
        <childnode refid="2862" relation="include">
        </childnode>
        <childnode refid="2863" relation="include">
        </childnode>
        <childnode refid="2864" relation="include">
        </childnode>
        <childnode refid="2861" relation="include">
        </childnode>
      </node>
      <node id="2843">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="2844" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2848">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="2840">
        <label>Source/Azura/RenderSystem/Src/Generic/TextureManager.cpp</label>
        <link refid="_texture_manager_8cpp"/>
        <childnode refid="2841" relation="include">
        </childnode>
        <childnode refid="2867" relation="include">
        </childnode>
      </node>
      <node id="2864">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="2855">
        <label>Generic/Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="2856" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2861">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="2856">
        <label>tuple</label>
      </node>
      <node id="2853">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="2850" relation="include">
        </childnode>
        <childnode refid="2851" relation="include">
        </childnode>
        <childnode refid="2846" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2845">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="2846" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
      </node>
      <node id="2866">
        <label>vector</label>
      </node>
      <node id="2849">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="2850" relation="include">
        </childnode>
        <childnode refid="2851" relation="include">
        </childnode>
        <childnode refid="2847" relation="include">
        </childnode>
        <childnode refid="2852" relation="include">
        </childnode>
        <childnode refid="2853" relation="include">
        </childnode>
        <childnode refid="2846" relation="include">
        </childnode>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2848" relation="include">
        </childnode>
      </node>
      <node id="2865">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2866" relation="include">
        </childnode>
      </node>
      <node id="2858">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="2867">
        <label>stb_image.h</label>
      </node>
      <node id="2842">
        <label>Types.h</label>
      </node>
      <node id="2841">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="2842" relation="include">
        </childnode>
        <childnode refid="2843" relation="include">
        </childnode>
        <childnode refid="2845" relation="include">
        </childnode>
        <childnode refid="2849" relation="include">
        </childnode>
        <childnode refid="2854" relation="include">
        </childnode>
        <childnode refid="2865" relation="include">
        </childnode>
      </node>
      <node id="2851">
        <label>cstring</label>
      </node>
      <node id="2859">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_texture_manager_8cpp_1a18372412ad2fc3ce1e3240b3cf0efe78" prot="public" static="no">
        <name>STB_IMAGE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Azura/RenderSystem/Src/Generic/TextureManager.cpp" line="3" column="9" bodyfile="Source/Azura/RenderSystem/Src/Generic/TextureManager.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Generic/TextureManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">U32<sp/>TextureManager::s_currentTextureId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">TextureManager::TextureEntry::TextureEntry(Memory::MonotonicAllocator&amp;<sp/>allocator)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>:<sp/>m_handle(0),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_data(allocator)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">TextureManager::TextureManager(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureRequirements&amp;<sp/>requirements)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>:<sp/>log_TextureManager(Log(</highlight><highlight class="stringliteral">&quot;TextureManager&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxTextures(requirements.m_maxCount),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>m_textureBuffer(requirements.m_poolSize<sp/>+<sp/>requirements.m_maxCount<sp/>*<sp/>sizeof(TextureEntry)),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>m_textureAllocator(m_textureBuffer,<sp/>requirements.m_poolSize<sp/>+<sp/>requirements.m_maxCount<sp/>*<sp/>sizeof(TextureEntry)),</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>m_storedTextures(requirements.m_maxCount,<sp/>m_textureAllocator)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>stbi_set_flip_vertically_on_load(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>s_currentTextureId<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">U32<sp/>TextureManager::Load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>path)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_currentTextureId<sp/>==<sp/>m_maxTextures)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>Texture<sp/>Limit<sp/>Reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_ERR(log_TextureManager,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Texture<sp/>Limit<sp/>Reached<sp/>(%d<sp/>/<sp/>%d)<sp/>Increase<sp/>the<sp/>Max<sp/>Textures<sp/>to<sp/>Load&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_currentTextureId,<sp/>m_maxTextures);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imagePixels<sp/>=<sp/>stbi_load(path.c_str(),<sp/>&amp;width,<sp/>&amp;height,<sp/>&amp;channels,<sp/>4);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imagePixels<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_ERR(log_TextureManager,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>texture<sp/>from<sp/>STB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>s_currentTextureId++;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>bytePerPixel<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[TEXTURE]:<sp/>Support<sp/>Mip<sp/>Maps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>TextureEntry<sp/>entry<sp/><sp/><sp/><sp/>=<sp/>{m_textureAllocator};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>entry.m_desc.m_bounds.m_width<sp/><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>entry.m_desc.m_bounds.m_height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>entry.m_desc.m_size<sp/><sp/><sp/>=<sp/>bytePerPixel<sp/>*<sp/>width<sp/>*<sp/>height;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>entry.m_handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s_currentTextureId;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>entry.m_data.Resize(entry.m_desc.m_size);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[TEXTURE]:<sp/>Support<sp/>3D<sp/>Textures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.m_desc.m_type<sp/>=<sp/>ImageType::Image1D;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>Image<sp/>Data<sp/>to<sp/>our<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::memcpy(entry.m_data.Data(),<sp/>imagePixels,<sp/>entry.m_desc.m_size);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>LOG_DBG(log_TextureManager,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>Texture:<sp/>%s<sp/>&gt;&gt;<sp/>Size:<sp/>%d<sp/>bytes<sp/>&gt;&gt;<sp/>Dim:<sp/>%d<sp/>px<sp/>x<sp/>%d<sp/>px&quot;</highlight><highlight class="normal">,<sp/>path.c_str(),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>entry.m_desc.m_size,<sp/>entry.m_desc.m_bounds.m_width,<sp/>entry.m_desc.m_bounds.m_height);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>m_storedTextures.PushBack(std::move(entry));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>stbi_image_free(imagePixels);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_currentTextureId;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc*<sp/>TextureManager::GetInfo(U32<sp/>handle)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>textureEntry<sp/>:<sp/>m_storedTextures)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textureEntry.m_handle<sp/>==<sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;textureEntry.m_desc;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>LOG_ERR(log_TextureManager,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Cant<sp/>Find<sp/>Texture<sp/>Handle:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>handle);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U8*<sp/>TextureManager::GetData(U32<sp/>handle)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>textureEntry<sp/>:<sp/>m_storedTextures)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(textureEntry.m_handle<sp/>==<sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>textureEntry.m_data.Data();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>LOG_ERR(log_TextureManager,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Cant<sp/>Find<sp/>Texture<sp/>Data<sp/>for<sp/>Handle:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>handle);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Azura/RenderSystem/Src/Generic/TextureManager.cpp"/>
  </compounddef>
</doxygen>
