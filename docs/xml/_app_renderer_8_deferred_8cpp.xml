<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_app_renderer_8_deferred_8cpp" kind="file" language="C++">
    <compoundname>AppRenderer.Deferred.cpp</compoundname>
    <includes refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h" local="yes">TestZone/AppRenderer.h</includes>
    <includes refid="_raw_storage_format_8h" local="yes">Core/RawStorageFormat.h</includes>
    <includes refid="_render_system_8h" local="yes">Generic/RenderSystem.h</includes>
    <includes refid="_shader_8h" local="yes">Generic/Shader.h</includes>
    <includes refid="_memory_factory_8h" local="yes">Memory/MemoryFactory.h</includes>
    <includes refid="_monotonic_allocator_8h" local="yes">Memory/MonotonicAllocator.h</includes>
    <includes refid="_math_2_inc_2_math_2_transform_8h" local="yes">Math/Transform.h</includes>
    <includes refid="_icosphere_8h" local="yes">Math/Icosphere.h</includes>
    <incdepgraph>
      <node id="6311">
        <label>Camera.h</label>
        <link refid="_camera_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6300" relation="include">
        </childnode>
      </node>
      <node id="6306">
        <label>Math/Core.h</label>
        <link refid="_core_8h_source"/>
        <childnode refid="6307" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6283">
        <label>functional</label>
      </node>
      <node id="6284">
        <label>iterator</label>
      </node>
      <node id="6295">
        <label>Utils/Hash.h</label>
        <link refid="_hash_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6322">
        <label>Memory/MemoryFactory.h</label>
        <link refid="_memory_factory_8h_source"/>
        <childnode refid="6323" relation="include">
        </childnode>
        <childnode refid="6304" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6276">
        <label>Generic/Renderer.h</label>
        <link refid="_renderer_8h_source"/>
        <childnode refid="6277" relation="include">
        </childnode>
        <childnode refid="6280" relation="include">
        </childnode>
        <childnode refid="6288" relation="include">
        </childnode>
        <childnode refid="6289" relation="include">
        </childnode>
        <childnode refid="6290" relation="include">
        </childnode>
        <childnode refid="6298" relation="include">
        </childnode>
      </node>
      <node id="6290">
        <label>Core/RawStorageFormat.h</label>
        <link refid="_raw_storage_format_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6278" relation="include">
        </childnode>
        <childnode refid="6291" relation="include">
        </childnode>
        <childnode refid="6292" relation="include">
        </childnode>
        <childnode refid="6293" relation="include">
        </childnode>
        <childnode refid="6294" relation="include">
        </childnode>
      </node>
      <node id="6303">
        <label>Memory/RangeAllocator.h</label>
        <link refid="_range_allocator_8h_source"/>
        <childnode refid="6286" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6302" relation="include">
        </childnode>
      </node>
      <node id="6318">
        <label>boost/container_hash/hash.hpp</label>
      </node>
      <node id="6305">
        <label>MemoryBuffer.h</label>
        <link refid="_memory_buffer_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6286">
        <label>Memory/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6283" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6287" relation="include">
        </childnode>
      </node>
      <node id="6296">
        <label>Core/AssetLocation.h</label>
        <link refid="_asset_location_8h_source"/>
      </node>
      <node id="6281">
        <label>cassert</label>
      </node>
      <node id="6293">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="6289">
        <label>GenericTypes.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_generic_types_8h_source"/>
        <childnode refid="6280" relation="include">
        </childnode>
        <childnode refid="6277" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6290" relation="include">
        </childnode>
        <childnode refid="6295" relation="include">
        </childnode>
        <childnode refid="6296" relation="include">
        </childnode>
        <childnode refid="6297" relation="include">
        </childnode>
        <childnode refid="6294" relation="include">
        </childnode>
      </node>
      <node id="6304">
        <label>Memory/HeapMemoryBuffer.h</label>
        <link refid="_heap_memory_buffer_8h_source"/>
        <childnode refid="6305" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6272">
        <label>Source/Samples/0_TestZone/Src/AppRenderer.Deferred.cpp</label>
        <link refid="_app_renderer_8_deferred_8cpp"/>
        <childnode refid="6273" relation="include">
        </childnode>
        <childnode refid="6290" relation="include">
        </childnode>
        <childnode refid="6320" relation="include">
        </childnode>
        <childnode refid="6321" relation="include">
        </childnode>
        <childnode refid="6322" relation="include">
        </childnode>
        <childnode refid="6309" relation="include">
        </childnode>
        <childnode refid="6324" relation="include">
        </childnode>
        <childnode refid="6325" relation="include">
        </childnode>
      </node>
      <node id="6323">
        <label>Memory/StackMemoryBuffer.h</label>
        <link refid="_stack_memory_buffer_8h_source"/>
        <childnode refid="6281" relation="include">
        </childnode>
        <childnode refid="6305" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6287" relation="include">
        </childnode>
      </node>
      <node id="6287">
        <label>Utils/Macros.h</label>
        <link refid="_macros_8h_source"/>
      </node>
      <node id="6319">
        <label>TestZone/ImportedClothMesh.h</label>
        <link refid="_imported_cloth_mesh_8h_source"/>
        <childnode refid="6316" relation="include">
        </childnode>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6313" relation="include">
        </childnode>
      </node>
      <node id="6315">
        <label>TestZone/ClothMesh.h</label>
        <link refid="_samples_20___test_zone_2_inc_2_test_zone_2_cloth_mesh_8h_source"/>
        <childnode refid="6316" relation="include">
        </childnode>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6313" relation="include">
        </childnode>
      </node>
      <node id="6297">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="6277">
        <label>Constants.h</label>
        <link refid="_azura_2_render_system_2_inc_2_generic_2_constants_8h_source"/>
        <childnode refid="6278" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6294">
        <label>boost/detail/bitmask.hpp</label>
      </node>
      <node id="6314">
        <label>random</label>
      </node>
      <node id="6300">
        <label>Core/Events.h</label>
        <link refid="_events_8h_source"/>
      </node>
      <node id="6278">
        <label>tuple</label>
      </node>
      <node id="6285">
        <label>Array.h</label>
        <link refid="_array_8h_source"/>
        <childnode refid="6281" relation="include">
        </childnode>
        <childnode refid="6282" relation="include">
        </childnode>
        <childnode refid="6286" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6309">
        <label>Memory/MonotonicAllocator.h</label>
        <link refid="_monotonic_allocator_8h_source"/>
        <childnode refid="6286" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6302">
        <label>vector</label>
      </node>
      <node id="6280">
        <label>Containers/Vector.h</label>
        <link refid="_vector_8h_source"/>
        <childnode refid="6281" relation="include">
        </childnode>
        <childnode refid="6282" relation="include">
        </childnode>
        <childnode refid="6283" relation="include">
        </childnode>
        <childnode refid="6284" relation="include">
        </childnode>
        <childnode refid="6285" relation="include">
        </childnode>
        <childnode refid="6286" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6287" relation="include">
        </childnode>
      </node>
      <node id="6273">
        <label>TestZone/AppRenderer.h</label>
        <link refid="0___test_zone_2_inc_2_test_zone_2_app_renderer_8h_source"/>
        <childnode refid="6274" relation="include">
        </childnode>
        <childnode refid="6275" relation="include">
        </childnode>
        <childnode refid="6276" relation="include">
        </childnode>
        <childnode refid="6299" relation="include">
        </childnode>
        <childnode refid="6303" relation="include">
        </childnode>
        <childnode refid="6304" relation="include">
        </childnode>
        <childnode refid="6301" relation="include">
        </childnode>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6308" relation="include">
        </childnode>
        <childnode refid="6310" relation="include">
        </childnode>
        <childnode refid="6312" relation="include">
        </childnode>
        <childnode refid="6314" relation="include">
        </childnode>
        <childnode refid="6315" relation="include">
        </childnode>
        <childnode refid="6319" relation="include">
        </childnode>
      </node>
      <node id="6301">
        <label>Log/Log.h</label>
        <link refid="_log_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6302" relation="include">
        </childnode>
      </node>
      <node id="6313">
        <label>Math/Geometry.h</label>
        <link refid="_geometry_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6290" relation="include">
        </childnode>
      </node>
      <node id="6288">
        <label>Drawable.h</label>
        <link refid="_drawable_8h_source"/>
        <childnode refid="6280" relation="include">
        </childnode>
        <childnode refid="6289" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6290" relation="include">
        </childnode>
      </node>
      <node id="6316">
        <label>TestZone/ClothCommon.h</label>
        <link refid="_cloth_common_8h_source"/>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6313" relation="include">
        </childnode>
        <childnode refid="6302" relation="include">
        </childnode>
        <childnode refid="6317" relation="include">
        </childnode>
        <childnode refid="6318" relation="include">
        </childnode>
      </node>
      <node id="6324">
        <label>Math/Transform.h</label>
        <link refid="_math_2_inc_2_math_2_transform_8h_source"/>
        <childnode refid="6306" relation="include">
        </childnode>
      </node>
      <node id="6291">
        <label>boost/preprocessor/repetition/repeat.hpp</label>
      </node>
      <node id="6317">
        <label>unordered_map</label>
      </node>
      <node id="6279">
        <label>Types.h</label>
      </node>
      <node id="6320">
        <label>Generic/RenderSystem.h</label>
        <link refid="_render_system_8h_source"/>
        <childnode refid="6286" relation="include">
        </childnode>
        <childnode refid="6276" relation="include">
        </childnode>
        <childnode refid="6308" relation="include">
        </childnode>
      </node>
      <node id="6307">
        <label>mathfu/matrix.h</label>
      </node>
      <node id="6299">
        <label>Generic/Window.h</label>
        <link refid="_window_8h_source"/>
        <childnode refid="6283" relation="include">
        </childnode>
        <childnode refid="6289" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6276" relation="include">
        </childnode>
        <childnode refid="6300" relation="include">
        </childnode>
        <childnode refid="6301" relation="include">
        </childnode>
      </node>
      <node id="6325">
        <label>Math/Icosphere.h</label>
        <link refid="_icosphere_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6313" relation="include">
        </childnode>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6302" relation="include">
        </childnode>
      </node>
      <node id="6310">
        <label>Camera/PolarCamera.h</label>
        <link refid="_polar_camera_8h_source"/>
        <childnode refid="6311" relation="include">
        </childnode>
      </node>
      <node id="6275">
        <label>set</label>
      </node>
      <node id="6312">
        <label>Math/Plane.h</label>
        <link refid="_plane_8h_source"/>
        <childnode refid="6306" relation="include">
        </childnode>
        <childnode refid="6313" relation="include">
        </childnode>
        <childnode refid="6302" relation="include">
        </childnode>
      </node>
      <node id="6298">
        <label>ComputePool.h</label>
        <link refid="_compute_pool_8h_source"/>
        <childnode refid="6280" relation="include">
        </childnode>
        <childnode refid="6289" relation="include">
        </childnode>
        <childnode refid="6279" relation="include">
        </childnode>
      </node>
      <node id="6308">
        <label>Generic/TextureManager.h</label>
        <link refid="_texture_manager_8h_source"/>
        <childnode refid="6279" relation="include">
        </childnode>
        <childnode refid="6304" relation="include">
        </childnode>
        <childnode refid="6309" relation="include">
        </childnode>
        <childnode refid="6280" relation="include">
        </childnode>
        <childnode refid="6289" relation="include">
        </childnode>
        <childnode refid="6301" relation="include">
        </childnode>
      </node>
      <node id="6282">
        <label>cstring</label>
      </node>
      <node id="6274">
        <label>memory</label>
      </node>
      <node id="6321">
        <label>Generic/Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="6289" relation="include">
        </childnode>
      </node>
      <node id="6292">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_azura_1_1_vertex" prot="public">Azura::Vertex</innerclass>
    <innerclass refid="struct_azura_1_1_vertex_with_u_v" prot="public">Azura::VertexWithUV</innerclass>
    <innerclass refid="struct_azura_1_1_uniform_buffer_data" prot="public">Azura::UniformBufferData</innerclass>
    <innernamespace refid="namespace_azura">Azura</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TestZone/AppRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Core/RawStorageFormat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/RenderSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Generic/Shader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MemoryFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Memory/MonotonicAllocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Transform.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Math/Icosphere.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_azura" kindref="compound">Azura</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Containers;<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Math;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex" kindref="compound">Vertex</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_col[4];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_pos[4];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_uv[2];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UniformBufferData<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4f<sp/>m_model;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4f<sp/>m_modelInvTranspose;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix4f<sp/>m_viewProj;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>AppRenderer::AppRenderer()</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_mainBuffer(16384<sp/>*<sp/>2),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mainAllocator(m_mainBuffer,<sp/>16384),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_drawableAllocator(m_mainBuffer,<sp/>16384),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>log_AppRenderer(Log(</highlight><highlight class="stringliteral">&quot;AppRenderer&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Initialize()<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Init<sp/>of<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>HEAP_ALLOCATOR(Temporary,<sp/>Memory::MonotonicAllocator,<sp/>16384);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window<sp/>=<sp/>RenderSystem::CreateApplicationWindow(</highlight><highlight class="stringliteral">&quot;TestZone&quot;</highlight><highlight class="normal">,<sp/>1280,<sp/>720);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;SetUpdateCallback([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>timeDelta)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UNUSED(timeDelta);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WindowUpdate();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>m_window-&gt;Initialize(),<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>Initialize<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ApplicationInfo<sp/>appInfo;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.m_name<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TestZone&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>appInfo.m_version<sp/>=<sp/>Version(1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceRequirements<sp/>requirements;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>requirements.m_discreteGPU<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>requirements.m_float64<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>requirements.m_int64<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>requirements.m_transferQueue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>UniformBufferData<sp/>uboData<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uboData.m_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Matrix4f::Identity();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>view<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Transform::LookAt(Vector3f(0.5f,<sp/>0.5f,<sp/>0.0f),<sp/>Vector3f(0.5f,<sp/>0.5f,<sp/>6.0f),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector3f(0.0f,<sp/>1.0f,<sp/>0.0f));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>proj<sp/>=<sp/>Transform::Perspective(45.0f,<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.1f,<sp/>100.0f);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uboData.m_viewProj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>proj<sp/>*<sp/>view;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>uboData.m_modelInvTranspose<sp/>=<sp/>uboData.m_model.Inverse().Transpose();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(vasumahesh1):[Q]:Allocator?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ApplicationRequirements<sp/>applicationRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>TextureRequirements<sp/>textureRequirements<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRequirements.m_maxCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>textureRequirements.m_poolSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;<sp/></highlight><highlight class="comment">//<sp/>4MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>DescriptorRequirements<sp/>descriptorRequirements<sp/>=<sp/>DescriptorRequirements(3,<sp/>3,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({<sp/>DescriptorType::UniformBuffer,<sp/>ShaderStage::Vertex<sp/>});</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::Sampler,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>BASIC_TEXTURE_SLOT<sp/>=<sp/>descriptorRequirements.AddDescriptor({DescriptorType::SampledImage,<sp/>ShaderStage::Pixel});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>UBO_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>UBO_SLOT<sp/>});</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SAMPLER_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>SAMPLER_SLOT<sp/>});</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>TEXTURE_SET<sp/>=<sp/>descriptorRequirements.AddSet({<sp/>BASIC_TEXTURE_SLOT<sp/>});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ShaderRequirements<sp/>shaderRequirements<sp/>=<sp/>ShaderRequirements(4,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>DEF_VERTEX_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Vertex,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.Deferred.vs&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>DEF_PIXEL_SHADER_ID<sp/>=<sp/>shaderRequirements.AddShader({<sp/>ShaderStage::Pixel,<sp/></highlight><highlight class="stringliteral">&quot;BasicDeferredTest.Deferred.ps&quot;</highlight><highlight class="normal">,<sp/>AssetLocation::Shaders<sp/>});</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>RenderPassRequirements<sp/>renderPassRequirements<sp/>=<sp/>RenderPassRequirements(1,<sp/>2,<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>renderPassRequirements.m_maxPools<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>COLOR_TARGET_1<sp/>=<sp/>renderPassRequirements.AddTarget({RawStorageFormat::R32G32B32A32_FLOAT});</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>GBUFFER_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{VERTEX_SHADER_ID,<sp/>PIXEL_SHADER_ID},<sp/><sp/></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Inputs{},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Outputs{COLOR_TARGET_1},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OUTPUT<sp/>TARGETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{UBO_SET,<sp/>SAMPLER_SET,<sp/>TEXTURE_SET},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DESCRIPTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClearData{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>SHADING_PASS<sp/>=<sp/>renderPassRequirements.AddPass({</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Shaders{DEF_VERTEX_SHADER_ID,<sp/>DEF_PIXEL_SHADER_ID},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Inputs{{COLOR_TARGET_1,<sp/>ShaderStage::Pixel}},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::Outputs{},<sp/></highlight><highlight class="comment">//<sp/>END<sp/>OF<sp/>RENDERING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PipelinePassCreateInfo::DescriptorSets{SAMPLER_SET},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClearData{{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>1.0f},<sp/>1.0f,<sp/>0}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderer<sp/>=<sp/>RenderSystem::CreateRenderer(appInfo,<sp/>requirements,<sp/>applicationRequirements,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_window-&gt;GetSwapChainRequirements(),<sp/>renderPassRequirements,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>descriptorRequirements,<sp/>shaderRequirements,<sp/>m_mainAllocator,<sp/>m_drawableAllocator,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*m_window);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>m_textureManager<sp/>=<sp/>RenderSystem::CreateTextureManager(textureRequirements);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U32<sp/>nocturnalTexture<sp/>=<sp/>m_textureManager-&gt;Load(</highlight><highlight class="stringliteral">&quot;Textures/Nocturnal.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawablePoolCreateInfo<sp/>poolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.m_renderPasses<sp/>=<sp/>{{GBUFFER_PASS},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>poolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>VERTEX_SLOT<sp/>=<sp/>poolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawablePool&amp;<sp/>pool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(poolInfo);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TextureDesc*<sp/>desc<sp/>=<sp/>m_textureManager-&gt;GetInfo(nocturnalTexture);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY_TRUE(log_AppRenderer,<sp/>desc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Texture<sp/>Description<sp/>was<sp/>Null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.BindTextureData(BASIC_TEXTURE_SLOT,<sp/>*desc,<sp/>m_textureManager-&gt;GetData(nocturnalTexture));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.BindSampler(SAMPLER_SLOT,<sp/>{});</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;VertexWithUV&gt;<sp/>vertexData<sp/>=<sp/>Vector&lt;VertexWithUV&gt;({</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{0,<sp/>0,<sp/>1,<sp/>1},<sp/>{0,<sp/>0}},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{1,<sp/>0,<sp/>1,<sp/>1},<sp/>{1,<sp/>0}},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{1,<sp/>1,<sp/>1,<sp/>1},<sp/>{1,<sp/>1}},</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{0,<sp/>1,<sp/>1,<sp/>1},<sp/>{0,<sp/>1}}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;U32&gt;<sp/>indexData<sp/>=<sp/>Vector&lt;U32&gt;({</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vertexData.Data());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexBufferStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indexData.Data());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uboDataBuffer<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;uboData);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawableCreateInfo<sp/>createInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>vertexData.GetSize();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>indexData.GetSize();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>drawableId<sp/>=<sp/>pool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.BindVertexData(drawableId,<sp/>VERTEX_SLOT,<sp/>bufferStart,<sp/>vertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.SetIndexData(drawableId,<sp/>indexBufferStart,<sp/>indexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.BindUniformData(drawableId,<sp/>UBO_SLOT,<sp/>uboDataBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(UniformBufferData));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>QUAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawablePoolCreateInfo<sp/>quadPoolInfo<sp/>=<sp/>{allocatorTemporary};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPoolInfo.m_byteSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x400000;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPoolInfo.m_numDrawables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPoolInfo.m_drawType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DrawType::InstancedIndexed;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPoolInfo.m_cullMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CullMode::None;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPoolInfo.m_renderPasses<sp/>=<sp/>{{SHADING_PASS},<sp/>allocatorTemporary};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>QUAD_VERTEX_SLOT<sp/>=<sp/>quadPoolInfo.AddInputSlot({<sp/>BufferUsageRate::PerVertex,<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32B32A32_FLOAT},<sp/>{</highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/>RawStorageFormat::R32G32_FLOAT}<sp/>}<sp/>});</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>DrawablePool&amp;<sp/>quadPool<sp/>=<sp/>m_renderer-&gt;CreateDrawablePool(quadPoolInfo);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPool.BindSampler(SAMPLER_SLOT,<sp/>{});</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;VertexWithUV&gt;<sp/>quadVertexData<sp/>=<sp/>Vector&lt;VertexWithUV&gt;({</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{-1,<sp/>-1,<sp/>0,<sp/>1},<sp/>{0,<sp/>0}},</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{1,<sp/>-1,<sp/>0,<sp/>1},<sp/>{1,<sp/>0}},</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{1,<sp/>1,<sp/>0,<sp/>1},<sp/>{1,<sp/>1}},</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>{{-1,<sp/>1,<sp/>0,<sp/>1},<sp/>{0,<sp/>1}}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;U32&gt;<sp/>quadIndexData<sp/>=<sp/>Vector&lt;U32&gt;({</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>2,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2,<sp/>3,<sp/>0</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>allocatorTemporary);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadBufferStart<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quadVertexData.Data());<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadIndexStart<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U8*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quadIndexData.Data());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Drawable<sp/>from<sp/>Pool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo<sp/>=<sp/>DrawableCreateInfo{};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_vertexCount<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>quadVertexData.GetSize();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_indexCount<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>quadIndexData.GetSize();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_instanceCount<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>createInfo.m_indexType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RawStorageFormat::R32_UINT;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quadId<sp/>=<sp/>quadPool.CreateDrawable(createInfo);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPool.BindVertexData(quadId,<sp/>QUAD_VERTEX_SLOT,<sp/>quadBufferStart,<sp/>quadVertexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vertex_with_u_v" kindref="compound">VertexWithUV</ref>));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>quadPool.SetIndexData(quadId,<sp/>quadIndexStart,<sp/>quadIndexData.GetSize()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U32));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>Drawables<sp/>Done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderer-&gt;Submit();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Initialized<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::WindowUpdate()<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>m_renderer-&gt;RenderFrame();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Run()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_INF(log_AppRenderer,<sp/>LOG_LEVEL,<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>AppRenderer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;StartListening();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppRenderer::Destroy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>m_window-&gt;Destroy();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Azura</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Samples/0_TestZone/Src/AppRenderer.Deferred.cpp"/>
  </compounddef>
</doxygen>
